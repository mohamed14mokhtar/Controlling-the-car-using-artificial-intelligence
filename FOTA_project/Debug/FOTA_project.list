
FOTA_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003930  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003ad0  08003ad0  00004ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b30  08003b30  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b30  08003b30  00004b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b38  08003b38  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b38  08003b38  00004b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b3c  08003b3c  00004b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003b40  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000005c  08003b9c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08003b9c  000052c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bf1  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002240  00000000  00000000  0000ec7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  00010ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006cc  00000000  00000000  000117d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a21  00000000  00000000  00011ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd6c  00000000  00000000  000288c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086156  00000000  00000000  00036631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc787  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002788  00000000  00000000  000bc7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000bef54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003ab8 	.word	0x08003ab8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003ab8 	.word	0x08003ab8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <BL_UART_Fetch_Host_Command>:


/* -----------------  Software Interfaces Definitions -----------------*/

uint8_t Data_Length = 0;
BL_Status BL_UART_Fetch_Host_Command(void){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
	BL_Status Status = BL_NACK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800057a:	2301      	movs	r3, #1
 800057c:	71bb      	strb	r3, [r7, #6]

	__HAL_UART_CLEAR_OREFLAG(BL_HOST_COMMUNICATION_UART);              // Clear overrun
 800057e:	2300      	movs	r3, #0
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	4b33      	ldr	r3, [pc, #204]	@ (8000650 <BL_UART_Fetch_Host_Command+0xe0>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	4b31      	ldr	r3, [pc, #196]	@ (8000650 <BL_UART_Fetch_Host_Command+0xe0>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]
	__HAL_UART_CLEAR_FLAG(BL_HOST_COMMUNICATION_UART, UART_FLAG_RXNE); // Clear RX buffer
 8000594:	4b2e      	ldr	r3, [pc, #184]	@ (8000650 <BL_UART_Fetch_Host_Command+0xe0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f06f 0220 	mvn.w	r2, #32
 800059c:	601a      	str	r2, [r3, #0]
	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);               // set all value at array to 0
 800059e:	2247      	movs	r2, #71	@ 0x47
 80005a0:	2100      	movs	r1, #0
 80005a2:	482c      	ldr	r0, [pc, #176]	@ (8000654 <BL_UART_Fetch_Host_Command+0xe4>)
 80005a4:	f002 fe08 	bl	80031b8 <memset>
	/* Read the length of the command packet received from the HOST */
	//first byte receive should be one of this values
	while(!((BL_Host_Buffer[0] == 71) || (BL_Host_Buffer[0] == 6) || (BL_Host_Buffer[0] == 4))){
 80005a8:	e008      	b.n	80005bc <BL_UART_Fetch_Host_Command+0x4c>
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_Host_Buffer, 1, HAL_MAX_DELAY);
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	2201      	movs	r2, #1
 80005b0:	4928      	ldr	r1, [pc, #160]	@ (8000654 <BL_UART_Fetch_Host_Command+0xe4>)
 80005b2:	4827      	ldr	r0, [pc, #156]	@ (8000650 <BL_UART_Fetch_Host_Command+0xe0>)
 80005b4:	f002 fa19 	bl	80029ea <HAL_UART_Receive>
 80005b8:	4603      	mov	r3, r0
 80005ba:	71bb      	strb	r3, [r7, #6]
	while(!((BL_Host_Buffer[0] == 71) || (BL_Host_Buffer[0] == 6) || (BL_Host_Buffer[0] == 4))){
 80005bc:	4b25      	ldr	r3, [pc, #148]	@ (8000654 <BL_UART_Fetch_Host_Command+0xe4>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b47      	cmp	r3, #71	@ 0x47
 80005c2:	d007      	beq.n	80005d4 <BL_UART_Fetch_Host_Command+0x64>
 80005c4:	4b23      	ldr	r3, [pc, #140]	@ (8000654 <BL_UART_Fetch_Host_Command+0xe4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b06      	cmp	r3, #6
 80005ca:	d003      	beq.n	80005d4 <BL_UART_Fetch_Host_Command+0x64>
 80005cc:	4b21      	ldr	r3, [pc, #132]	@ (8000654 <BL_UART_Fetch_Host_Command+0xe4>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d1ea      	bne.n	80005aa <BL_UART_Fetch_Host_Command+0x3a>

	}


	if(HAL_Status != HAL_OK){
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <BL_UART_Fetch_Host_Command+0x70>
		Status = BL_NACK;
 80005da:	2300      	movs	r3, #0
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	e032      	b.n	8000646 <BL_UART_Fetch_Host_Command+0xd6>
	}
	else{
		Data_Length = BL_Host_Buffer[0];  //length of the packet
 80005e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000654 <BL_UART_Fetch_Host_Command+0xe4>)
 80005e2:	781a      	ldrb	r2, [r3, #0]
 80005e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000658 <BL_UART_Fetch_Host_Command+0xe8>)
 80005e6:	701a      	strb	r2, [r3, #0]
		/* Read the command packet received from the HOST */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_Host_Buffer[1], Data_Length-1, HAL_MAX_DELAY);
 80005e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000658 <BL_UART_Fetch_Host_Command+0xe8>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	4919      	ldr	r1, [pc, #100]	@ (800065c <BL_UART_Fetch_Host_Command+0xec>)
 80005f6:	4816      	ldr	r0, [pc, #88]	@ (8000650 <BL_UART_Fetch_Host_Command+0xe0>)
 80005f8:	f002 f9f7 	bl	80029ea <HAL_UART_Receive>
 80005fc:	4603      	mov	r3, r0
 80005fe:	71bb      	strb	r3, [r7, #6]

		if(HAL_Status != HAL_OK){
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <BL_UART_Fetch_Host_Command+0x9c>
			Status = BL_NACK;
 8000606:	2300      	movs	r3, #0
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	e01c      	b.n	8000646 <BL_UART_Fetch_Host_Command+0xd6>
		}
		else{
			switch(BL_Host_Buffer[1]){
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <BL_UART_Fetch_Host_Command+0xe4>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	2b16      	cmp	r3, #22
 8000612:	d012      	beq.n	800063a <BL_UART_Fetch_Host_Command+0xca>
 8000614:	2b16      	cmp	r3, #22
 8000616:	dc16      	bgt.n	8000646 <BL_UART_Fetch_Host_Command+0xd6>
 8000618:	2b14      	cmp	r3, #20
 800061a:	d002      	beq.n	8000622 <BL_UART_Fetch_Host_Command+0xb2>
 800061c:	2b15      	cmp	r3, #21
 800061e:	d006      	beq.n	800062e <BL_UART_Fetch_Host_Command+0xbe>
 8000620:	e011      	b.n	8000646 <BL_UART_Fetch_Host_Command+0xd6>
				case CBL_GO_TO_ADDR_CMD:
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
					BL_Print_Message("CBL_GO_TO_ADDR_CMD \r\n");
#endif
					Bootloader_Jump_To_Address(BL_Host_Buffer);
 8000622:	480c      	ldr	r0, [pc, #48]	@ (8000654 <BL_UART_Fetch_Host_Command+0xe4>)
 8000624:	f000 f842 	bl	80006ac <Bootloader_Jump_To_Address>
					Status = BL_OK;
 8000628:	2301      	movs	r3, #1
 800062a:	71fb      	strb	r3, [r7, #7]
					break;
 800062c:	e00b      	b.n	8000646 <BL_UART_Fetch_Host_Command+0xd6>
				case CBL_FLASH_ERASE_CMD:
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
					BL_Print_Message("CBL_FLASH_ERASE_CMD \r\n");
#endif
					Bootloader_Erase_Flash(BL_Host_Buffer);
 800062e:	4809      	ldr	r0, [pc, #36]	@ (8000654 <BL_UART_Fetch_Host_Command+0xe4>)
 8000630:	f000 f8f3 	bl	800081a <Bootloader_Erase_Flash>
					Status = BL_OK;
 8000634:	2301      	movs	r3, #1
 8000636:	71fb      	strb	r3, [r7, #7]
					break;
 8000638:	e005      	b.n	8000646 <BL_UART_Fetch_Host_Command+0xd6>
				case CBL_MEM_WRITE_CMD:
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
					BL_Print_Message("CBL_MEM_WRITE_CMD \r\n");
#endif
					Bootloader_Memory_Write(BL_Host_Buffer);
 800063a:	4806      	ldr	r0, [pc, #24]	@ (8000654 <BL_UART_Fetch_Host_Command+0xe4>)
 800063c:	f000 f95a 	bl	80008f4 <Bootloader_Memory_Write>
					Status = BL_OK;
 8000640:	2301      	movs	r3, #1
 8000642:	71fb      	strb	r3, [r7, #7]
					break;
 8000644:	bf00      	nop
#endif
			}
		}
	}

	return Status;
 8000646:	79fb      	ldrb	r3, [r7, #7]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000114 	.word	0x20000114
 8000654:	20000078 	.word	0x20000078
 8000658:	200000bf 	.word	0x200000bf
 800065c:	20000079 	.word	0x20000079

08000660 <BL_Print_Message>:

void BL_Print_Message(char *format, ...){
 8000660:	b40f      	push	{r0, r1, r2, r3}
 8000662:	b580      	push	{r7, lr}
 8000664:	b09a      	sub	sp, #104	@ 0x68
 8000666:	af00      	add	r7, sp, #0
	char Messsage[100] = {0};
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2260      	movs	r2, #96	@ 0x60
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fd9f 	bl	80031b8 <memset>
	/* holds the information needed by va_start, va_arg, va_end */
	va_list args;
	/* Enables access to the variable arguments */
	va_start(args, format);
 800067a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800067e:	603b      	str	r3, [r7, #0]
	/* Write formatted data from variable argument list to string */
	vsprintf(Messsage, format, args);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fd8c 	bl	80031a4 <vsiprintf>
#if (BL_DEBUG_METHOD == BL_ENABLE_UART_DEBUG_MESSAGE)
	/* Trasmit the formatted data through the defined UART */
	HAL_UART_Transmit(BL_DEBUG_UART, (uint8_t *)Messsage, sizeof(Messsage), HAL_MAX_DELAY);
 800068c:	1d39      	adds	r1, r7, #4
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	2264      	movs	r2, #100	@ 0x64
 8000694:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <BL_Print_Message+0x48>)
 8000696:	f002 f91d 	bl	80028d4 <HAL_UART_Transmit>
#elif (BL_DEBUG_METHOD == BL_ENABLE_CAN_DEBUG_MESSAGE)
	/* Trasmit the formatted data through the defined CAN */
#endif
	/* Performs cleanup for an ap object initialized by a call to va_start */
	va_end(args);
}
 800069a:	bf00      	nop
 800069c:	3768      	adds	r7, #104	@ 0x68
 800069e:	46bd      	mov	sp, r7
 80006a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006a4:	b004      	add	sp, #16
 80006a6:	4770      	bx	lr
 80006a8:	200000cc 	.word	0x200000cc

080006ac <Bootloader_Jump_To_Address>:

/* ----------------- Static Functions Definitions -----------------*/

static void Bootloader_Jump_To_Address(uint8_t *Host_Buffer) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    uint32_t HOST_Jump_Address = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t APP_MSP_Value = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
    uint32_t APP_Reset_Hndler_Addr = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]

    uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80006c0:	2300      	movs	r3, #0
 80006c2:	76fb      	strb	r3, [r7, #27]

    HOST_Jump_Address = *((uint32_t *)(&Host_Buffer[2]));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24

    Address_Verification = Host_Address_Verification(HOST_Jump_Address);
 80006cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80006ce:	f000 f963 	bl	8000998 <Host_Address_Verification>
 80006d2:	4603      	mov	r3, r0
 80006d4:	76fb      	strb	r3, [r7, #27]

    if (ADDRESS_IS_VALID == Address_Verification) {
 80006d6:	7efb      	ldrb	r3, [r7, #27]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d12b      	bne.n	8000734 <Bootloader_Jump_To_Address+0x88>
        Bootloader_Send_ACK(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f941 	bl	8000964 <Bootloader_Send_ACK>

        // Extract stack pointer and reset handler from the vector table
        uint32_t APP_MSP_Value = *((uint32_t*)HOST_Jump_Address);         // MSP
 80006e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	617b      	str	r3, [r7, #20]
        uint32_t APP_Reset_Hndler_Addr = *((uint32_t*)(HOST_Jump_Address + 4)) | 1;     // Reset Handler with Thumb bit set
 80006e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ea:	3304      	adds	r3, #4
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	f383 8808 	msr	MSP, r3
}
 80006fe:	bf00      	nop

        __set_MSP(APP_MSP_Value);  // Set MSP

        HAL_UART_DeInit(&huart2);
 8000700:	480e      	ldr	r0, [pc, #56]	@ (800073c <Bootloader_Jump_To_Address+0x90>)
 8000702:	f002 f8b5 	bl	8002870 <HAL_UART_DeInit>
        HAL_UART_DeInit(&huart1);
 8000706:	480e      	ldr	r0, [pc, #56]	@ (8000740 <Bootloader_Jump_To_Address+0x94>)
 8000708:	f002 f8b2 	bl	8002870 <HAL_UART_DeInit>
        HAL_RCC_DeInit();                //very important and should delete weak function
 800070c:	f001 ff92 	bl	8002634 <HAL_RCC_DeInit>
        HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 8000710:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000714:	480b      	ldr	r0, [pc, #44]	@ (8000744 <Bootloader_Jump_To_Address+0x98>)
 8000716:	f001 fa37 	bl	8001b88 <HAL_GPIO_DeInit>

        SysTick->CTRL = 0;
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <Bootloader_Jump_To_Address+0x9c>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
        SysTick->LOAD = 0;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <Bootloader_Jump_To_Address+0x9c>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
        SysTick->VAL  = 0;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <Bootloader_Jump_To_Address+0x9c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]

        // Jump to application
        void (*AppResetHandler)(void) = (void (*)(void)) APP_Reset_Hndler_Addr;
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	60fb      	str	r3, [r7, #12]
        AppResetHandler();
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4798      	blx	r3
    }
}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	@ 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000114 	.word	0x20000114
 8000740:	200000cc 	.word	0x200000cc
 8000744:	40020800 	.word	0x40020800
 8000748:	e000e010 	.word	0xe000e010

0800074c <Perform_Flash_Erase>:




static uint8_t Perform_Flash_Erase(uint8_t Sector_Numebr, uint8_t Number_Of_Sectors){
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	@ 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
	uint8_t Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 800075c:	2300      	movs	r3, #0
 800075e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	FLASH_EraseInitTypeDef pEraseInit;
	uint8_t Remaining_Sectors = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint32_t SectorError = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800076c:	2301      	movs	r3, #1
 800076e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	if(Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER){
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	2b0c      	cmp	r3, #12
 8000776:	d903      	bls.n	8000780 <Perform_Flash_Erase+0x34>
		/* Number Of sectors is out of range */
		Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000778:	2300      	movs	r3, #0
 800077a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800077e:	e046      	b.n	800080e <Perform_Flash_Erase+0xc2>
	}
	else{
		if((Sector_Numebr <= (CBL_FLASH_MAX_SECTOR_NUMBER - 1)) || (CBL_FLASH_MASS_ERASE == Sector_Numebr)){
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b0b      	cmp	r3, #11
 8000784:	d902      	bls.n	800078c <Perform_Flash_Erase+0x40>
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2bff      	cmp	r3, #255	@ 0xff
 800078a:	d13d      	bne.n	8000808 <Perform_Flash_Erase+0xbc>
			/* Check if user needs Mass erase */
			if(CBL_FLASH_MASS_ERASE == Sector_Numebr){
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2bff      	cmp	r3, #255	@ 0xff
 8000790:	d102      	bne.n	8000798 <Perform_Flash_Erase+0x4c>
				pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE; /* Flash Mass erase activation */
 8000792:	2301      	movs	r3, #1
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	e012      	b.n	80007be <Perform_Flash_Erase+0x72>
			else{
				/* User needs Sector erase */
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_Print_Message("User needs Sector erase \r\n");
#endif
				Remaining_Sectors = CBL_FLASH_MAX_SECTOR_NUMBER - Sector_Numebr;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f1c3 030c 	rsb	r3, r3, #12
 800079e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				if(Number_Of_Sectors > Remaining_Sectors){
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d902      	bls.n	80007b2 <Perform_Flash_Erase+0x66>
					Number_Of_Sectors = Remaining_Sectors;
 80007ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80007b0:	71bb      	strb	r3, [r7, #6]
				}
				else { /* Nothing */ }

				pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS; /* Sectors erase only */
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
				pEraseInit.Sector = Sector_Numebr;        /* Initial FLASH sector to erase when Mass erase is disabled */
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	61bb      	str	r3, [r7, #24]
				pEraseInit.NbSectors = Number_Of_Sectors; /* Number of sectors to be erased. */
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	61fb      	str	r3, [r7, #28]
			}

			pEraseInit.Banks = FLASH_BANK_1; /* Bank 1  */
 80007be:	2301      	movs	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
			pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3; /* Device operating range: 2.7V to 3.6V */
 80007c2:	2302      	movs	r3, #2
 80007c4:	623b      	str	r3, [r7, #32]

			/* Unlock the FLASH control register access */
            HAL_Status = HAL_FLASH_Unlock();
 80007c6:	f000 fdc7 	bl	8001358 <HAL_FLASH_Unlock>
 80007ca:	4603      	mov	r3, r0
 80007cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80007d0:	f107 020c 	add.w	r2, r7, #12
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 ff2e 	bl	800163c <HAL_FLASHEx_Erase>
 80007e0:	4603      	mov	r3, r0
 80007e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			if(HAL_SUCCESSFUL_ERASE == SectorError){
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ec:	d103      	bne.n	80007f6 <Perform_Flash_Erase+0xaa>
				Sector_Validity_Status = SUCCESSFUL_ERASE;
 80007ee:	2303      	movs	r3, #3
 80007f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80007f4:	e002      	b.n	80007fc <Perform_Flash_Erase+0xb0>
			}
			else{
				Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 80007f6:	2302      	movs	r3, #2
 80007f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			/* Locks the FLASH control register access */
      HAL_Status = HAL_FLASH_Lock();
 80007fc:	f000 fdce 	bl	800139c <HAL_FLASH_Lock>
 8000800:	4603      	mov	r3, r0
 8000802:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8000806:	e002      	b.n	800080e <Perform_Flash_Erase+0xc2>
		}
		else{
			Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000808:	2302      	movs	r3, #2
 800080a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}
	return Sector_Validity_Status;
 800080e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000812:	4618      	mov	r0, r3
 8000814:	3728      	adds	r7, #40	@ 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <Bootloader_Erase_Flash>:

static void Bootloader_Erase_Flash(uint8_t *Host_Buffer){
 800081a:	b580      	push	{r7, lr}
 800081c:	b084      	sub	sp, #16
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
	uint8_t Erase_Status = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]
#endif
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		/* Send acknowledgement to the HOST */
		Bootloader_Send_ACK(1);
 8000826:	2001      	movs	r0, #1
 8000828:	f000 f89c 	bl	8000964 <Bootloader_Send_ACK>
		/* Perform Mass erase or sector erase of the user flash */
		Erase_Status = Perform_Flash_Erase(Host_Buffer[2], Host_Buffer[3]);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3302      	adds	r3, #2
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3303      	adds	r3, #3
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	4610      	mov	r0, r2
 800083c:	f7ff ff86 	bl	800074c <Perform_Flash_Erase>
 8000840:	4603      	mov	r3, r0
 8000842:	73fb      	strb	r3, [r7, #15]
		else{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Erase request failed !!\r\n");
#endif
		}
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <Flash_Memory_Write_Payload>:


static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len){
 800084c:	b5b0      	push	{r4, r5, r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	4613      	mov	r3, r2
 8000858:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	75fb      	strb	r3, [r7, #23]
    uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 800085e:	2300      	movs	r3, #0
 8000860:	75bb      	strb	r3, [r7, #22]
    uint16_t Payload_Counter = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	82bb      	strh	r3, [r7, #20]

    /* Unlock the FLASH control register access */
    HAL_Status = HAL_FLASH_Unlock();
 8000866:	f000 fd77 	bl	8001358 <HAL_FLASH_Unlock>
 800086a:	4603      	mov	r3, r0
 800086c:	75fb      	strb	r3, [r7, #23]

    if(HAL_Status != HAL_OK){
 800086e:	7dfb      	ldrb	r3, [r7, #23]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <Flash_Memory_Write_Payload+0x2e>
        Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000874:	2300      	movs	r3, #0
 8000876:	75bb      	strb	r3, [r7, #22]
 8000878:	e022      	b.n	80008c0 <Flash_Memory_Write_Payload+0x74>
    }
    else{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
        BL_Print_Message("FLASH_PAYLOAD_WRITE_PASS \r\n");
#endif
        for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter += 4){  // Step by 4 to write 32-bit words
 800087a:	2300      	movs	r3, #0
 800087c:	82bb      	strh	r3, [r7, #20]
 800087e:	e01b      	b.n	80008b8 <Flash_Memory_Write_Payload+0x6c>

       	            HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8000880:	8aba      	ldrh	r2, [r7, #20]
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	18d1      	adds	r1, r2, r3
       	                                                       Payload_Start_Address + Payload_Counter,
															   *((uint32_t *)(Host_Payload + Payload_Counter)));
 8000886:	8abb      	ldrh	r3, [r7, #20]
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	681b      	ldr	r3, [r3, #0]
       	            HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 800088e:	2200      	movs	r2, #0
 8000890:	461c      	mov	r4, r3
 8000892:	4615      	mov	r5, r2
 8000894:	4622      	mov	r2, r4
 8000896:	462b      	mov	r3, r5
 8000898:	2002      	movs	r0, #2
 800089a:	f000 fd09 	bl	80012b0 <HAL_FLASH_Program>
 800089e:	4603      	mov	r3, r0
 80008a0:	75fb      	strb	r3, [r7, #23]

            if(HAL_Status != HAL_OK){
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d002      	beq.n	80008ae <Flash_Memory_Write_Payload+0x62>
                Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80008a8:	2300      	movs	r3, #0
 80008aa:	75bb      	strb	r3, [r7, #22]
                break;
 80008ac:	e008      	b.n	80008c0 <Flash_Memory_Write_Payload+0x74>
            }
            else{
                Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 80008ae:	2301      	movs	r3, #1
 80008b0:	75bb      	strb	r3, [r7, #22]
        for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter += 4){  // Step by 4 to write 32-bit words
 80008b2:	8abb      	ldrh	r3, [r7, #20]
 80008b4:	3304      	adds	r3, #4
 80008b6:	82bb      	strh	r3, [r7, #20]
 80008b8:	8aba      	ldrh	r2, [r7, #20]
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d3df      	bcc.n	8000880 <Flash_Memory_Write_Payload+0x34>
            }
        }
    }

    if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 80008c0:	7dbb      	ldrb	r3, [r7, #22]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d10f      	bne.n	80008e6 <Flash_Memory_Write_Payload+0x9a>
 80008c6:	7dfb      	ldrb	r3, [r7, #23]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d10c      	bne.n	80008e6 <Flash_Memory_Write_Payload+0x9a>
        /* Locks the FLASH control register access */
        HAL_Status = HAL_FLASH_Lock();
 80008cc:	f000 fd66 	bl	800139c <HAL_FLASH_Lock>
 80008d0:	4603      	mov	r3, r0
 80008d2:	75fb      	strb	r3, [r7, #23]
        if(HAL_Status != HAL_OK){
 80008d4:	7dfb      	ldrb	r3, [r7, #23]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d002      	beq.n	80008e0 <Flash_Memory_Write_Payload+0x94>
            Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80008da:	2300      	movs	r3, #0
 80008dc:	75bb      	strb	r3, [r7, #22]
        if(HAL_Status != HAL_OK){
 80008de:	e004      	b.n	80008ea <Flash_Memory_Write_Payload+0x9e>
        }
        else{
            Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 80008e0:	2301      	movs	r3, #1
 80008e2:	75bb      	strb	r3, [r7, #22]
        if(HAL_Status != HAL_OK){
 80008e4:	e001      	b.n	80008ea <Flash_Memory_Write_Payload+0x9e>
        }
    }
    else{
        Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80008e6:	2300      	movs	r3, #0
 80008e8:	75bb      	strb	r3, [r7, #22]
    }

    return Flash_Payload_Write_Status;
 80008ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bdb0      	pop	{r4, r5, r7, pc}

080008f4 <Bootloader_Memory_Write>:


static void Bootloader_Memory_Write(uint8_t *Host_Buffer){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	82fb      	strh	r3, [r7, #22]
	uint32_t HOST_Address = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
	uint8_t Payload_Len = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	73fb      	strb	r3, [r7, #15]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000908:	2300      	movs	r3, #0
 800090a:	73bb      	strb	r3, [r7, #14]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 800090c:	2300      	movs	r3, #0
 800090e:	737b      	strb	r3, [r7, #13]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Write data into different memories of the MCU \r\n");
#endif
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	82fb      	strh	r3, [r7, #22]
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		/* Send acknowledgement to the HOST */

		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800091e:	613b      	str	r3, [r7, #16]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("HOST_Address = 0x%X \r\n", HOST_Address);
#endif
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[6];
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	799b      	ldrb	r3, [r3, #6]
 8000924:	73fb      	strb	r3, [r7, #15]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 8000926:	6938      	ldr	r0, [r7, #16]
 8000928:	f000 f836 	bl	8000998 <Host_Address_Verification>
 800092c:	4603      	mov	r3, r0
 800092e:	73bb      	strb	r3, [r7, #14]
		if(ADDRESS_IS_VALID == Address_Verification){
 8000930:	7bbb      	ldrb	r3, [r7, #14]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d110      	bne.n	8000958 <Bootloader_Memory_Write+0x64>
			/* Write the payload to the Flash memory */
			Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3307      	adds	r3, #7
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	b292      	uxth	r2, r2
 800093e:	6939      	ldr	r1, [r7, #16]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff83 	bl	800084c <Flash_Memory_Write_Payload>
 8000946:	4603      	mov	r3, r0
 8000948:	737b      	strb	r3, [r7, #13]
			if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status){
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d105      	bne.n	800095c <Bootloader_Memory_Write+0x68>
				/* Report payload write passed */
				Bootloader_Send_ACK(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f000 f807 	bl	8000964 <Bootloader_Send_ACK>
		else{
			/* Report address verification failed */
			Address_Verification = ADDRESS_IS_INVALID;
		}

}
 8000956:	e001      	b.n	800095c <Bootloader_Memory_Write+0x68>
			Address_Verification = ADDRESS_IS_INVALID;
 8000958:	2300      	movs	r3, #0
 800095a:	73bb      	strb	r3, [r7, #14]
}
 800095c:	bf00      	nop
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <Bootloader_Send_ACK>:
	}

	return CRC_Status;
}

static void Bootloader_Send_ACK(uint8_t Replay_Len){
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	uint8_t Ack_Value[2] = {0};
 800096e:	2300      	movs	r3, #0
 8000970:	81bb      	strh	r3, [r7, #12]
	Ack_Value[0] = CBL_SEND_ACK;
 8000972:	23cd      	movs	r3, #205	@ 0xcd
 8000974:	733b      	strb	r3, [r7, #12]
	Ack_Value[1] = Replay_Len;
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, (uint8_t *)Ack_Value, 2, HAL_MAX_DELAY);
 800097a:	f107 010c 	add.w	r1, r7, #12
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	2202      	movs	r2, #2
 8000984:	4803      	ldr	r0, [pc, #12]	@ (8000994 <Bootloader_Send_ACK+0x30>)
 8000986:	f001 ffa5 	bl	80028d4 <HAL_UART_Transmit>
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000114 	.word	0x20000114

08000998 <Host_Address_Verification>:
	uint8_t Ack_Value = CBL_SEND_NACK;
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, &Ack_Value, 1, HAL_MAX_DELAY);
}


static uint8_t Host_Address_Verification(uint32_t Jump_Address){
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= SRAM1_BASE) && (Jump_Address <= STM32F407_SRAM1_END)){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80009aa:	d306      	bcc.n	80009ba <Host_Address_Verification+0x22>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <Host_Address_Verification+0x4c>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d802      	bhi.n	80009ba <Host_Address_Verification+0x22>
		Address_Verification = ADDRESS_IS_VALID;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e00c      	b.n	80009d4 <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F407_FLASH_END)){
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80009c0:	d306      	bcc.n	80009d0 <Host_Address_Verification+0x38>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80009c8:	d802      	bhi.n	80009d0 <Host_Address_Verification+0x38>
		Address_Verification = ADDRESS_IS_VALID;
 80009ca:	2301      	movs	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e001      	b.n	80009d4 <Host_Address_Verification+0x3c>
	}
	else{
		Address_Verification = ADDRESS_IS_INVALID;
 80009d0:	2300      	movs	r3, #0
 80009d2:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20010000 	.word	0x20010000

080009e8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_CRC_Init+0x20>)
 80009ee:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <MX_CRC_Init+0x24>)
 80009f0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_CRC_Init+0x20>)
 80009f4:	f000 fc3f 	bl	8001276 <HAL_CRC_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009fe:	f000 f913 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000c0 	.word	0x200000c0
 8000a0c:	40023000 	.word	0x40023000

08000a10 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a4c <HAL_CRC_MspInit+0x3c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d10d      	bne.n	8000a3e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <HAL_CRC_MspInit+0x40>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a09      	ldr	r2, [pc, #36]	@ (8000a50 <HAL_CRC_MspInit+0x40>)
 8000a2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <HAL_CRC_MspInit+0x40>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023000 	.word	0x40023000
 8000a50:	40023800 	.word	0x40023800

08000a54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	4b28      	ldr	r3, [pc, #160]	@ (8000b10 <MX_GPIO_Init+0xbc>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a27      	ldr	r2, [pc, #156]	@ (8000b10 <MX_GPIO_Init+0xbc>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b25      	ldr	r3, [pc, #148]	@ (8000b10 <MX_GPIO_Init+0xbc>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <MX_GPIO_Init+0xbc>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a20      	ldr	r2, [pc, #128]	@ (8000b10 <MX_GPIO_Init+0xbc>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b1e      	ldr	r3, [pc, #120]	@ (8000b10 <MX_GPIO_Init+0xbc>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <MX_GPIO_Init+0xbc>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a19      	ldr	r2, [pc, #100]	@ (8000b10 <MX_GPIO_Init+0xbc>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <MX_GPIO_Init+0xbc>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000ac4:	4813      	ldr	r0, [pc, #76]	@ (8000b14 <MX_GPIO_Init+0xc0>)
 8000ac6:	f001 f943 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <MX_GPIO_Init+0xc0>)
 8000ae4:	f000 fecc 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ae8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000af2:	2302      	movs	r3, #2
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4619      	mov	r1, r3
 8000b00:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <MX_GPIO_Init+0xc0>)
 8000b02:	f000 febd 	bl	8001880 <HAL_GPIO_Init>

}
 8000b06:	bf00      	nop
 8000b08:	3720      	adds	r7, #32
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020800 	.word	0x40020800

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1c:	f000 fa54 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b20:	f000 f818 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b24:	f7ff ff96 	bl	8000a54 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b28:	f000 f924 	bl	8000d74 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b2c:	f000 f94c 	bl	8000dc8 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000b30:	f7ff ff5a 	bl	80009e8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b3a:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <main+0x34>)
 8000b3c:	f001 f908 	bl	8001d50 <HAL_GPIO_WritePin>
  BL_Print_Message("hello boodloader");
 8000b40:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <main+0x38>)
 8000b42:	f7ff fd8d 	bl	8000660 <BL_Print_Message>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BL_UART_Fetch_Host_Command();
 8000b46:	f7ff fd13 	bl	8000570 <BL_UART_Fetch_Host_Command>
 8000b4a:	e7fc      	b.n	8000b46 <main+0x2e>
 8000b4c:	40020800 	.word	0x40020800
 8000b50:	08003ad0 	.word	0x08003ad0

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	2230      	movs	r2, #48	@ 0x30
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fb28 	bl	80031b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b28      	ldr	r3, [pc, #160]	@ (8000c20 <SystemClock_Config+0xcc>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a27      	ldr	r2, [pc, #156]	@ (8000c20 <SystemClock_Config+0xcc>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b88:	4b25      	ldr	r3, [pc, #148]	@ (8000c20 <SystemClock_Config+0xcc>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ba0:	4a20      	ldr	r2, [pc, #128]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <SystemClock_Config+0xd0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bc8:	2319      	movs	r3, #25
 8000bca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bcc:	23a8      	movs	r3, #168	@ 0xa8
 8000bce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd8:	f107 0320 	add.w	r3, r7, #32
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 f8d1 	bl	8001d84 <HAL_RCC_OscConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000be8:	f000 f81e 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bec:	230f      	movs	r3, #15
 8000bee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2102      	movs	r1, #2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fb33 	bl	8002274 <HAL_RCC_ClockConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c14:	f000 f808 	bl	8000c28 <Error_Handler>
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3750      	adds	r7, #80	@ 0x50
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40007000 	.word	0x40007000

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <Error_Handler+0x8>

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	4a0f      	ldr	r2, [pc, #60]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	4a08      	ldr	r2, [pc, #32]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <NMI_Handler+0x4>

08000c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cda:	f000 f9c7 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cec:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <_sbrk+0x5c>)
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <_sbrk+0x60>)
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf8:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <_sbrk+0x64>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <_sbrk+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d207      	bcs.n	8000d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d14:	f002 fa58 	bl	80031c8 <__errno>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	e009      	b.n	8000d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <_sbrk+0x64>)
 8000d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20010000 	.word	0x20010000
 8000d44:	00000400 	.word	0x00000400
 8000d48:	200000c8 	.word	0x200000c8
 8000d4c:	200002c8 	.word	0x200002c8

08000d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	@ (8000dc4 <MX_USART1_UART_Init+0x50>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d80:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000dac:	f001 fd10 	bl	80027d0 <HAL_UART_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000db6:	f7ff ff37 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200000cc 	.word	0x200000cc
 8000dc4:	40011000 	.word	0x40011000

08000dc8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <MX_USART2_UART_Init+0x50>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000e00:	f001 fce6 	bl	80027d0 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e0a:	f7ff ff0d 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000114 	.word	0x20000114
 8000e18:	40004400 	.word	0x40004400

08000e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	@ 0x30
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a32      	ldr	r2, [pc, #200]	@ (8000f04 <HAL_UART_MspInit+0xe8>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d12d      	bne.n	8000e9a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	4b31      	ldr	r3, [pc, #196]	@ (8000f08 <HAL_UART_MspInit+0xec>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	4a30      	ldr	r2, [pc, #192]	@ (8000f08 <HAL_UART_MspInit+0xec>)
 8000e48:	f043 0310 	orr.w	r3, r3, #16
 8000e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f08 <HAL_UART_MspInit+0xec>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	61bb      	str	r3, [r7, #24]
 8000e58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <HAL_UART_MspInit+0xec>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a29      	ldr	r2, [pc, #164]	@ (8000f08 <HAL_UART_MspInit+0xec>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b27      	ldr	r3, [pc, #156]	@ (8000f08 <HAL_UART_MspInit+0xec>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	481e      	ldr	r0, [pc, #120]	@ (8000f0c <HAL_UART_MspInit+0xf0>)
 8000e94:	f000 fcf4 	bl	8001880 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e98:	e030      	b.n	8000efc <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f10 <HAL_UART_MspInit+0xf4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d12b      	bne.n	8000efc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <HAL_UART_MspInit+0xec>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eac:	4a16      	ldr	r2, [pc, #88]	@ (8000f08 <HAL_UART_MspInit+0xec>)
 8000eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb4:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <HAL_UART_MspInit+0xec>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <HAL_UART_MspInit+0xec>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f08 <HAL_UART_MspInit+0xec>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <HAL_UART_MspInit+0xec>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000edc:	230c      	movs	r3, #12
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eec:	2307      	movs	r3, #7
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <HAL_UART_MspInit+0xf0>)
 8000ef8:	f000 fcc2 	bl	8001880 <HAL_GPIO_Init>
}
 8000efc:	bf00      	nop
 8000efe:	3730      	adds	r7, #48	@ 0x30
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40011000 	.word	0x40011000
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40004400 	.word	0x40004400

08000f14 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <HAL_UART_MspDeInit+0x50>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10b      	bne.n	8000f3e <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <HAL_UART_MspDeInit+0x54>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f68 <HAL_UART_MspDeInit+0x54>)
 8000f2c:	f023 0310 	bic.w	r3, r3, #16
 8000f30:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000f32:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000f36:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <HAL_UART_MspDeInit+0x58>)
 8000f38:	f000 fe26 	bl	8001b88 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8000f3c:	e00e      	b.n	8000f5c <HAL_UART_MspDeInit+0x48>
  else if(uartHandle->Instance==USART2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a0b      	ldr	r2, [pc, #44]	@ (8000f70 <HAL_UART_MspDeInit+0x5c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d109      	bne.n	8000f5c <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000f48:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <HAL_UART_MspDeInit+0x54>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4c:	4a06      	ldr	r2, [pc, #24]	@ (8000f68 <HAL_UART_MspDeInit+0x54>)
 8000f4e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000f52:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8000f54:	210c      	movs	r1, #12
 8000f56:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <HAL_UART_MspDeInit+0x58>)
 8000f58:	f000 fe16 	bl	8001b88 <HAL_GPIO_DeInit>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40011000 	.word	0x40011000
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40004400 	.word	0x40004400

08000f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f78:	f7ff feea 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f7c:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f7e:	490d      	ldr	r1, [pc, #52]	@ (8000fb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f80:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f94:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f002 f917 	bl	80031d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa6:	f7ff fdb7 	bl	8000b18 <main>
  bx  lr    
 8000faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fb8:	08003b40 	.word	0x08003b40
  ldr r2, =_sbss
 8000fbc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fc0:	200002c8 	.word	0x200002c8

08000fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC_IRQHandler>
	...

08000fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001008 <HAL_Init+0x40>)
 8000fd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <HAL_Init+0x40>)
 8000fde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	@ (8001008 <HAL_Init+0x40>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f90d 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f000 f808 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffc:	f7ff fe1a 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023c00 	.word	0x40023c00

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_InitTick+0x54>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <HAL_InitTick+0x58>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f917 	bl	800125e <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 f8ed 	bl	8001226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	@ (8001068 <HAL_InitTick+0x5c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000000 	.word	0x20000000
 8001064:	20000008 	.word	0x20000008
 8001068:	20000004 	.word	0x20000004

0800106c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008
 8001090:	2000015c 	.word	0x2000015c

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	2000015c 	.word	0x2000015c

080010ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010bc:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010de:	4a04      	ldr	r2, [pc, #16]	@ (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <__NVIC_GetPriorityGrouping+0x18>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 0307 	and.w	r3, r3, #7
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	@ (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	@ (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	@ 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	@ 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff ff8e 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	@ (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff47 	bl	80010ac <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff5c 	bl	80010f4 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff8e 	bl	8001164 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5d 	bl	8001110 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffb0 	bl	80011cc <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e00e      	b.n	80012a6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	795b      	ldrb	r3, [r3, #5]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d105      	bne.n	800129e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fbb9 	bl	8000a10 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012c2:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <HAL_FLASH_Program+0xa0>)
 80012c4:	7e1b      	ldrb	r3, [r3, #24]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_FLASH_Program+0x1e>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e03b      	b.n	8001346 <HAL_FLASH_Program+0x96>
 80012ce:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <HAL_FLASH_Program+0xa0>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80012d8:	f000 f870 	bl	80013bc <FLASH_WaitForLastOperation>
 80012dc:	4603      	mov	r3, r0
 80012de:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d12b      	bne.n	800133e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d105      	bne.n	80012f8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80012ec:	783b      	ldrb	r3, [r7, #0]
 80012ee:	4619      	mov	r1, r3
 80012f0:	68b8      	ldr	r0, [r7, #8]
 80012f2:	f000 f91b 	bl	800152c <FLASH_Program_Byte>
 80012f6:	e016      	b.n	8001326 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d105      	bne.n	800130a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80012fe:	883b      	ldrh	r3, [r7, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	68b8      	ldr	r0, [r7, #8]
 8001304:	f000 f8ee 	bl	80014e4 <FLASH_Program_HalfWord>
 8001308:	e00d      	b.n	8001326 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d105      	bne.n	800131c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	4619      	mov	r1, r3
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f000 f8c3 	bl	80014a0 <FLASH_Program_Word>
 800131a:	e004      	b.n	8001326 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800131c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f000 f88b 	bl	800143c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001326:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800132a:	f000 f847 	bl	80013bc <FLASH_WaitForLastOperation>
 800132e:	4603      	mov	r3, r0
 8001330:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <HAL_FLASH_Program+0xa4>)
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	4a07      	ldr	r2, [pc, #28]	@ (8001354 <HAL_FLASH_Program+0xa4>)
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800133e:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <HAL_FLASH_Program+0xa0>)
 8001340:	2200      	movs	r2, #0
 8001342:	761a      	strb	r2, [r3, #24]

  return status;
 8001344:	7dfb      	ldrb	r3, [r7, #23]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000160 	.word	0x20000160
 8001354:	40023c00 	.word	0x40023c00

08001358 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <HAL_FLASH_Unlock+0x38>)
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	2b00      	cmp	r3, #0
 8001368:	da0b      	bge.n	8001382 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_FLASH_Unlock+0x38>)
 800136c:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <HAL_FLASH_Unlock+0x3c>)
 800136e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001370:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <HAL_FLASH_Unlock+0x38>)
 8001372:	4a09      	ldr	r2, [pc, #36]	@ (8001398 <HAL_FLASH_Unlock+0x40>)
 8001374:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_FLASH_Unlock+0x38>)
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	2b00      	cmp	r3, #0
 800137c:	da01      	bge.n	8001382 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001382:	79fb      	ldrb	r3, [r7, #7]
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	40023c00 	.word	0x40023c00
 8001394:	45670123 	.word	0x45670123
 8001398:	cdef89ab 	.word	0xcdef89ab

0800139c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <HAL_FLASH_Lock+0x1c>)
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <HAL_FLASH_Lock+0x1c>)
 80013a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80013aa:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40023c00 	.word	0x40023c00

080013bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <FLASH_WaitForLastOperation+0x78>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80013ce:	f7ff fe61 	bl	8001094 <HAL_GetTick>
 80013d2:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80013d4:	e010      	b.n	80013f8 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d00c      	beq.n	80013f8 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <FLASH_WaitForLastOperation+0x38>
 80013e4:	f7ff fe56 	bl	8001094 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d201      	bcs.n	80013f8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e019      	b.n	800142c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <FLASH_WaitForLastOperation+0x7c>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1e8      	bne.n	80013d6 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <FLASH_WaitForLastOperation+0x7c>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <FLASH_WaitForLastOperation+0x7c>)
 8001412:	2201      	movs	r2, #1
 8001414:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <FLASH_WaitForLastOperation+0x7c>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001422:	f000 f8a5 	bl	8001570 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0

}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000160 	.word	0x20000160
 8001438:	40023c00 	.word	0x40023c00

0800143c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001448:	4b14      	ldr	r3, [pc, #80]	@ (800149c <FLASH_Program_DoubleWord+0x60>)
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	4a13      	ldr	r2, [pc, #76]	@ (800149c <FLASH_Program_DoubleWord+0x60>)
 800144e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001452:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <FLASH_Program_DoubleWord+0x60>)
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	4a10      	ldr	r2, [pc, #64]	@ (800149c <FLASH_Program_DoubleWord+0x60>)
 800145a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800145e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001460:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <FLASH_Program_DoubleWord+0x60>)
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	4a0d      	ldr	r2, [pc, #52]	@ (800149c <FLASH_Program_DoubleWord+0x60>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001472:	f3bf 8f6f 	isb	sy
}
 8001476:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	000a      	movs	r2, r1
 8001486:	2300      	movs	r3, #0
 8001488:	68f9      	ldr	r1, [r7, #12]
 800148a:	3104      	adds	r1, #4
 800148c:	4613      	mov	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	40023c00 	.word	0x40023c00

080014a0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014aa:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <FLASH_Program_Word+0x40>)
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	4a0c      	ldr	r2, [pc, #48]	@ (80014e0 <FLASH_Program_Word+0x40>)
 80014b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <FLASH_Program_Word+0x40>)
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	4a09      	ldr	r2, [pc, #36]	@ (80014e0 <FLASH_Program_Word+0x40>)
 80014bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014c2:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <FLASH_Program_Word+0x40>)
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	4a06      	ldr	r2, [pc, #24]	@ (80014e0 <FLASH_Program_Word+0x40>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	601a      	str	r2, [r3, #0]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <FLASH_Program_HalfWord+0x44>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001528 <FLASH_Program_HalfWord+0x44>)
 80014f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <FLASH_Program_HalfWord+0x44>)
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	4a09      	ldr	r2, [pc, #36]	@ (8001528 <FLASH_Program_HalfWord+0x44>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001506:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001508:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <FLASH_Program_HalfWord+0x44>)
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	4a06      	ldr	r2, [pc, #24]	@ (8001528 <FLASH_Program_HalfWord+0x44>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	801a      	strh	r2, [r3, #0]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023c00 	.word	0x40023c00

0800152c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <FLASH_Program_Byte+0x40>)
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	4a0b      	ldr	r2, [pc, #44]	@ (800156c <FLASH_Program_Byte+0x40>)
 800153e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001542:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <FLASH_Program_Byte+0x40>)
 8001546:	4a09      	ldr	r2, [pc, #36]	@ (800156c <FLASH_Program_Byte+0x40>)
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <FLASH_Program_Byte+0x40>)
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	4a06      	ldr	r2, [pc, #24]	@ (800156c <FLASH_Program_Byte+0x40>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	78fa      	ldrb	r2, [r7, #3]
 800155c:	701a      	strb	r2, [r3, #0]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40023c00 	.word	0x40023c00

08001570 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001574:	4b2f      	ldr	r3, [pc, #188]	@ (8001634 <FLASH_SetErrorCode+0xc4>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 0310 	and.w	r3, r3, #16
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001580:	4b2d      	ldr	r3, [pc, #180]	@ (8001638 <FLASH_SetErrorCode+0xc8>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	f043 0310 	orr.w	r3, r3, #16
 8001588:	4a2b      	ldr	r2, [pc, #172]	@ (8001638 <FLASH_SetErrorCode+0xc8>)
 800158a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800158c:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <FLASH_SetErrorCode+0xc4>)
 800158e:	2210      	movs	r2, #16
 8001590:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001592:	4b28      	ldr	r3, [pc, #160]	@ (8001634 <FLASH_SetErrorCode+0xc4>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	f003 0320 	and.w	r3, r3, #32
 800159a:	2b00      	cmp	r3, #0
 800159c:	d008      	beq.n	80015b0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800159e:	4b26      	ldr	r3, [pc, #152]	@ (8001638 <FLASH_SetErrorCode+0xc8>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	4a24      	ldr	r2, [pc, #144]	@ (8001638 <FLASH_SetErrorCode+0xc8>)
 80015a8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80015aa:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <FLASH_SetErrorCode+0xc4>)
 80015ac:	2220      	movs	r2, #32
 80015ae:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80015b0:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <FLASH_SetErrorCode+0xc4>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80015bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <FLASH_SetErrorCode+0xc8>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001638 <FLASH_SetErrorCode+0xc8>)
 80015c6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80015c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <FLASH_SetErrorCode+0xc4>)
 80015ca:	2240      	movs	r2, #64	@ 0x40
 80015cc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <FLASH_SetErrorCode+0xc4>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d008      	beq.n	80015ec <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80015da:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <FLASH_SetErrorCode+0xc8>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	4a15      	ldr	r2, [pc, #84]	@ (8001638 <FLASH_SetErrorCode+0xc8>)
 80015e4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80015e6:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <FLASH_SetErrorCode+0xc4>)
 80015e8:	2280      	movs	r2, #128	@ 0x80
 80015ea:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <FLASH_SetErrorCode+0xc4>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d009      	beq.n	800160c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <FLASH_SetErrorCode+0xc8>)
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <FLASH_SetErrorCode+0xc8>)
 8001602:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001604:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <FLASH_SetErrorCode+0xc4>)
 8001606:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800160a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <FLASH_SetErrorCode+0xc4>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d008      	beq.n	800162a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001618:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <FLASH_SetErrorCode+0xc8>)
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	f043 0320 	orr.w	r3, r3, #32
 8001620:	4a05      	ldr	r2, [pc, #20]	@ (8001638 <FLASH_SetErrorCode+0xc8>)
 8001622:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001624:	4b03      	ldr	r3, [pc, #12]	@ (8001634 <FLASH_SetErrorCode+0xc4>)
 8001626:	2202      	movs	r2, #2
 8001628:	60da      	str	r2, [r3, #12]
  }
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40023c00 	.word	0x40023c00
 8001638:	20000160 	.word	0x20000160

0800163c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800164e:	4b31      	ldr	r3, [pc, #196]	@ (8001714 <HAL_FLASHEx_Erase+0xd8>)
 8001650:	7e1b      	ldrb	r3, [r3, #24]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_FLASHEx_Erase+0x1e>
 8001656:	2302      	movs	r3, #2
 8001658:	e058      	b.n	800170c <HAL_FLASHEx_Erase+0xd0>
 800165a:	4b2e      	ldr	r3, [pc, #184]	@ (8001714 <HAL_FLASHEx_Erase+0xd8>)
 800165c:	2201      	movs	r2, #1
 800165e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001660:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001664:	f7ff feaa 	bl	80013bc <FLASH_WaitForLastOperation>
 8001668:	4603      	mov	r3, r0
 800166a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d148      	bne.n	8001704 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d115      	bne.n	80016ae <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4619      	mov	r1, r3
 800168e:	4610      	mov	r0, r2
 8001690:	f000 f844 	bl	800171c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001694:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001698:	f7ff fe90 	bl	80013bc <FLASH_WaitForLastOperation>
 800169c:	4603      	mov	r3, r0
 800169e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80016a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <HAL_FLASHEx_Erase+0xdc>)
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001718 <HAL_FLASHEx_Erase+0xdc>)
 80016a6:	f023 0304 	bic.w	r3, r3, #4
 80016aa:	6113      	str	r3, [r2, #16]
 80016ac:	e028      	b.n	8001700 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	e01c      	b.n	80016f0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	4619      	mov	r1, r3
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	f000 f850 	bl	8001764 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016c4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80016c8:	f7ff fe78 	bl	80013bc <FLASH_WaitForLastOperation>
 80016cc:	4603      	mov	r3, r0
 80016ce:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_FLASHEx_Erase+0xdc>)
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	4a10      	ldr	r2, [pc, #64]	@ (8001718 <HAL_FLASHEx_Erase+0xdc>)
 80016d6:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80016da:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	601a      	str	r2, [r3, #0]
          break;
 80016e8:	e00a      	b.n	8001700 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	3301      	adds	r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4413      	add	r3, r2
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d3da      	bcc.n	80016b6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001700:	f000 f878 	bl	80017f4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_FLASHEx_Erase+0xd8>)
 8001706:	2200      	movs	r2, #0
 8001708:	761a      	strb	r2, [r3, #24]

  return status;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000160 	.word	0x20000160
 8001718:	40023c00 	.word	0x40023c00

0800171c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001728:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <FLASH_MassErase+0x44>)
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	4a0c      	ldr	r2, [pc, #48]	@ (8001760 <FLASH_MassErase+0x44>)
 800172e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001732:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001734:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <FLASH_MassErase+0x44>)
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	4a09      	ldr	r2, [pc, #36]	@ (8001760 <FLASH_MassErase+0x44>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001740:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <FLASH_MassErase+0x44>)
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	4313      	orrs	r3, r2
 800174a:	4a05      	ldr	r2, [pc, #20]	@ (8001760 <FLASH_MassErase+0x44>)
 800174c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001750:	6113      	str	r3, [r2, #16]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40023c00 	.word	0x40023c00

08001764 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	e010      	b.n	80017a2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d103      	bne.n	800178e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001786:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e009      	b.n	80017a2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d103      	bne.n	800179c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001794:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e002      	b.n	80017a2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800179c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017a2:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <FLASH_Erase_Sector+0x8c>)
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	4a12      	ldr	r2, [pc, #72]	@ (80017f0 <FLASH_Erase_Sector+0x8c>)
 80017a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80017ae:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <FLASH_Erase_Sector+0x8c>)
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	490f      	ldr	r1, [pc, #60]	@ (80017f0 <FLASH_Erase_Sector+0x8c>)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80017ba:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <FLASH_Erase_Sector+0x8c>)
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	4a0c      	ldr	r2, [pc, #48]	@ (80017f0 <FLASH_Erase_Sector+0x8c>)
 80017c0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80017c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <FLASH_Erase_Sector+0x8c>)
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	4a07      	ldr	r2, [pc, #28]	@ (80017f0 <FLASH_Erase_Sector+0x8c>)
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80017d8:	4b05      	ldr	r3, [pc, #20]	@ (80017f0 <FLASH_Erase_Sector+0x8c>)
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <FLASH_Erase_Sector+0x8c>)
 80017de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e2:	6113      	str	r3, [r2, #16]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40023c00 	.word	0x40023c00

080017f4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80017f8:	4b20      	ldr	r3, [pc, #128]	@ (800187c <FLASH_FlushCaches+0x88>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001800:	2b00      	cmp	r3, #0
 8001802:	d017      	beq.n	8001834 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001804:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <FLASH_FlushCaches+0x88>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1c      	ldr	r2, [pc, #112]	@ (800187c <FLASH_FlushCaches+0x88>)
 800180a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800180e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001810:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <FLASH_FlushCaches+0x88>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a19      	ldr	r2, [pc, #100]	@ (800187c <FLASH_FlushCaches+0x88>)
 8001816:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b17      	ldr	r3, [pc, #92]	@ (800187c <FLASH_FlushCaches+0x88>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a16      	ldr	r2, [pc, #88]	@ (800187c <FLASH_FlushCaches+0x88>)
 8001822:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001826:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001828:	4b14      	ldr	r3, [pc, #80]	@ (800187c <FLASH_FlushCaches+0x88>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a13      	ldr	r2, [pc, #76]	@ (800187c <FLASH_FlushCaches+0x88>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001832:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001834:	4b11      	ldr	r3, [pc, #68]	@ (800187c <FLASH_FlushCaches+0x88>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800183c:	2b00      	cmp	r3, #0
 800183e:	d017      	beq.n	8001870 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <FLASH_FlushCaches+0x88>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <FLASH_FlushCaches+0x88>)
 8001846:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800184a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <FLASH_FlushCaches+0x88>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <FLASH_FlushCaches+0x88>)
 8001852:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <FLASH_FlushCaches+0x88>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	@ (800187c <FLASH_FlushCaches+0x88>)
 800185e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001862:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <FLASH_FlushCaches+0x88>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a04      	ldr	r2, [pc, #16]	@ (800187c <FLASH_FlushCaches+0x88>)
 800186a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800186e:	6013      	str	r3, [r2, #0]
  }
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	@ 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e159      	b.n	8001b50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8148 	bne.w	8001b4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d005      	beq.n	80018d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d130      	bne.n	8001934 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 0201 	and.w	r2, r3, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b03      	cmp	r3, #3
 800193e:	d017      	beq.n	8001970 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80a2 	beq.w	8001b4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b57      	ldr	r3, [pc, #348]	@ (8001b68 <HAL_GPIO_Init+0x2e8>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	4a56      	ldr	r2, [pc, #344]	@ (8001b68 <HAL_GPIO_Init+0x2e8>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a16:	4b54      	ldr	r3, [pc, #336]	@ (8001b68 <HAL_GPIO_Init+0x2e8>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a22:	4a52      	ldr	r2, [pc, #328]	@ (8001b6c <HAL_GPIO_Init+0x2ec>)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a49      	ldr	r2, [pc, #292]	@ (8001b70 <HAL_GPIO_Init+0x2f0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0x202>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a48      	ldr	r2, [pc, #288]	@ (8001b74 <HAL_GPIO_Init+0x2f4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x1fe>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a47      	ldr	r2, [pc, #284]	@ (8001b78 <HAL_GPIO_Init+0x2f8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x1fa>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a46      	ldr	r2, [pc, #280]	@ (8001b7c <HAL_GPIO_Init+0x2fc>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x1f6>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a45      	ldr	r2, [pc, #276]	@ (8001b80 <HAL_GPIO_Init+0x300>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x1f2>
 8001a6e:	2304      	movs	r3, #4
 8001a70:	e008      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a72:	2307      	movs	r3, #7
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a76:	2303      	movs	r3, #3
 8001a78:	e004      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e002      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a82:	2300      	movs	r3, #0
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	f002 0203 	and.w	r2, r2, #3
 8001a8a:	0092      	lsls	r2, r2, #2
 8001a8c:	4093      	lsls	r3, r2
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a94:	4935      	ldr	r1, [pc, #212]	@ (8001b6c <HAL_GPIO_Init+0x2ec>)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa2:	4b38      	ldr	r3, [pc, #224]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001acc:	4b2d      	ldr	r3, [pc, #180]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af0:	4a24      	ldr	r2, [pc, #144]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001af6:	4b23      	ldr	r3, [pc, #140]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b20:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b44:	4a0f      	ldr	r2, [pc, #60]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	f67f aea2 	bls.w	800189c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3724      	adds	r7, #36	@ 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40013c00 	.word	0x40013c00

08001b88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e0bb      	b.n	8001d1c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	f040 80ab 	bne.w	8001d16 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001bc0:	4a5c      	ldr	r2, [pc, #368]	@ (8001d34 <HAL_GPIO_DeInit+0x1ac>)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	4013      	ands	r3, r2
 8001be0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a54      	ldr	r2, [pc, #336]	@ (8001d38 <HAL_GPIO_DeInit+0x1b0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d019      	beq.n	8001c1e <HAL_GPIO_DeInit+0x96>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a53      	ldr	r2, [pc, #332]	@ (8001d3c <HAL_GPIO_DeInit+0x1b4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_DeInit+0x92>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a52      	ldr	r2, [pc, #328]	@ (8001d40 <HAL_GPIO_DeInit+0x1b8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00d      	beq.n	8001c16 <HAL_GPIO_DeInit+0x8e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a51      	ldr	r2, [pc, #324]	@ (8001d44 <HAL_GPIO_DeInit+0x1bc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <HAL_GPIO_DeInit+0x8a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a50      	ldr	r2, [pc, #320]	@ (8001d48 <HAL_GPIO_DeInit+0x1c0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_GPIO_DeInit+0x86>
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	e008      	b.n	8001c20 <HAL_GPIO_DeInit+0x98>
 8001c0e:	2307      	movs	r3, #7
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_DeInit+0x98>
 8001c12:	2303      	movs	r3, #3
 8001c14:	e004      	b.n	8001c20 <HAL_GPIO_DeInit+0x98>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e002      	b.n	8001c20 <HAL_GPIO_DeInit+0x98>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_GPIO_DeInit+0x98>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	f002 0203 	and.w	r2, r2, #3
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	4093      	lsls	r3, r2
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d132      	bne.n	8001c96 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001c30:	4b46      	ldr	r3, [pc, #280]	@ (8001d4c <HAL_GPIO_DeInit+0x1c4>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	4944      	ldr	r1, [pc, #272]	@ (8001d4c <HAL_GPIO_DeInit+0x1c4>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001c3e:	4b43      	ldr	r3, [pc, #268]	@ (8001d4c <HAL_GPIO_DeInit+0x1c4>)
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	4941      	ldr	r1, [pc, #260]	@ (8001d4c <HAL_GPIO_DeInit+0x1c4>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001c4c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d4c <HAL_GPIO_DeInit+0x1c4>)
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	493d      	ldr	r1, [pc, #244]	@ (8001d4c <HAL_GPIO_DeInit+0x1c4>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001c5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d4c <HAL_GPIO_DeInit+0x1c4>)
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	493a      	ldr	r1, [pc, #232]	@ (8001d4c <HAL_GPIO_DeInit+0x1c4>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	220f      	movs	r2, #15
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001c78:	4a2e      	ldr	r2, [pc, #184]	@ (8001d34 <HAL_GPIO_DeInit+0x1ac>)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	3302      	adds	r3, #2
 8001c80:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	43da      	mvns	r2, r3
 8001c88:	482a      	ldr	r0, [pc, #168]	@ (8001d34 <HAL_GPIO_DeInit+0x1ac>)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	400a      	ands	r2, r1
 8001c90:	3302      	adds	r3, #2
 8001c92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2103      	movs	r1, #3
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	08da      	lsrs	r2, r3, #3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3208      	adds	r2, #8
 8001cb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	08d2      	lsrs	r2, r2, #3
 8001ccc:	4019      	ands	r1, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2103      	movs	r1, #3
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	2103      	movs	r1, #3
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	401a      	ands	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2b0f      	cmp	r3, #15
 8001d20:	f67f af40 	bls.w	8001ba4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	371c      	adds	r7, #28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40013800 	.word	0x40013800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40020800 	.word	0x40020800
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40013c00 	.word	0x40013c00

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d6c:	e003      	b.n	8001d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	619a      	str	r2, [r3, #24]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e267      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d075      	beq.n	8001e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001da2:	4b88      	ldr	r3, [pc, #544]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d00c      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dae:	4b85      	ldr	r3, [pc, #532]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d112      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dba:	4b82      	ldr	r3, [pc, #520]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dc6:	d10b      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	4b7e      	ldr	r3, [pc, #504]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d05b      	beq.n	8001e8c <HAL_RCC_OscConfig+0x108>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d157      	bne.n	8001e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e242      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de8:	d106      	bne.n	8001df8 <HAL_RCC_OscConfig+0x74>
 8001dea:	4b76      	ldr	r3, [pc, #472]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a75      	ldr	r2, [pc, #468]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e01d      	b.n	8001e34 <HAL_RCC_OscConfig+0xb0>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x98>
 8001e02:	4b70      	ldr	r3, [pc, #448]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a6f      	ldr	r2, [pc, #444]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a6c      	ldr	r2, [pc, #432]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0xb0>
 8001e1c:	4b69      	ldr	r3, [pc, #420]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a68      	ldr	r2, [pc, #416]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b66      	ldr	r3, [pc, #408]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a65      	ldr	r2, [pc, #404]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f92a 	bl	8001094 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff f926 	bl	8001094 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	@ 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e207      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	4b5b      	ldr	r3, [pc, #364]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0xc0>
 8001e62:	e014      	b.n	8001e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff f916 	bl	8001094 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff f912 	bl	8001094 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	@ 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e1f3      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7e:	4b51      	ldr	r3, [pc, #324]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0xe8>
 8001e8a:	e000      	b.n	8001e8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d063      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ea6:	4b47      	ldr	r3, [pc, #284]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d11c      	bne.n	8001eec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb2:	4b44      	ldr	r3, [pc, #272]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d116      	bne.n	8001eec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	4b41      	ldr	r3, [pc, #260]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x152>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e1c7      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4937      	ldr	r1, [pc, #220]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	e03a      	b.n	8001f62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d020      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef4:	4b34      	ldr	r3, [pc, #208]	@ (8001fc8 <HAL_RCC_OscConfig+0x244>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7ff f8cb 	bl	8001094 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f02:	f7ff f8c7 	bl	8001094 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e1a8      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f14:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f20:	4b28      	ldr	r3, [pc, #160]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4925      	ldr	r1, [pc, #148]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
 8001f34:	e015      	b.n	8001f62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f36:	4b24      	ldr	r3, [pc, #144]	@ (8001fc8 <HAL_RCC_OscConfig+0x244>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f8aa 	bl	8001094 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f44:	f7ff f8a6 	bl	8001094 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e187      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f56:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d036      	beq.n	8001fdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d016      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <HAL_RCC_OscConfig+0x248>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f88a 	bl	8001094 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f84:	f7ff f886 	bl	8001094 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e167      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x200>
 8001fa2:	e01b      	b.n	8001fdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <HAL_RCC_OscConfig+0x248>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7ff f873 	bl	8001094 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	e00e      	b.n	8001fd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7ff f86f 	bl	8001094 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d907      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e150      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	42470000 	.word	0x42470000
 8001fcc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd0:	4b88      	ldr	r3, [pc, #544]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ea      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8097 	beq.w	8002118 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fee:	4b81      	ldr	r3, [pc, #516]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10f      	bne.n	800201a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b7d      	ldr	r3, [pc, #500]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	4a7c      	ldr	r2, [pc, #496]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002008:	6413      	str	r3, [r2, #64]	@ 0x40
 800200a:	4b7a      	ldr	r3, [pc, #488]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002016:	2301      	movs	r3, #1
 8002018:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	4b77      	ldr	r3, [pc, #476]	@ (80021f8 <HAL_RCC_OscConfig+0x474>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d118      	bne.n	8002058 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002026:	4b74      	ldr	r3, [pc, #464]	@ (80021f8 <HAL_RCC_OscConfig+0x474>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a73      	ldr	r2, [pc, #460]	@ (80021f8 <HAL_RCC_OscConfig+0x474>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002032:	f7ff f82f 	bl	8001094 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7ff f82b 	bl	8001094 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e10c      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b6a      	ldr	r3, [pc, #424]	@ (80021f8 <HAL_RCC_OscConfig+0x474>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x2ea>
 8002060:	4b64      	ldr	r3, [pc, #400]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002064:	4a63      	ldr	r2, [pc, #396]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6713      	str	r3, [r2, #112]	@ 0x70
 800206c:	e01c      	b.n	80020a8 <HAL_RCC_OscConfig+0x324>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x30c>
 8002076:	4b5f      	ldr	r3, [pc, #380]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207a:	4a5e      	ldr	r2, [pc, #376]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6713      	str	r3, [r2, #112]	@ 0x70
 8002082:	4b5c      	ldr	r3, [pc, #368]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002086:	4a5b      	ldr	r2, [pc, #364]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6713      	str	r3, [r2, #112]	@ 0x70
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0x324>
 8002090:	4b58      	ldr	r3, [pc, #352]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002094:	4a57      	ldr	r2, [pc, #348]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6713      	str	r3, [r2, #112]	@ 0x70
 800209c:	4b55      	ldr	r3, [pc, #340]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a0:	4a54      	ldr	r2, [pc, #336]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d015      	beq.n	80020dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7fe fff0 	bl	8001094 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7fe ffec 	bl	8001094 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0cb      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ce:	4b49      	ldr	r3, [pc, #292]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0ee      	beq.n	80020b8 <HAL_RCC_OscConfig+0x334>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020dc:	f7fe ffda 	bl	8001094 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7fe ffd6 	bl	8001094 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e0b5      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fa:	4b3e      	ldr	r3, [pc, #248]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1ee      	bne.n	80020e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210c:	4b39      	ldr	r3, [pc, #228]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	4a38      	ldr	r2, [pc, #224]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002112:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002116:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80a1 	beq.w	8002264 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002122:	4b34      	ldr	r3, [pc, #208]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b08      	cmp	r3, #8
 800212c:	d05c      	beq.n	80021e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d141      	bne.n	80021ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b31      	ldr	r3, [pc, #196]	@ (80021fc <HAL_RCC_OscConfig+0x478>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7fe ffaa 	bl	8001094 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7fe ffa6 	bl	8001094 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e087      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	4b27      	ldr	r3, [pc, #156]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	3b01      	subs	r3, #1
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	491b      	ldr	r1, [pc, #108]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218c:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <HAL_RCC_OscConfig+0x478>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7fe ff7f 	bl	8001094 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219a:	f7fe ff7b 	bl	8001094 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e05c      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ac:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x416>
 80021b8:	e054      	b.n	8002264 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <HAL_RCC_OscConfig+0x478>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7fe ff68 	bl	8001094 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7fe ff64 	bl	8001094 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e045      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_RCC_OscConfig+0x470>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x444>
 80021e6:	e03d      	b.n	8002264 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e038      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40007000 	.word	0x40007000
 80021fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002200:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <HAL_RCC_OscConfig+0x4ec>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d028      	beq.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d121      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d11a      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002236:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002238:	4293      	cmp	r3, r2
 800223a:	d111      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	3b01      	subs	r3, #1
 800224a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d107      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0cc      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002288:	4b68      	ldr	r3, [pc, #416]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d90c      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b65      	ldr	r3, [pc, #404]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b63      	ldr	r3, [pc, #396]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b8      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c8:	4b59      	ldr	r3, [pc, #356]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a58      	ldr	r2, [pc, #352]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e0:	4b53      	ldr	r3, [pc, #332]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a52      	ldr	r2, [pc, #328]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ec:	4b50      	ldr	r3, [pc, #320]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	494d      	ldr	r1, [pc, #308]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d044      	beq.n	8002394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	4b47      	ldr	r3, [pc, #284]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d119      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e07f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d003      	beq.n	8002332 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	2b03      	cmp	r3, #3
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	4b3f      	ldr	r3, [pc, #252]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002342:	4b3b      	ldr	r3, [pc, #236]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e067      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002352:	4b37      	ldr	r3, [pc, #220]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f023 0203 	bic.w	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4934      	ldr	r1, [pc, #208]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002364:	f7fe fe96 	bl	8001094 <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7fe fe92 	bl	8001094 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e04f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	4b2b      	ldr	r3, [pc, #172]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 020c 	and.w	r2, r3, #12
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	429a      	cmp	r2, r3
 8002392:	d1eb      	bne.n	800236c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002394:	4b25      	ldr	r3, [pc, #148]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d20c      	bcs.n	80023bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b22      	ldr	r3, [pc, #136]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b20      	ldr	r3, [pc, #128]	@ (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e032      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c8:	4b19      	ldr	r3, [pc, #100]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4916      	ldr	r1, [pc, #88]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e6:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	490e      	ldr	r1, [pc, #56]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023fa:	f000 f821 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	490a      	ldr	r1, [pc, #40]	@ (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	5ccb      	ldrb	r3, [r1, r3]
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	4a09      	ldr	r2, [pc, #36]	@ (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002416:	4b09      	ldr	r3, [pc, #36]	@ (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fdf6 	bl	800100c <HAL_InitTick>

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023c00 	.word	0x40023c00
 8002430:	40023800 	.word	0x40023800
 8002434:	08003ae4 	.word	0x08003ae4
 8002438:	20000000 	.word	0x20000000
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002444:	b090      	sub	sp, #64	@ 0x40
 8002446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002458:	4b59      	ldr	r3, [pc, #356]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b08      	cmp	r3, #8
 8002462:	d00d      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x40>
 8002464:	2b08      	cmp	r3, #8
 8002466:	f200 80a1 	bhi.w	80025ac <HAL_RCC_GetSysClockFreq+0x16c>
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x34>
 800246e:	2b04      	cmp	r3, #4
 8002470:	d003      	beq.n	800247a <HAL_RCC_GetSysClockFreq+0x3a>
 8002472:	e09b      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4b53      	ldr	r3, [pc, #332]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002476:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002478:	e09b      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800247a:	4b53      	ldr	r3, [pc, #332]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800247c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800247e:	e098      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002480:	4b4f      	ldr	r3, [pc, #316]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002488:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800248a:	4b4d      	ldr	r3, [pc, #308]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d028      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002496:	4b4a      	ldr	r3, [pc, #296]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	099b      	lsrs	r3, r3, #6
 800249c:	2200      	movs	r2, #0
 800249e:	623b      	str	r3, [r7, #32]
 80024a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024a8:	2100      	movs	r1, #0
 80024aa:	4b47      	ldr	r3, [pc, #284]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80024ac:	fb03 f201 	mul.w	r2, r3, r1
 80024b0:	2300      	movs	r3, #0
 80024b2:	fb00 f303 	mul.w	r3, r0, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	4a43      	ldr	r2, [pc, #268]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80024ba:	fba0 1202 	umull	r1, r2, r0, r2
 80024be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024c0:	460a      	mov	r2, r1
 80024c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80024c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024c6:	4413      	add	r3, r2
 80024c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024cc:	2200      	movs	r2, #0
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	61fa      	str	r2, [r7, #28]
 80024d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024da:	f7fd fed1 	bl	8000280 <__aeabi_uldivmod>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4613      	mov	r3, r2
 80024e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024e6:	e053      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e8:	4b35      	ldr	r3, [pc, #212]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	099b      	lsrs	r3, r3, #6
 80024ee:	2200      	movs	r2, #0
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	617a      	str	r2, [r7, #20]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024fa:	f04f 0b00 	mov.w	fp, #0
 80024fe:	4652      	mov	r2, sl
 8002500:	465b      	mov	r3, fp
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f04f 0100 	mov.w	r1, #0
 800250a:	0159      	lsls	r1, r3, #5
 800250c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002510:	0150      	lsls	r0, r2, #5
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	ebb2 080a 	subs.w	r8, r2, sl
 800251a:	eb63 090b 	sbc.w	r9, r3, fp
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800252a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800252e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002532:	ebb2 0408 	subs.w	r4, r2, r8
 8002536:	eb63 0509 	sbc.w	r5, r3, r9
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	00eb      	lsls	r3, r5, #3
 8002544:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002548:	00e2      	lsls	r2, r4, #3
 800254a:	4614      	mov	r4, r2
 800254c:	461d      	mov	r5, r3
 800254e:	eb14 030a 	adds.w	r3, r4, sl
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	eb45 030b 	adc.w	r3, r5, fp
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002566:	4629      	mov	r1, r5
 8002568:	028b      	lsls	r3, r1, #10
 800256a:	4621      	mov	r1, r4
 800256c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002570:	4621      	mov	r1, r4
 8002572:	028a      	lsls	r2, r1, #10
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800257a:	2200      	movs	r2, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	60fa      	str	r2, [r7, #12]
 8002580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002584:	f7fd fe7c 	bl	8000280 <__aeabi_uldivmod>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4613      	mov	r3, r2
 800258e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002590:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	3301      	adds	r3, #1
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80025a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025aa:	e002      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025ac:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3740      	adds	r7, #64	@ 0x40
 80025b8:	46bd      	mov	sp, r7
 80025ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800
 80025c4:	00f42400 	.word	0x00f42400
 80025c8:	017d7840 	.word	0x017d7840

080025cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d0:	4b03      	ldr	r3, [pc, #12]	@ (80025e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000000 	.word	0x20000000

080025e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025e8:	f7ff fff0 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	0a9b      	lsrs	r3, r3, #10
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	4903      	ldr	r1, [pc, #12]	@ (8002608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025fa:	5ccb      	ldrb	r3, [r1, r3]
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002600:	4618      	mov	r0, r3
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40023800 	.word	0x40023800
 8002608:	08003af4 	.word	0x08003af4

0800260c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002610:	f7ff ffdc 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b05      	ldr	r3, [pc, #20]	@ (800262c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	0b5b      	lsrs	r3, r3, #13
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4903      	ldr	r1, [pc, #12]	@ (8002630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40023800 	.word	0x40023800
 8002630:	08003af4 	.word	0x08003af4

08002634 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800263a:	f7fe fd2b 	bl	8001094 <HAL_GetTick>
 800263e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002640:	4b5d      	ldr	r3, [pc, #372]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a5c      	ldr	r2, [pc, #368]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264e:	f7fe fd21 	bl	8001094 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0a7      	b.n	80027b0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002660:	4b55      	ldr	r3, [pc, #340]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800266c:	4b52      	ldr	r3, [pc, #328]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a51      	ldr	r2, [pc, #324]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002676:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002678:	f7fe fd0c 	bl	8001094 <HAL_GetTick>
 800267c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800267e:	4b4e      	ldr	r3, [pc, #312]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002686:	f7fe fd05 	bl	8001094 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e089      	b.n	80027b0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800269c:	4b46      	ldr	r3, [pc, #280]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ee      	bne.n	8002686 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80026a8:	f7fe fcf4 	bl	8001094 <HAL_GetTick>
 80026ac:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80026ae:	4b42      	ldr	r3, [pc, #264]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a41      	ldr	r2, [pc, #260]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 80026b4:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 80026b8:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026bc:	f7fe fcea 	bl	8001094 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e070      	b.n	80027b0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80026ce:	4b3a      	ldr	r3, [pc, #232]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80026da:	f7fe fcdb 	bl	8001094 <HAL_GetTick>
 80026de:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80026e0:	4b35      	ldr	r3, [pc, #212]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a34      	ldr	r2, [pc, #208]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 80026e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026ea:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7fe fcd1 	bl	8001094 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e057      	b.n	80027b0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002700:	4b2d      	ldr	r3, [pc, #180]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800270c:	f7fe fcc2 	bl	8001094 <HAL_GetTick>
 8002710:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002712:	4b29      	ldr	r3, [pc, #164]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a28      	ldr	r2, [pc, #160]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002718:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800271c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002720:	f7fe fcb8 	bl	8001094 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e03e      	b.n	80027b0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002732:	4b21      	ldr	r3, [pc, #132]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800273e:	4b1e      	ldr	r3, [pc, #120]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002740:	4a1e      	ldr	r2, [pc, #120]	@ (80027bc <HAL_RCC_DeInit+0x188>)
 8002742:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002744:	4b1c      	ldr	r3, [pc, #112]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002746:	4a1e      	ldr	r2, [pc, #120]	@ (80027c0 <HAL_RCC_DeInit+0x18c>)
 8002748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800274c:	4b1a      	ldr	r3, [pc, #104]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a19      	ldr	r2, [pc, #100]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002752:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8002756:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002758:	4b17      	ldr	r3, [pc, #92]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4a16      	ldr	r2, [pc, #88]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 800275e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002762:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8002764:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a13      	ldr	r2, [pc, #76]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 800276a:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 800276e:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002770:	4b11      	ldr	r3, [pc, #68]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a10      	ldr	r2, [pc, #64]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002776:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800277a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800277c:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 800277e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002780:	4a0d      	ldr	r2, [pc, #52]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002788:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 800278a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800278c:	4a0a      	ldr	r2, [pc, #40]	@ (80027b8 <HAL_RCC_DeInit+0x184>)
 800278e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002792:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002794:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <HAL_RCC_DeInit+0x190>)
 8002796:	4a0c      	ldr	r2, [pc, #48]	@ (80027c8 <HAL_RCC_DeInit+0x194>)
 8002798:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800279a:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <HAL_RCC_DeInit+0x198>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fc34 	bl	800100c <HAL_InitTick>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80027ae:	2300      	movs	r3, #0
  }
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	04003010 	.word	0x04003010
 80027c0:	20003000 	.word	0x20003000
 80027c4:	20000000 	.word	0x20000000
 80027c8:	00f42400 	.word	0x00f42400
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e042      	b.n	8002868 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe fb10 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	@ 0x24
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fa3b 	bl	8002c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e024      	b.n	80028cc <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2224      	movs	r2, #36	@ 0x24
 8002886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002898:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fb3a 	bl	8000f14 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	@ 0x28
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d175      	bne.n	80029e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_UART_Transmit+0x2c>
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e06e      	b.n	80029e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2221      	movs	r2, #33	@ 0x21
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002912:	f7fe fbbf 	bl	8001094 <HAL_GetTick>
 8002916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	88fa      	ldrh	r2, [r7, #6]
 800291c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	88fa      	ldrh	r2, [r7, #6]
 8002922:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800292c:	d108      	bne.n	8002940 <HAL_UART_Transmit+0x6c>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d104      	bne.n	8002940 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	e003      	b.n	8002948 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002948:	e02e      	b.n	80029a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	@ 0x80
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f8df 	bl	8002b18 <UART_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e03a      	b.n	80029e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10b      	bne.n	800298a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002980:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	3302      	adds	r3, #2
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	e007      	b.n	800299a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	3301      	adds	r3, #1
 8002998:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1cb      	bne.n	800294a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	2140      	movs	r1, #64	@ 0x40
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f8ab 	bl	8002b18 <UART_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e006      	b.n	80029e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	e000      	b.n	80029e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
  }
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b08a      	sub	sp, #40	@ 0x28
 80029ee:	af02      	add	r7, sp, #8
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	f040 8081 	bne.w	8002b0e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_UART_Receive+0x2e>
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e079      	b.n	8002b10 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2222      	movs	r2, #34	@ 0x22
 8002a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a30:	f7fe fb30 	bl	8001094 <HAL_GetTick>
 8002a34:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	88fa      	ldrh	r2, [r7, #6]
 8002a3a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a4a:	d108      	bne.n	8002a5e <HAL_UART_Receive+0x74>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	e003      	b.n	8002a66 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a66:	e047      	b.n	8002af8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2120      	movs	r1, #32
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f850 	bl	8002b18 <UART_WaitOnFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e042      	b.n	8002b10 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10c      	bne.n	8002aaa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	e01f      	b.n	8002aea <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ab2:	d007      	beq.n	8002ac4 <HAL_UART_Receive+0xda>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10a      	bne.n	8002ad2 <HAL_UART_Receive+0xe8>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d106      	bne.n	8002ad2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	701a      	strb	r2, [r3, #0]
 8002ad0:	e008      	b.n	8002ae4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1b2      	bne.n	8002a68 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e000      	b.n	8002b10 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002b0e:	2302      	movs	r3, #2
  }
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	4613      	mov	r3, r2
 8002b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b28:	e03b      	b.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d037      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b32:	f7fe faaf 	bl	8001094 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	6a3a      	ldr	r2, [r7, #32]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d302      	bcc.n	8002b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e03a      	b.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d023      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b80      	cmp	r3, #128	@ 0x80
 8002b5e:	d020      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b40      	cmp	r3, #64	@ 0x40
 8002b64:	d01d      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d116      	bne.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f81d 	bl	8002bca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2208      	movs	r2, #8
 8002b94:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00f      	b.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4013      	ands	r3, r2
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d0b4      	beq.n	8002b2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b095      	sub	sp, #84	@ 0x54
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	330c      	adds	r3, #12
 8002bd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bdc:	e853 3f00 	ldrex	r3, [r3]
 8002be0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	330c      	adds	r3, #12
 8002bf0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bf2:	643a      	str	r2, [r7, #64]	@ 0x40
 8002bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bfa:	e841 2300 	strex	r3, r2, [r1]
 8002bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1e5      	bne.n	8002bd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3314      	adds	r3, #20
 8002c0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	e853 3f00 	ldrex	r3, [r3]
 8002c14:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3314      	adds	r3, #20
 8002c24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e5      	bne.n	8002c06 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d119      	bne.n	8002c76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	330c      	adds	r3, #12
 8002c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	e853 3f00 	ldrex	r3, [r3]
 8002c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f023 0310 	bic.w	r3, r3, #16
 8002c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	330c      	adds	r3, #12
 8002c60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c62:	61ba      	str	r2, [r7, #24]
 8002c64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c66:	6979      	ldr	r1, [r7, #20]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	e841 2300 	strex	r3, r2, [r1]
 8002c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e5      	bne.n	8002c42 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c84:	bf00      	nop
 8002c86:	3754      	adds	r7, #84	@ 0x54
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c94:	b0c0      	sub	sp, #256	@ 0x100
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cac:	68d9      	ldr	r1, [r3, #12]
 8002cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	ea40 0301 	orr.w	r3, r0, r1
 8002cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ce8:	f021 010c 	bic.w	r1, r1, #12
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0a:	6999      	ldr	r1, [r3, #24]
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	ea40 0301 	orr.w	r3, r0, r1
 8002d16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4b8f      	ldr	r3, [pc, #572]	@ (8002f5c <UART_SetConfig+0x2cc>)
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d005      	beq.n	8002d30 <UART_SetConfig+0xa0>
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4b8d      	ldr	r3, [pc, #564]	@ (8002f60 <UART_SetConfig+0x2d0>)
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d104      	bne.n	8002d3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d30:	f7ff fc6c 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 8002d34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d38:	e003      	b.n	8002d42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d3a:	f7ff fc53 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
 8002d3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d4c:	f040 810c 	bne.w	8002f68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d54:	2200      	movs	r2, #0
 8002d56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d62:	4622      	mov	r2, r4
 8002d64:	462b      	mov	r3, r5
 8002d66:	1891      	adds	r1, r2, r2
 8002d68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d6a:	415b      	adcs	r3, r3
 8002d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d72:	4621      	mov	r1, r4
 8002d74:	eb12 0801 	adds.w	r8, r2, r1
 8002d78:	4629      	mov	r1, r5
 8002d7a:	eb43 0901 	adc.w	r9, r3, r1
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d92:	4690      	mov	r8, r2
 8002d94:	4699      	mov	r9, r3
 8002d96:	4623      	mov	r3, r4
 8002d98:	eb18 0303 	adds.w	r3, r8, r3
 8002d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002da0:	462b      	mov	r3, r5
 8002da2:	eb49 0303 	adc.w	r3, r9, r3
 8002da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002db6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	18db      	adds	r3, r3, r3
 8002dc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	eb42 0303 	adc.w	r3, r2, r3
 8002dca:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002dd4:	f7fd fa54 	bl	8000280 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4b61      	ldr	r3, [pc, #388]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002dde:	fba3 2302 	umull	r2, r3, r3, r2
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	011c      	lsls	r4, r3, #4
 8002de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002df0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002df4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002df8:	4642      	mov	r2, r8
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	1891      	adds	r1, r2, r2
 8002dfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e00:	415b      	adcs	r3, r3
 8002e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e08:	4641      	mov	r1, r8
 8002e0a:	eb12 0a01 	adds.w	sl, r2, r1
 8002e0e:	4649      	mov	r1, r9
 8002e10:	eb43 0b01 	adc.w	fp, r3, r1
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e28:	4692      	mov	sl, r2
 8002e2a:	469b      	mov	fp, r3
 8002e2c:	4643      	mov	r3, r8
 8002e2e:	eb1a 0303 	adds.w	r3, sl, r3
 8002e32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e36:	464b      	mov	r3, r9
 8002e38:	eb4b 0303 	adc.w	r3, fp, r3
 8002e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e54:	460b      	mov	r3, r1
 8002e56:	18db      	adds	r3, r3, r3
 8002e58:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	eb42 0303 	adc.w	r3, r2, r3
 8002e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e6a:	f7fd fa09 	bl	8000280 <__aeabi_uldivmod>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	4b3b      	ldr	r3, [pc, #236]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002e76:	fba3 2301 	umull	r2, r3, r3, r1
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2264      	movs	r2, #100	@ 0x64
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	1acb      	subs	r3, r1, r3
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e8a:	4b36      	ldr	r3, [pc, #216]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e98:	441c      	add	r4, r3
 8002e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ea4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ea8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002eac:	4642      	mov	r2, r8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	1891      	adds	r1, r2, r2
 8002eb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002eb4:	415b      	adcs	r3, r3
 8002eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	1851      	adds	r1, r2, r1
 8002ec0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	414b      	adcs	r3, r1
 8002ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ed4:	4659      	mov	r1, fp
 8002ed6:	00cb      	lsls	r3, r1, #3
 8002ed8:	4651      	mov	r1, sl
 8002eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ede:	4651      	mov	r1, sl
 8002ee0:	00ca      	lsls	r2, r1, #3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4642      	mov	r2, r8
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	460a      	mov	r2, r1
 8002ef4:	eb42 0303 	adc.w	r3, r2, r3
 8002ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f10:	460b      	mov	r3, r1
 8002f12:	18db      	adds	r3, r3, r3
 8002f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f16:	4613      	mov	r3, r2
 8002f18:	eb42 0303 	adc.w	r3, r2, r3
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f26:	f7fd f9ab 	bl	8000280 <__aeabi_uldivmod>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002f30:	fba3 1302 	umull	r1, r3, r3, r2
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	2164      	movs	r1, #100	@ 0x64
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	3332      	adds	r3, #50	@ 0x32
 8002f42:	4a08      	ldr	r2, [pc, #32]	@ (8002f64 <UART_SetConfig+0x2d4>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	f003 0207 	and.w	r2, r3, #7
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4422      	add	r2, r4
 8002f56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f58:	e106      	b.n	8003168 <UART_SetConfig+0x4d8>
 8002f5a:	bf00      	nop
 8002f5c:	40011000 	.word	0x40011000
 8002f60:	40011400 	.word	0x40011400
 8002f64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f7a:	4642      	mov	r2, r8
 8002f7c:	464b      	mov	r3, r9
 8002f7e:	1891      	adds	r1, r2, r2
 8002f80:	6239      	str	r1, [r7, #32]
 8002f82:	415b      	adcs	r3, r3
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f8a:	4641      	mov	r1, r8
 8002f8c:	1854      	adds	r4, r2, r1
 8002f8e:	4649      	mov	r1, r9
 8002f90:	eb43 0501 	adc.w	r5, r3, r1
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	00eb      	lsls	r3, r5, #3
 8002f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa2:	00e2      	lsls	r2, r4, #3
 8002fa4:	4614      	mov	r4, r2
 8002fa6:	461d      	mov	r5, r3
 8002fa8:	4643      	mov	r3, r8
 8002faa:	18e3      	adds	r3, r4, r3
 8002fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fb0:	464b      	mov	r3, r9
 8002fb2:	eb45 0303 	adc.w	r3, r5, r3
 8002fb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	008b      	lsls	r3, r1, #2
 8002fda:	4621      	mov	r1, r4
 8002fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	008a      	lsls	r2, r1, #2
 8002fe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fe8:	f7fd f94a 	bl	8000280 <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4b60      	ldr	r3, [pc, #384]	@ (8003174 <UART_SetConfig+0x4e4>)
 8002ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	011c      	lsls	r4, r3, #4
 8002ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003004:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800300c:	4642      	mov	r2, r8
 800300e:	464b      	mov	r3, r9
 8003010:	1891      	adds	r1, r2, r2
 8003012:	61b9      	str	r1, [r7, #24]
 8003014:	415b      	adcs	r3, r3
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800301c:	4641      	mov	r1, r8
 800301e:	1851      	adds	r1, r2, r1
 8003020:	6139      	str	r1, [r7, #16]
 8003022:	4649      	mov	r1, r9
 8003024:	414b      	adcs	r3, r1
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003034:	4659      	mov	r1, fp
 8003036:	00cb      	lsls	r3, r1, #3
 8003038:	4651      	mov	r1, sl
 800303a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800303e:	4651      	mov	r1, sl
 8003040:	00ca      	lsls	r2, r1, #3
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	4603      	mov	r3, r0
 8003048:	4642      	mov	r2, r8
 800304a:	189b      	adds	r3, r3, r2
 800304c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003050:	464b      	mov	r3, r9
 8003052:	460a      	mov	r2, r1
 8003054:	eb42 0303 	adc.w	r3, r2, r3
 8003058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003066:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003074:	4649      	mov	r1, r9
 8003076:	008b      	lsls	r3, r1, #2
 8003078:	4641      	mov	r1, r8
 800307a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800307e:	4641      	mov	r1, r8
 8003080:	008a      	lsls	r2, r1, #2
 8003082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003086:	f7fd f8fb 	bl	8000280 <__aeabi_uldivmod>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4611      	mov	r1, r2
 8003090:	4b38      	ldr	r3, [pc, #224]	@ (8003174 <UART_SetConfig+0x4e4>)
 8003092:	fba3 2301 	umull	r2, r3, r3, r1
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2264      	movs	r2, #100	@ 0x64
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	1acb      	subs	r3, r1, r3
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	3332      	adds	r3, #50	@ 0x32
 80030a4:	4a33      	ldr	r2, [pc, #204]	@ (8003174 <UART_SetConfig+0x4e4>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030b0:	441c      	add	r4, r3
 80030b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b6:	2200      	movs	r2, #0
 80030b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80030ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80030bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030c0:	4642      	mov	r2, r8
 80030c2:	464b      	mov	r3, r9
 80030c4:	1891      	adds	r1, r2, r2
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	415b      	adcs	r3, r3
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030d0:	4641      	mov	r1, r8
 80030d2:	1851      	adds	r1, r2, r1
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	4649      	mov	r1, r9
 80030d8:	414b      	adcs	r3, r1
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030e8:	4659      	mov	r1, fp
 80030ea:	00cb      	lsls	r3, r1, #3
 80030ec:	4651      	mov	r1, sl
 80030ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030f2:	4651      	mov	r1, sl
 80030f4:	00ca      	lsls	r2, r1, #3
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	4642      	mov	r2, r8
 80030fe:	189b      	adds	r3, r3, r2
 8003100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003102:	464b      	mov	r3, r9
 8003104:	460a      	mov	r2, r1
 8003106:	eb42 0303 	adc.w	r3, r2, r3
 800310a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	663b      	str	r3, [r7, #96]	@ 0x60
 8003116:	667a      	str	r2, [r7, #100]	@ 0x64
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003124:	4649      	mov	r1, r9
 8003126:	008b      	lsls	r3, r1, #2
 8003128:	4641      	mov	r1, r8
 800312a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800312e:	4641      	mov	r1, r8
 8003130:	008a      	lsls	r2, r1, #2
 8003132:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003136:	f7fd f8a3 	bl	8000280 <__aeabi_uldivmod>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4b0d      	ldr	r3, [pc, #52]	@ (8003174 <UART_SetConfig+0x4e4>)
 8003140:	fba3 1302 	umull	r1, r3, r3, r2
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	2164      	movs	r1, #100	@ 0x64
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	3332      	adds	r3, #50	@ 0x32
 8003152:	4a08      	ldr	r2, [pc, #32]	@ (8003174 <UART_SetConfig+0x4e4>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4422      	add	r2, r4
 8003166:	609a      	str	r2, [r3, #8]
}
 8003168:	bf00      	nop
 800316a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800316e:	46bd      	mov	sp, r7
 8003170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003174:	51eb851f 	.word	0x51eb851f

08003178 <_vsiprintf_r>:
 8003178:	b500      	push	{lr}
 800317a:	b09b      	sub	sp, #108	@ 0x6c
 800317c:	9100      	str	r1, [sp, #0]
 800317e:	9104      	str	r1, [sp, #16]
 8003180:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003184:	9105      	str	r1, [sp, #20]
 8003186:	9102      	str	r1, [sp, #8]
 8003188:	4905      	ldr	r1, [pc, #20]	@ (80031a0 <_vsiprintf_r+0x28>)
 800318a:	9103      	str	r1, [sp, #12]
 800318c:	4669      	mov	r1, sp
 800318e:	f000 f99b 	bl	80034c8 <_svfiprintf_r>
 8003192:	9b00      	ldr	r3, [sp, #0]
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	b01b      	add	sp, #108	@ 0x6c
 800319a:	f85d fb04 	ldr.w	pc, [sp], #4
 800319e:	bf00      	nop
 80031a0:	ffff0208 	.word	0xffff0208

080031a4 <vsiprintf>:
 80031a4:	4613      	mov	r3, r2
 80031a6:	460a      	mov	r2, r1
 80031a8:	4601      	mov	r1, r0
 80031aa:	4802      	ldr	r0, [pc, #8]	@ (80031b4 <vsiprintf+0x10>)
 80031ac:	6800      	ldr	r0, [r0, #0]
 80031ae:	f7ff bfe3 	b.w	8003178 <_vsiprintf_r>
 80031b2:	bf00      	nop
 80031b4:	2000000c 	.word	0x2000000c

080031b8 <memset>:
 80031b8:	4402      	add	r2, r0
 80031ba:	4603      	mov	r3, r0
 80031bc:	4293      	cmp	r3, r2
 80031be:	d100      	bne.n	80031c2 <memset+0xa>
 80031c0:	4770      	bx	lr
 80031c2:	f803 1b01 	strb.w	r1, [r3], #1
 80031c6:	e7f9      	b.n	80031bc <memset+0x4>

080031c8 <__errno>:
 80031c8:	4b01      	ldr	r3, [pc, #4]	@ (80031d0 <__errno+0x8>)
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	2000000c 	.word	0x2000000c

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	4d0d      	ldr	r5, [pc, #52]	@ (800320c <__libc_init_array+0x38>)
 80031d8:	4c0d      	ldr	r4, [pc, #52]	@ (8003210 <__libc_init_array+0x3c>)
 80031da:	1b64      	subs	r4, r4, r5
 80031dc:	10a4      	asrs	r4, r4, #2
 80031de:	2600      	movs	r6, #0
 80031e0:	42a6      	cmp	r6, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	4d0b      	ldr	r5, [pc, #44]	@ (8003214 <__libc_init_array+0x40>)
 80031e6:	4c0c      	ldr	r4, [pc, #48]	@ (8003218 <__libc_init_array+0x44>)
 80031e8:	f000 fc66 	bl	8003ab8 <_init>
 80031ec:	1b64      	subs	r4, r4, r5
 80031ee:	10a4      	asrs	r4, r4, #2
 80031f0:	2600      	movs	r6, #0
 80031f2:	42a6      	cmp	r6, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fc:	4798      	blx	r3
 80031fe:	3601      	adds	r6, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	f855 3b04 	ldr.w	r3, [r5], #4
 8003206:	4798      	blx	r3
 8003208:	3601      	adds	r6, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	08003b38 	.word	0x08003b38
 8003210:	08003b38 	.word	0x08003b38
 8003214:	08003b38 	.word	0x08003b38
 8003218:	08003b3c 	.word	0x08003b3c

0800321c <__retarget_lock_acquire_recursive>:
 800321c:	4770      	bx	lr

0800321e <__retarget_lock_release_recursive>:
 800321e:	4770      	bx	lr

08003220 <_free_r>:
 8003220:	b538      	push	{r3, r4, r5, lr}
 8003222:	4605      	mov	r5, r0
 8003224:	2900      	cmp	r1, #0
 8003226:	d041      	beq.n	80032ac <_free_r+0x8c>
 8003228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800322c:	1f0c      	subs	r4, r1, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	bfb8      	it	lt
 8003232:	18e4      	addlt	r4, r4, r3
 8003234:	f000 f8e0 	bl	80033f8 <__malloc_lock>
 8003238:	4a1d      	ldr	r2, [pc, #116]	@ (80032b0 <_free_r+0x90>)
 800323a:	6813      	ldr	r3, [r2, #0]
 800323c:	b933      	cbnz	r3, 800324c <_free_r+0x2c>
 800323e:	6063      	str	r3, [r4, #4]
 8003240:	6014      	str	r4, [r2, #0]
 8003242:	4628      	mov	r0, r5
 8003244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003248:	f000 b8dc 	b.w	8003404 <__malloc_unlock>
 800324c:	42a3      	cmp	r3, r4
 800324e:	d908      	bls.n	8003262 <_free_r+0x42>
 8003250:	6820      	ldr	r0, [r4, #0]
 8003252:	1821      	adds	r1, r4, r0
 8003254:	428b      	cmp	r3, r1
 8003256:	bf01      	itttt	eq
 8003258:	6819      	ldreq	r1, [r3, #0]
 800325a:	685b      	ldreq	r3, [r3, #4]
 800325c:	1809      	addeq	r1, r1, r0
 800325e:	6021      	streq	r1, [r4, #0]
 8003260:	e7ed      	b.n	800323e <_free_r+0x1e>
 8003262:	461a      	mov	r2, r3
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	b10b      	cbz	r3, 800326c <_free_r+0x4c>
 8003268:	42a3      	cmp	r3, r4
 800326a:	d9fa      	bls.n	8003262 <_free_r+0x42>
 800326c:	6811      	ldr	r1, [r2, #0]
 800326e:	1850      	adds	r0, r2, r1
 8003270:	42a0      	cmp	r0, r4
 8003272:	d10b      	bne.n	800328c <_free_r+0x6c>
 8003274:	6820      	ldr	r0, [r4, #0]
 8003276:	4401      	add	r1, r0
 8003278:	1850      	adds	r0, r2, r1
 800327a:	4283      	cmp	r3, r0
 800327c:	6011      	str	r1, [r2, #0]
 800327e:	d1e0      	bne.n	8003242 <_free_r+0x22>
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	6053      	str	r3, [r2, #4]
 8003286:	4408      	add	r0, r1
 8003288:	6010      	str	r0, [r2, #0]
 800328a:	e7da      	b.n	8003242 <_free_r+0x22>
 800328c:	d902      	bls.n	8003294 <_free_r+0x74>
 800328e:	230c      	movs	r3, #12
 8003290:	602b      	str	r3, [r5, #0]
 8003292:	e7d6      	b.n	8003242 <_free_r+0x22>
 8003294:	6820      	ldr	r0, [r4, #0]
 8003296:	1821      	adds	r1, r4, r0
 8003298:	428b      	cmp	r3, r1
 800329a:	bf04      	itt	eq
 800329c:	6819      	ldreq	r1, [r3, #0]
 800329e:	685b      	ldreq	r3, [r3, #4]
 80032a0:	6063      	str	r3, [r4, #4]
 80032a2:	bf04      	itt	eq
 80032a4:	1809      	addeq	r1, r1, r0
 80032a6:	6021      	streq	r1, [r4, #0]
 80032a8:	6054      	str	r4, [r2, #4]
 80032aa:	e7ca      	b.n	8003242 <_free_r+0x22>
 80032ac:	bd38      	pop	{r3, r4, r5, pc}
 80032ae:	bf00      	nop
 80032b0:	200002c4 	.word	0x200002c4

080032b4 <sbrk_aligned>:
 80032b4:	b570      	push	{r4, r5, r6, lr}
 80032b6:	4e0f      	ldr	r6, [pc, #60]	@ (80032f4 <sbrk_aligned+0x40>)
 80032b8:	460c      	mov	r4, r1
 80032ba:	6831      	ldr	r1, [r6, #0]
 80032bc:	4605      	mov	r5, r0
 80032be:	b911      	cbnz	r1, 80032c6 <sbrk_aligned+0x12>
 80032c0:	f000 fba6 	bl	8003a10 <_sbrk_r>
 80032c4:	6030      	str	r0, [r6, #0]
 80032c6:	4621      	mov	r1, r4
 80032c8:	4628      	mov	r0, r5
 80032ca:	f000 fba1 	bl	8003a10 <_sbrk_r>
 80032ce:	1c43      	adds	r3, r0, #1
 80032d0:	d103      	bne.n	80032da <sbrk_aligned+0x26>
 80032d2:	f04f 34ff 	mov.w	r4, #4294967295
 80032d6:	4620      	mov	r0, r4
 80032d8:	bd70      	pop	{r4, r5, r6, pc}
 80032da:	1cc4      	adds	r4, r0, #3
 80032dc:	f024 0403 	bic.w	r4, r4, #3
 80032e0:	42a0      	cmp	r0, r4
 80032e2:	d0f8      	beq.n	80032d6 <sbrk_aligned+0x22>
 80032e4:	1a21      	subs	r1, r4, r0
 80032e6:	4628      	mov	r0, r5
 80032e8:	f000 fb92 	bl	8003a10 <_sbrk_r>
 80032ec:	3001      	adds	r0, #1
 80032ee:	d1f2      	bne.n	80032d6 <sbrk_aligned+0x22>
 80032f0:	e7ef      	b.n	80032d2 <sbrk_aligned+0x1e>
 80032f2:	bf00      	nop
 80032f4:	200002c0 	.word	0x200002c0

080032f8 <_malloc_r>:
 80032f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032fc:	1ccd      	adds	r5, r1, #3
 80032fe:	f025 0503 	bic.w	r5, r5, #3
 8003302:	3508      	adds	r5, #8
 8003304:	2d0c      	cmp	r5, #12
 8003306:	bf38      	it	cc
 8003308:	250c      	movcc	r5, #12
 800330a:	2d00      	cmp	r5, #0
 800330c:	4606      	mov	r6, r0
 800330e:	db01      	blt.n	8003314 <_malloc_r+0x1c>
 8003310:	42a9      	cmp	r1, r5
 8003312:	d904      	bls.n	800331e <_malloc_r+0x26>
 8003314:	230c      	movs	r3, #12
 8003316:	6033      	str	r3, [r6, #0]
 8003318:	2000      	movs	r0, #0
 800331a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800331e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033f4 <_malloc_r+0xfc>
 8003322:	f000 f869 	bl	80033f8 <__malloc_lock>
 8003326:	f8d8 3000 	ldr.w	r3, [r8]
 800332a:	461c      	mov	r4, r3
 800332c:	bb44      	cbnz	r4, 8003380 <_malloc_r+0x88>
 800332e:	4629      	mov	r1, r5
 8003330:	4630      	mov	r0, r6
 8003332:	f7ff ffbf 	bl	80032b4 <sbrk_aligned>
 8003336:	1c43      	adds	r3, r0, #1
 8003338:	4604      	mov	r4, r0
 800333a:	d158      	bne.n	80033ee <_malloc_r+0xf6>
 800333c:	f8d8 4000 	ldr.w	r4, [r8]
 8003340:	4627      	mov	r7, r4
 8003342:	2f00      	cmp	r7, #0
 8003344:	d143      	bne.n	80033ce <_malloc_r+0xd6>
 8003346:	2c00      	cmp	r4, #0
 8003348:	d04b      	beq.n	80033e2 <_malloc_r+0xea>
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	4639      	mov	r1, r7
 800334e:	4630      	mov	r0, r6
 8003350:	eb04 0903 	add.w	r9, r4, r3
 8003354:	f000 fb5c 	bl	8003a10 <_sbrk_r>
 8003358:	4581      	cmp	r9, r0
 800335a:	d142      	bne.n	80033e2 <_malloc_r+0xea>
 800335c:	6821      	ldr	r1, [r4, #0]
 800335e:	1a6d      	subs	r5, r5, r1
 8003360:	4629      	mov	r1, r5
 8003362:	4630      	mov	r0, r6
 8003364:	f7ff ffa6 	bl	80032b4 <sbrk_aligned>
 8003368:	3001      	adds	r0, #1
 800336a:	d03a      	beq.n	80033e2 <_malloc_r+0xea>
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	442b      	add	r3, r5
 8003370:	6023      	str	r3, [r4, #0]
 8003372:	f8d8 3000 	ldr.w	r3, [r8]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	bb62      	cbnz	r2, 80033d4 <_malloc_r+0xdc>
 800337a:	f8c8 7000 	str.w	r7, [r8]
 800337e:	e00f      	b.n	80033a0 <_malloc_r+0xa8>
 8003380:	6822      	ldr	r2, [r4, #0]
 8003382:	1b52      	subs	r2, r2, r5
 8003384:	d420      	bmi.n	80033c8 <_malloc_r+0xd0>
 8003386:	2a0b      	cmp	r2, #11
 8003388:	d917      	bls.n	80033ba <_malloc_r+0xc2>
 800338a:	1961      	adds	r1, r4, r5
 800338c:	42a3      	cmp	r3, r4
 800338e:	6025      	str	r5, [r4, #0]
 8003390:	bf18      	it	ne
 8003392:	6059      	strne	r1, [r3, #4]
 8003394:	6863      	ldr	r3, [r4, #4]
 8003396:	bf08      	it	eq
 8003398:	f8c8 1000 	streq.w	r1, [r8]
 800339c:	5162      	str	r2, [r4, r5]
 800339e:	604b      	str	r3, [r1, #4]
 80033a0:	4630      	mov	r0, r6
 80033a2:	f000 f82f 	bl	8003404 <__malloc_unlock>
 80033a6:	f104 000b 	add.w	r0, r4, #11
 80033aa:	1d23      	adds	r3, r4, #4
 80033ac:	f020 0007 	bic.w	r0, r0, #7
 80033b0:	1ac2      	subs	r2, r0, r3
 80033b2:	bf1c      	itt	ne
 80033b4:	1a1b      	subne	r3, r3, r0
 80033b6:	50a3      	strne	r3, [r4, r2]
 80033b8:	e7af      	b.n	800331a <_malloc_r+0x22>
 80033ba:	6862      	ldr	r2, [r4, #4]
 80033bc:	42a3      	cmp	r3, r4
 80033be:	bf0c      	ite	eq
 80033c0:	f8c8 2000 	streq.w	r2, [r8]
 80033c4:	605a      	strne	r2, [r3, #4]
 80033c6:	e7eb      	b.n	80033a0 <_malloc_r+0xa8>
 80033c8:	4623      	mov	r3, r4
 80033ca:	6864      	ldr	r4, [r4, #4]
 80033cc:	e7ae      	b.n	800332c <_malloc_r+0x34>
 80033ce:	463c      	mov	r4, r7
 80033d0:	687f      	ldr	r7, [r7, #4]
 80033d2:	e7b6      	b.n	8003342 <_malloc_r+0x4a>
 80033d4:	461a      	mov	r2, r3
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	42a3      	cmp	r3, r4
 80033da:	d1fb      	bne.n	80033d4 <_malloc_r+0xdc>
 80033dc:	2300      	movs	r3, #0
 80033de:	6053      	str	r3, [r2, #4]
 80033e0:	e7de      	b.n	80033a0 <_malloc_r+0xa8>
 80033e2:	230c      	movs	r3, #12
 80033e4:	6033      	str	r3, [r6, #0]
 80033e6:	4630      	mov	r0, r6
 80033e8:	f000 f80c 	bl	8003404 <__malloc_unlock>
 80033ec:	e794      	b.n	8003318 <_malloc_r+0x20>
 80033ee:	6005      	str	r5, [r0, #0]
 80033f0:	e7d6      	b.n	80033a0 <_malloc_r+0xa8>
 80033f2:	bf00      	nop
 80033f4:	200002c4 	.word	0x200002c4

080033f8 <__malloc_lock>:
 80033f8:	4801      	ldr	r0, [pc, #4]	@ (8003400 <__malloc_lock+0x8>)
 80033fa:	f7ff bf0f 	b.w	800321c <__retarget_lock_acquire_recursive>
 80033fe:	bf00      	nop
 8003400:	200002bc 	.word	0x200002bc

08003404 <__malloc_unlock>:
 8003404:	4801      	ldr	r0, [pc, #4]	@ (800340c <__malloc_unlock+0x8>)
 8003406:	f7ff bf0a 	b.w	800321e <__retarget_lock_release_recursive>
 800340a:	bf00      	nop
 800340c:	200002bc 	.word	0x200002bc

08003410 <__ssputs_r>:
 8003410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003414:	688e      	ldr	r6, [r1, #8]
 8003416:	461f      	mov	r7, r3
 8003418:	42be      	cmp	r6, r7
 800341a:	680b      	ldr	r3, [r1, #0]
 800341c:	4682      	mov	sl, r0
 800341e:	460c      	mov	r4, r1
 8003420:	4690      	mov	r8, r2
 8003422:	d82d      	bhi.n	8003480 <__ssputs_r+0x70>
 8003424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003428:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800342c:	d026      	beq.n	800347c <__ssputs_r+0x6c>
 800342e:	6965      	ldr	r5, [r4, #20]
 8003430:	6909      	ldr	r1, [r1, #16]
 8003432:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003436:	eba3 0901 	sub.w	r9, r3, r1
 800343a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800343e:	1c7b      	adds	r3, r7, #1
 8003440:	444b      	add	r3, r9
 8003442:	106d      	asrs	r5, r5, #1
 8003444:	429d      	cmp	r5, r3
 8003446:	bf38      	it	cc
 8003448:	461d      	movcc	r5, r3
 800344a:	0553      	lsls	r3, r2, #21
 800344c:	d527      	bpl.n	800349e <__ssputs_r+0x8e>
 800344e:	4629      	mov	r1, r5
 8003450:	f7ff ff52 	bl	80032f8 <_malloc_r>
 8003454:	4606      	mov	r6, r0
 8003456:	b360      	cbz	r0, 80034b2 <__ssputs_r+0xa2>
 8003458:	6921      	ldr	r1, [r4, #16]
 800345a:	464a      	mov	r2, r9
 800345c:	f000 fae8 	bl	8003a30 <memcpy>
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800346a:	81a3      	strh	r3, [r4, #12]
 800346c:	6126      	str	r6, [r4, #16]
 800346e:	6165      	str	r5, [r4, #20]
 8003470:	444e      	add	r6, r9
 8003472:	eba5 0509 	sub.w	r5, r5, r9
 8003476:	6026      	str	r6, [r4, #0]
 8003478:	60a5      	str	r5, [r4, #8]
 800347a:	463e      	mov	r6, r7
 800347c:	42be      	cmp	r6, r7
 800347e:	d900      	bls.n	8003482 <__ssputs_r+0x72>
 8003480:	463e      	mov	r6, r7
 8003482:	6820      	ldr	r0, [r4, #0]
 8003484:	4632      	mov	r2, r6
 8003486:	4641      	mov	r1, r8
 8003488:	f000 faa8 	bl	80039dc <memmove>
 800348c:	68a3      	ldr	r3, [r4, #8]
 800348e:	1b9b      	subs	r3, r3, r6
 8003490:	60a3      	str	r3, [r4, #8]
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	4433      	add	r3, r6
 8003496:	6023      	str	r3, [r4, #0]
 8003498:	2000      	movs	r0, #0
 800349a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349e:	462a      	mov	r2, r5
 80034a0:	f000 fad4 	bl	8003a4c <_realloc_r>
 80034a4:	4606      	mov	r6, r0
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d1e0      	bne.n	800346c <__ssputs_r+0x5c>
 80034aa:	6921      	ldr	r1, [r4, #16]
 80034ac:	4650      	mov	r0, sl
 80034ae:	f7ff feb7 	bl	8003220 <_free_r>
 80034b2:	230c      	movs	r3, #12
 80034b4:	f8ca 3000 	str.w	r3, [sl]
 80034b8:	89a3      	ldrh	r3, [r4, #12]
 80034ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034be:	81a3      	strh	r3, [r4, #12]
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
 80034c4:	e7e9      	b.n	800349a <__ssputs_r+0x8a>
	...

080034c8 <_svfiprintf_r>:
 80034c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034cc:	4698      	mov	r8, r3
 80034ce:	898b      	ldrh	r3, [r1, #12]
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	b09d      	sub	sp, #116	@ 0x74
 80034d4:	4607      	mov	r7, r0
 80034d6:	460d      	mov	r5, r1
 80034d8:	4614      	mov	r4, r2
 80034da:	d510      	bpl.n	80034fe <_svfiprintf_r+0x36>
 80034dc:	690b      	ldr	r3, [r1, #16]
 80034de:	b973      	cbnz	r3, 80034fe <_svfiprintf_r+0x36>
 80034e0:	2140      	movs	r1, #64	@ 0x40
 80034e2:	f7ff ff09 	bl	80032f8 <_malloc_r>
 80034e6:	6028      	str	r0, [r5, #0]
 80034e8:	6128      	str	r0, [r5, #16]
 80034ea:	b930      	cbnz	r0, 80034fa <_svfiprintf_r+0x32>
 80034ec:	230c      	movs	r3, #12
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	b01d      	add	sp, #116	@ 0x74
 80034f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fa:	2340      	movs	r3, #64	@ 0x40
 80034fc:	616b      	str	r3, [r5, #20]
 80034fe:	2300      	movs	r3, #0
 8003500:	9309      	str	r3, [sp, #36]	@ 0x24
 8003502:	2320      	movs	r3, #32
 8003504:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003508:	f8cd 800c 	str.w	r8, [sp, #12]
 800350c:	2330      	movs	r3, #48	@ 0x30
 800350e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80036ac <_svfiprintf_r+0x1e4>
 8003512:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003516:	f04f 0901 	mov.w	r9, #1
 800351a:	4623      	mov	r3, r4
 800351c:	469a      	mov	sl, r3
 800351e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003522:	b10a      	cbz	r2, 8003528 <_svfiprintf_r+0x60>
 8003524:	2a25      	cmp	r2, #37	@ 0x25
 8003526:	d1f9      	bne.n	800351c <_svfiprintf_r+0x54>
 8003528:	ebba 0b04 	subs.w	fp, sl, r4
 800352c:	d00b      	beq.n	8003546 <_svfiprintf_r+0x7e>
 800352e:	465b      	mov	r3, fp
 8003530:	4622      	mov	r2, r4
 8003532:	4629      	mov	r1, r5
 8003534:	4638      	mov	r0, r7
 8003536:	f7ff ff6b 	bl	8003410 <__ssputs_r>
 800353a:	3001      	adds	r0, #1
 800353c:	f000 80a7 	beq.w	800368e <_svfiprintf_r+0x1c6>
 8003540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003542:	445a      	add	r2, fp
 8003544:	9209      	str	r2, [sp, #36]	@ 0x24
 8003546:	f89a 3000 	ldrb.w	r3, [sl]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 809f 	beq.w	800368e <_svfiprintf_r+0x1c6>
 8003550:	2300      	movs	r3, #0
 8003552:	f04f 32ff 	mov.w	r2, #4294967295
 8003556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800355a:	f10a 0a01 	add.w	sl, sl, #1
 800355e:	9304      	str	r3, [sp, #16]
 8003560:	9307      	str	r3, [sp, #28]
 8003562:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003566:	931a      	str	r3, [sp, #104]	@ 0x68
 8003568:	4654      	mov	r4, sl
 800356a:	2205      	movs	r2, #5
 800356c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003570:	484e      	ldr	r0, [pc, #312]	@ (80036ac <_svfiprintf_r+0x1e4>)
 8003572:	f7fc fe35 	bl	80001e0 <memchr>
 8003576:	9a04      	ldr	r2, [sp, #16]
 8003578:	b9d8      	cbnz	r0, 80035b2 <_svfiprintf_r+0xea>
 800357a:	06d0      	lsls	r0, r2, #27
 800357c:	bf44      	itt	mi
 800357e:	2320      	movmi	r3, #32
 8003580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003584:	0711      	lsls	r1, r2, #28
 8003586:	bf44      	itt	mi
 8003588:	232b      	movmi	r3, #43	@ 0x2b
 800358a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800358e:	f89a 3000 	ldrb.w	r3, [sl]
 8003592:	2b2a      	cmp	r3, #42	@ 0x2a
 8003594:	d015      	beq.n	80035c2 <_svfiprintf_r+0xfa>
 8003596:	9a07      	ldr	r2, [sp, #28]
 8003598:	4654      	mov	r4, sl
 800359a:	2000      	movs	r0, #0
 800359c:	f04f 0c0a 	mov.w	ip, #10
 80035a0:	4621      	mov	r1, r4
 80035a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035a6:	3b30      	subs	r3, #48	@ 0x30
 80035a8:	2b09      	cmp	r3, #9
 80035aa:	d94b      	bls.n	8003644 <_svfiprintf_r+0x17c>
 80035ac:	b1b0      	cbz	r0, 80035dc <_svfiprintf_r+0x114>
 80035ae:	9207      	str	r2, [sp, #28]
 80035b0:	e014      	b.n	80035dc <_svfiprintf_r+0x114>
 80035b2:	eba0 0308 	sub.w	r3, r0, r8
 80035b6:	fa09 f303 	lsl.w	r3, r9, r3
 80035ba:	4313      	orrs	r3, r2
 80035bc:	9304      	str	r3, [sp, #16]
 80035be:	46a2      	mov	sl, r4
 80035c0:	e7d2      	b.n	8003568 <_svfiprintf_r+0xa0>
 80035c2:	9b03      	ldr	r3, [sp, #12]
 80035c4:	1d19      	adds	r1, r3, #4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	9103      	str	r1, [sp, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	bfbb      	ittet	lt
 80035ce:	425b      	neglt	r3, r3
 80035d0:	f042 0202 	orrlt.w	r2, r2, #2
 80035d4:	9307      	strge	r3, [sp, #28]
 80035d6:	9307      	strlt	r3, [sp, #28]
 80035d8:	bfb8      	it	lt
 80035da:	9204      	strlt	r2, [sp, #16]
 80035dc:	7823      	ldrb	r3, [r4, #0]
 80035de:	2b2e      	cmp	r3, #46	@ 0x2e
 80035e0:	d10a      	bne.n	80035f8 <_svfiprintf_r+0x130>
 80035e2:	7863      	ldrb	r3, [r4, #1]
 80035e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80035e6:	d132      	bne.n	800364e <_svfiprintf_r+0x186>
 80035e8:	9b03      	ldr	r3, [sp, #12]
 80035ea:	1d1a      	adds	r2, r3, #4
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	9203      	str	r2, [sp, #12]
 80035f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035f4:	3402      	adds	r4, #2
 80035f6:	9305      	str	r3, [sp, #20]
 80035f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80036bc <_svfiprintf_r+0x1f4>
 80035fc:	7821      	ldrb	r1, [r4, #0]
 80035fe:	2203      	movs	r2, #3
 8003600:	4650      	mov	r0, sl
 8003602:	f7fc fded 	bl	80001e0 <memchr>
 8003606:	b138      	cbz	r0, 8003618 <_svfiprintf_r+0x150>
 8003608:	9b04      	ldr	r3, [sp, #16]
 800360a:	eba0 000a 	sub.w	r0, r0, sl
 800360e:	2240      	movs	r2, #64	@ 0x40
 8003610:	4082      	lsls	r2, r0
 8003612:	4313      	orrs	r3, r2
 8003614:	3401      	adds	r4, #1
 8003616:	9304      	str	r3, [sp, #16]
 8003618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800361c:	4824      	ldr	r0, [pc, #144]	@ (80036b0 <_svfiprintf_r+0x1e8>)
 800361e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003622:	2206      	movs	r2, #6
 8003624:	f7fc fddc 	bl	80001e0 <memchr>
 8003628:	2800      	cmp	r0, #0
 800362a:	d036      	beq.n	800369a <_svfiprintf_r+0x1d2>
 800362c:	4b21      	ldr	r3, [pc, #132]	@ (80036b4 <_svfiprintf_r+0x1ec>)
 800362e:	bb1b      	cbnz	r3, 8003678 <_svfiprintf_r+0x1b0>
 8003630:	9b03      	ldr	r3, [sp, #12]
 8003632:	3307      	adds	r3, #7
 8003634:	f023 0307 	bic.w	r3, r3, #7
 8003638:	3308      	adds	r3, #8
 800363a:	9303      	str	r3, [sp, #12]
 800363c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800363e:	4433      	add	r3, r6
 8003640:	9309      	str	r3, [sp, #36]	@ 0x24
 8003642:	e76a      	b.n	800351a <_svfiprintf_r+0x52>
 8003644:	fb0c 3202 	mla	r2, ip, r2, r3
 8003648:	460c      	mov	r4, r1
 800364a:	2001      	movs	r0, #1
 800364c:	e7a8      	b.n	80035a0 <_svfiprintf_r+0xd8>
 800364e:	2300      	movs	r3, #0
 8003650:	3401      	adds	r4, #1
 8003652:	9305      	str	r3, [sp, #20]
 8003654:	4619      	mov	r1, r3
 8003656:	f04f 0c0a 	mov.w	ip, #10
 800365a:	4620      	mov	r0, r4
 800365c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003660:	3a30      	subs	r2, #48	@ 0x30
 8003662:	2a09      	cmp	r2, #9
 8003664:	d903      	bls.n	800366e <_svfiprintf_r+0x1a6>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0c6      	beq.n	80035f8 <_svfiprintf_r+0x130>
 800366a:	9105      	str	r1, [sp, #20]
 800366c:	e7c4      	b.n	80035f8 <_svfiprintf_r+0x130>
 800366e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003672:	4604      	mov	r4, r0
 8003674:	2301      	movs	r3, #1
 8003676:	e7f0      	b.n	800365a <_svfiprintf_r+0x192>
 8003678:	ab03      	add	r3, sp, #12
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	462a      	mov	r2, r5
 800367e:	4b0e      	ldr	r3, [pc, #56]	@ (80036b8 <_svfiprintf_r+0x1f0>)
 8003680:	a904      	add	r1, sp, #16
 8003682:	4638      	mov	r0, r7
 8003684:	f3af 8000 	nop.w
 8003688:	1c42      	adds	r2, r0, #1
 800368a:	4606      	mov	r6, r0
 800368c:	d1d6      	bne.n	800363c <_svfiprintf_r+0x174>
 800368e:	89ab      	ldrh	r3, [r5, #12]
 8003690:	065b      	lsls	r3, r3, #25
 8003692:	f53f af2d 	bmi.w	80034f0 <_svfiprintf_r+0x28>
 8003696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003698:	e72c      	b.n	80034f4 <_svfiprintf_r+0x2c>
 800369a:	ab03      	add	r3, sp, #12
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	462a      	mov	r2, r5
 80036a0:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <_svfiprintf_r+0x1f0>)
 80036a2:	a904      	add	r1, sp, #16
 80036a4:	4638      	mov	r0, r7
 80036a6:	f000 f879 	bl	800379c <_printf_i>
 80036aa:	e7ed      	b.n	8003688 <_svfiprintf_r+0x1c0>
 80036ac:	08003afc 	.word	0x08003afc
 80036b0:	08003b06 	.word	0x08003b06
 80036b4:	00000000 	.word	0x00000000
 80036b8:	08003411 	.word	0x08003411
 80036bc:	08003b02 	.word	0x08003b02

080036c0 <_printf_common>:
 80036c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c4:	4616      	mov	r6, r2
 80036c6:	4698      	mov	r8, r3
 80036c8:	688a      	ldr	r2, [r1, #8]
 80036ca:	690b      	ldr	r3, [r1, #16]
 80036cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036d0:	4293      	cmp	r3, r2
 80036d2:	bfb8      	it	lt
 80036d4:	4613      	movlt	r3, r2
 80036d6:	6033      	str	r3, [r6, #0]
 80036d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036dc:	4607      	mov	r7, r0
 80036de:	460c      	mov	r4, r1
 80036e0:	b10a      	cbz	r2, 80036e6 <_printf_common+0x26>
 80036e2:	3301      	adds	r3, #1
 80036e4:	6033      	str	r3, [r6, #0]
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	0699      	lsls	r1, r3, #26
 80036ea:	bf42      	ittt	mi
 80036ec:	6833      	ldrmi	r3, [r6, #0]
 80036ee:	3302      	addmi	r3, #2
 80036f0:	6033      	strmi	r3, [r6, #0]
 80036f2:	6825      	ldr	r5, [r4, #0]
 80036f4:	f015 0506 	ands.w	r5, r5, #6
 80036f8:	d106      	bne.n	8003708 <_printf_common+0x48>
 80036fa:	f104 0a19 	add.w	sl, r4, #25
 80036fe:	68e3      	ldr	r3, [r4, #12]
 8003700:	6832      	ldr	r2, [r6, #0]
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	42ab      	cmp	r3, r5
 8003706:	dc26      	bgt.n	8003756 <_printf_common+0x96>
 8003708:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800370c:	6822      	ldr	r2, [r4, #0]
 800370e:	3b00      	subs	r3, #0
 8003710:	bf18      	it	ne
 8003712:	2301      	movne	r3, #1
 8003714:	0692      	lsls	r2, r2, #26
 8003716:	d42b      	bmi.n	8003770 <_printf_common+0xb0>
 8003718:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800371c:	4641      	mov	r1, r8
 800371e:	4638      	mov	r0, r7
 8003720:	47c8      	blx	r9
 8003722:	3001      	adds	r0, #1
 8003724:	d01e      	beq.n	8003764 <_printf_common+0xa4>
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	6922      	ldr	r2, [r4, #16]
 800372a:	f003 0306 	and.w	r3, r3, #6
 800372e:	2b04      	cmp	r3, #4
 8003730:	bf02      	ittt	eq
 8003732:	68e5      	ldreq	r5, [r4, #12]
 8003734:	6833      	ldreq	r3, [r6, #0]
 8003736:	1aed      	subeq	r5, r5, r3
 8003738:	68a3      	ldr	r3, [r4, #8]
 800373a:	bf0c      	ite	eq
 800373c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003740:	2500      	movne	r5, #0
 8003742:	4293      	cmp	r3, r2
 8003744:	bfc4      	itt	gt
 8003746:	1a9b      	subgt	r3, r3, r2
 8003748:	18ed      	addgt	r5, r5, r3
 800374a:	2600      	movs	r6, #0
 800374c:	341a      	adds	r4, #26
 800374e:	42b5      	cmp	r5, r6
 8003750:	d11a      	bne.n	8003788 <_printf_common+0xc8>
 8003752:	2000      	movs	r0, #0
 8003754:	e008      	b.n	8003768 <_printf_common+0xa8>
 8003756:	2301      	movs	r3, #1
 8003758:	4652      	mov	r2, sl
 800375a:	4641      	mov	r1, r8
 800375c:	4638      	mov	r0, r7
 800375e:	47c8      	blx	r9
 8003760:	3001      	adds	r0, #1
 8003762:	d103      	bne.n	800376c <_printf_common+0xac>
 8003764:	f04f 30ff 	mov.w	r0, #4294967295
 8003768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800376c:	3501      	adds	r5, #1
 800376e:	e7c6      	b.n	80036fe <_printf_common+0x3e>
 8003770:	18e1      	adds	r1, r4, r3
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	2030      	movs	r0, #48	@ 0x30
 8003776:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800377a:	4422      	add	r2, r4
 800377c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003784:	3302      	adds	r3, #2
 8003786:	e7c7      	b.n	8003718 <_printf_common+0x58>
 8003788:	2301      	movs	r3, #1
 800378a:	4622      	mov	r2, r4
 800378c:	4641      	mov	r1, r8
 800378e:	4638      	mov	r0, r7
 8003790:	47c8      	blx	r9
 8003792:	3001      	adds	r0, #1
 8003794:	d0e6      	beq.n	8003764 <_printf_common+0xa4>
 8003796:	3601      	adds	r6, #1
 8003798:	e7d9      	b.n	800374e <_printf_common+0x8e>
	...

0800379c <_printf_i>:
 800379c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037a0:	7e0f      	ldrb	r7, [r1, #24]
 80037a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037a4:	2f78      	cmp	r7, #120	@ 0x78
 80037a6:	4691      	mov	r9, r2
 80037a8:	4680      	mov	r8, r0
 80037aa:	460c      	mov	r4, r1
 80037ac:	469a      	mov	sl, r3
 80037ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037b2:	d807      	bhi.n	80037c4 <_printf_i+0x28>
 80037b4:	2f62      	cmp	r7, #98	@ 0x62
 80037b6:	d80a      	bhi.n	80037ce <_printf_i+0x32>
 80037b8:	2f00      	cmp	r7, #0
 80037ba:	f000 80d2 	beq.w	8003962 <_printf_i+0x1c6>
 80037be:	2f58      	cmp	r7, #88	@ 0x58
 80037c0:	f000 80b9 	beq.w	8003936 <_printf_i+0x19a>
 80037c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037cc:	e03a      	b.n	8003844 <_printf_i+0xa8>
 80037ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037d2:	2b15      	cmp	r3, #21
 80037d4:	d8f6      	bhi.n	80037c4 <_printf_i+0x28>
 80037d6:	a101      	add	r1, pc, #4	@ (adr r1, 80037dc <_printf_i+0x40>)
 80037d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037dc:	08003835 	.word	0x08003835
 80037e0:	08003849 	.word	0x08003849
 80037e4:	080037c5 	.word	0x080037c5
 80037e8:	080037c5 	.word	0x080037c5
 80037ec:	080037c5 	.word	0x080037c5
 80037f0:	080037c5 	.word	0x080037c5
 80037f4:	08003849 	.word	0x08003849
 80037f8:	080037c5 	.word	0x080037c5
 80037fc:	080037c5 	.word	0x080037c5
 8003800:	080037c5 	.word	0x080037c5
 8003804:	080037c5 	.word	0x080037c5
 8003808:	08003949 	.word	0x08003949
 800380c:	08003873 	.word	0x08003873
 8003810:	08003903 	.word	0x08003903
 8003814:	080037c5 	.word	0x080037c5
 8003818:	080037c5 	.word	0x080037c5
 800381c:	0800396b 	.word	0x0800396b
 8003820:	080037c5 	.word	0x080037c5
 8003824:	08003873 	.word	0x08003873
 8003828:	080037c5 	.word	0x080037c5
 800382c:	080037c5 	.word	0x080037c5
 8003830:	0800390b 	.word	0x0800390b
 8003834:	6833      	ldr	r3, [r6, #0]
 8003836:	1d1a      	adds	r2, r3, #4
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6032      	str	r2, [r6, #0]
 800383c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003844:	2301      	movs	r3, #1
 8003846:	e09d      	b.n	8003984 <_printf_i+0x1e8>
 8003848:	6833      	ldr	r3, [r6, #0]
 800384a:	6820      	ldr	r0, [r4, #0]
 800384c:	1d19      	adds	r1, r3, #4
 800384e:	6031      	str	r1, [r6, #0]
 8003850:	0606      	lsls	r6, r0, #24
 8003852:	d501      	bpl.n	8003858 <_printf_i+0xbc>
 8003854:	681d      	ldr	r5, [r3, #0]
 8003856:	e003      	b.n	8003860 <_printf_i+0xc4>
 8003858:	0645      	lsls	r5, r0, #25
 800385a:	d5fb      	bpl.n	8003854 <_printf_i+0xb8>
 800385c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003860:	2d00      	cmp	r5, #0
 8003862:	da03      	bge.n	800386c <_printf_i+0xd0>
 8003864:	232d      	movs	r3, #45	@ 0x2d
 8003866:	426d      	negs	r5, r5
 8003868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800386c:	4859      	ldr	r0, [pc, #356]	@ (80039d4 <_printf_i+0x238>)
 800386e:	230a      	movs	r3, #10
 8003870:	e011      	b.n	8003896 <_printf_i+0xfa>
 8003872:	6821      	ldr	r1, [r4, #0]
 8003874:	6833      	ldr	r3, [r6, #0]
 8003876:	0608      	lsls	r0, r1, #24
 8003878:	f853 5b04 	ldr.w	r5, [r3], #4
 800387c:	d402      	bmi.n	8003884 <_printf_i+0xe8>
 800387e:	0649      	lsls	r1, r1, #25
 8003880:	bf48      	it	mi
 8003882:	b2ad      	uxthmi	r5, r5
 8003884:	2f6f      	cmp	r7, #111	@ 0x6f
 8003886:	4853      	ldr	r0, [pc, #332]	@ (80039d4 <_printf_i+0x238>)
 8003888:	6033      	str	r3, [r6, #0]
 800388a:	bf14      	ite	ne
 800388c:	230a      	movne	r3, #10
 800388e:	2308      	moveq	r3, #8
 8003890:	2100      	movs	r1, #0
 8003892:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003896:	6866      	ldr	r6, [r4, #4]
 8003898:	60a6      	str	r6, [r4, #8]
 800389a:	2e00      	cmp	r6, #0
 800389c:	bfa2      	ittt	ge
 800389e:	6821      	ldrge	r1, [r4, #0]
 80038a0:	f021 0104 	bicge.w	r1, r1, #4
 80038a4:	6021      	strge	r1, [r4, #0]
 80038a6:	b90d      	cbnz	r5, 80038ac <_printf_i+0x110>
 80038a8:	2e00      	cmp	r6, #0
 80038aa:	d04b      	beq.n	8003944 <_printf_i+0x1a8>
 80038ac:	4616      	mov	r6, r2
 80038ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80038b2:	fb03 5711 	mls	r7, r3, r1, r5
 80038b6:	5dc7      	ldrb	r7, [r0, r7]
 80038b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038bc:	462f      	mov	r7, r5
 80038be:	42bb      	cmp	r3, r7
 80038c0:	460d      	mov	r5, r1
 80038c2:	d9f4      	bls.n	80038ae <_printf_i+0x112>
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d10b      	bne.n	80038e0 <_printf_i+0x144>
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	07df      	lsls	r7, r3, #31
 80038cc:	d508      	bpl.n	80038e0 <_printf_i+0x144>
 80038ce:	6923      	ldr	r3, [r4, #16]
 80038d0:	6861      	ldr	r1, [r4, #4]
 80038d2:	4299      	cmp	r1, r3
 80038d4:	bfde      	ittt	le
 80038d6:	2330      	movle	r3, #48	@ 0x30
 80038d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038e0:	1b92      	subs	r2, r2, r6
 80038e2:	6122      	str	r2, [r4, #16]
 80038e4:	f8cd a000 	str.w	sl, [sp]
 80038e8:	464b      	mov	r3, r9
 80038ea:	aa03      	add	r2, sp, #12
 80038ec:	4621      	mov	r1, r4
 80038ee:	4640      	mov	r0, r8
 80038f0:	f7ff fee6 	bl	80036c0 <_printf_common>
 80038f4:	3001      	adds	r0, #1
 80038f6:	d14a      	bne.n	800398e <_printf_i+0x1f2>
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295
 80038fc:	b004      	add	sp, #16
 80038fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	f043 0320 	orr.w	r3, r3, #32
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	4833      	ldr	r0, [pc, #204]	@ (80039d8 <_printf_i+0x23c>)
 800390c:	2778      	movs	r7, #120	@ 0x78
 800390e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	6831      	ldr	r1, [r6, #0]
 8003916:	061f      	lsls	r7, r3, #24
 8003918:	f851 5b04 	ldr.w	r5, [r1], #4
 800391c:	d402      	bmi.n	8003924 <_printf_i+0x188>
 800391e:	065f      	lsls	r7, r3, #25
 8003920:	bf48      	it	mi
 8003922:	b2ad      	uxthmi	r5, r5
 8003924:	6031      	str	r1, [r6, #0]
 8003926:	07d9      	lsls	r1, r3, #31
 8003928:	bf44      	itt	mi
 800392a:	f043 0320 	orrmi.w	r3, r3, #32
 800392e:	6023      	strmi	r3, [r4, #0]
 8003930:	b11d      	cbz	r5, 800393a <_printf_i+0x19e>
 8003932:	2310      	movs	r3, #16
 8003934:	e7ac      	b.n	8003890 <_printf_i+0xf4>
 8003936:	4827      	ldr	r0, [pc, #156]	@ (80039d4 <_printf_i+0x238>)
 8003938:	e7e9      	b.n	800390e <_printf_i+0x172>
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	f023 0320 	bic.w	r3, r3, #32
 8003940:	6023      	str	r3, [r4, #0]
 8003942:	e7f6      	b.n	8003932 <_printf_i+0x196>
 8003944:	4616      	mov	r6, r2
 8003946:	e7bd      	b.n	80038c4 <_printf_i+0x128>
 8003948:	6833      	ldr	r3, [r6, #0]
 800394a:	6825      	ldr	r5, [r4, #0]
 800394c:	6961      	ldr	r1, [r4, #20]
 800394e:	1d18      	adds	r0, r3, #4
 8003950:	6030      	str	r0, [r6, #0]
 8003952:	062e      	lsls	r6, r5, #24
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	d501      	bpl.n	800395c <_printf_i+0x1c0>
 8003958:	6019      	str	r1, [r3, #0]
 800395a:	e002      	b.n	8003962 <_printf_i+0x1c6>
 800395c:	0668      	lsls	r0, r5, #25
 800395e:	d5fb      	bpl.n	8003958 <_printf_i+0x1bc>
 8003960:	8019      	strh	r1, [r3, #0]
 8003962:	2300      	movs	r3, #0
 8003964:	6123      	str	r3, [r4, #16]
 8003966:	4616      	mov	r6, r2
 8003968:	e7bc      	b.n	80038e4 <_printf_i+0x148>
 800396a:	6833      	ldr	r3, [r6, #0]
 800396c:	1d1a      	adds	r2, r3, #4
 800396e:	6032      	str	r2, [r6, #0]
 8003970:	681e      	ldr	r6, [r3, #0]
 8003972:	6862      	ldr	r2, [r4, #4]
 8003974:	2100      	movs	r1, #0
 8003976:	4630      	mov	r0, r6
 8003978:	f7fc fc32 	bl	80001e0 <memchr>
 800397c:	b108      	cbz	r0, 8003982 <_printf_i+0x1e6>
 800397e:	1b80      	subs	r0, r0, r6
 8003980:	6060      	str	r0, [r4, #4]
 8003982:	6863      	ldr	r3, [r4, #4]
 8003984:	6123      	str	r3, [r4, #16]
 8003986:	2300      	movs	r3, #0
 8003988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800398c:	e7aa      	b.n	80038e4 <_printf_i+0x148>
 800398e:	6923      	ldr	r3, [r4, #16]
 8003990:	4632      	mov	r2, r6
 8003992:	4649      	mov	r1, r9
 8003994:	4640      	mov	r0, r8
 8003996:	47d0      	blx	sl
 8003998:	3001      	adds	r0, #1
 800399a:	d0ad      	beq.n	80038f8 <_printf_i+0x15c>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	079b      	lsls	r3, r3, #30
 80039a0:	d413      	bmi.n	80039ca <_printf_i+0x22e>
 80039a2:	68e0      	ldr	r0, [r4, #12]
 80039a4:	9b03      	ldr	r3, [sp, #12]
 80039a6:	4298      	cmp	r0, r3
 80039a8:	bfb8      	it	lt
 80039aa:	4618      	movlt	r0, r3
 80039ac:	e7a6      	b.n	80038fc <_printf_i+0x160>
 80039ae:	2301      	movs	r3, #1
 80039b0:	4632      	mov	r2, r6
 80039b2:	4649      	mov	r1, r9
 80039b4:	4640      	mov	r0, r8
 80039b6:	47d0      	blx	sl
 80039b8:	3001      	adds	r0, #1
 80039ba:	d09d      	beq.n	80038f8 <_printf_i+0x15c>
 80039bc:	3501      	adds	r5, #1
 80039be:	68e3      	ldr	r3, [r4, #12]
 80039c0:	9903      	ldr	r1, [sp, #12]
 80039c2:	1a5b      	subs	r3, r3, r1
 80039c4:	42ab      	cmp	r3, r5
 80039c6:	dcf2      	bgt.n	80039ae <_printf_i+0x212>
 80039c8:	e7eb      	b.n	80039a2 <_printf_i+0x206>
 80039ca:	2500      	movs	r5, #0
 80039cc:	f104 0619 	add.w	r6, r4, #25
 80039d0:	e7f5      	b.n	80039be <_printf_i+0x222>
 80039d2:	bf00      	nop
 80039d4:	08003b0d 	.word	0x08003b0d
 80039d8:	08003b1e 	.word	0x08003b1e

080039dc <memmove>:
 80039dc:	4288      	cmp	r0, r1
 80039de:	b510      	push	{r4, lr}
 80039e0:	eb01 0402 	add.w	r4, r1, r2
 80039e4:	d902      	bls.n	80039ec <memmove+0x10>
 80039e6:	4284      	cmp	r4, r0
 80039e8:	4623      	mov	r3, r4
 80039ea:	d807      	bhi.n	80039fc <memmove+0x20>
 80039ec:	1e43      	subs	r3, r0, #1
 80039ee:	42a1      	cmp	r1, r4
 80039f0:	d008      	beq.n	8003a04 <memmove+0x28>
 80039f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039fa:	e7f8      	b.n	80039ee <memmove+0x12>
 80039fc:	4402      	add	r2, r0
 80039fe:	4601      	mov	r1, r0
 8003a00:	428a      	cmp	r2, r1
 8003a02:	d100      	bne.n	8003a06 <memmove+0x2a>
 8003a04:	bd10      	pop	{r4, pc}
 8003a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a0e:	e7f7      	b.n	8003a00 <memmove+0x24>

08003a10 <_sbrk_r>:
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	4d06      	ldr	r5, [pc, #24]	@ (8003a2c <_sbrk_r+0x1c>)
 8003a14:	2300      	movs	r3, #0
 8003a16:	4604      	mov	r4, r0
 8003a18:	4608      	mov	r0, r1
 8003a1a:	602b      	str	r3, [r5, #0]
 8003a1c:	f7fd f962 	bl	8000ce4 <_sbrk>
 8003a20:	1c43      	adds	r3, r0, #1
 8003a22:	d102      	bne.n	8003a2a <_sbrk_r+0x1a>
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	b103      	cbz	r3, 8003a2a <_sbrk_r+0x1a>
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	bd38      	pop	{r3, r4, r5, pc}
 8003a2c:	200002b8 	.word	0x200002b8

08003a30 <memcpy>:
 8003a30:	440a      	add	r2, r1
 8003a32:	4291      	cmp	r1, r2
 8003a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a38:	d100      	bne.n	8003a3c <memcpy+0xc>
 8003a3a:	4770      	bx	lr
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a46:	4291      	cmp	r1, r2
 8003a48:	d1f9      	bne.n	8003a3e <memcpy+0xe>
 8003a4a:	bd10      	pop	{r4, pc}

08003a4c <_realloc_r>:
 8003a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a50:	4680      	mov	r8, r0
 8003a52:	4615      	mov	r5, r2
 8003a54:	460c      	mov	r4, r1
 8003a56:	b921      	cbnz	r1, 8003a62 <_realloc_r+0x16>
 8003a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	f7ff bc4b 	b.w	80032f8 <_malloc_r>
 8003a62:	b92a      	cbnz	r2, 8003a70 <_realloc_r+0x24>
 8003a64:	f7ff fbdc 	bl	8003220 <_free_r>
 8003a68:	2400      	movs	r4, #0
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a70:	f000 f81a 	bl	8003aa8 <_malloc_usable_size_r>
 8003a74:	4285      	cmp	r5, r0
 8003a76:	4606      	mov	r6, r0
 8003a78:	d802      	bhi.n	8003a80 <_realloc_r+0x34>
 8003a7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003a7e:	d8f4      	bhi.n	8003a6a <_realloc_r+0x1e>
 8003a80:	4629      	mov	r1, r5
 8003a82:	4640      	mov	r0, r8
 8003a84:	f7ff fc38 	bl	80032f8 <_malloc_r>
 8003a88:	4607      	mov	r7, r0
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	d0ec      	beq.n	8003a68 <_realloc_r+0x1c>
 8003a8e:	42b5      	cmp	r5, r6
 8003a90:	462a      	mov	r2, r5
 8003a92:	4621      	mov	r1, r4
 8003a94:	bf28      	it	cs
 8003a96:	4632      	movcs	r2, r6
 8003a98:	f7ff ffca 	bl	8003a30 <memcpy>
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4640      	mov	r0, r8
 8003aa0:	f7ff fbbe 	bl	8003220 <_free_r>
 8003aa4:	463c      	mov	r4, r7
 8003aa6:	e7e0      	b.n	8003a6a <_realloc_r+0x1e>

08003aa8 <_malloc_usable_size_r>:
 8003aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aac:	1f18      	subs	r0, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bfbc      	itt	lt
 8003ab2:	580b      	ldrlt	r3, [r1, r0]
 8003ab4:	18c0      	addlt	r0, r0, r3
 8003ab6:	4770      	bx	lr

08003ab8 <_init>:
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aba:	bf00      	nop
 8003abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003abe:	bc08      	pop	{r3}
 8003ac0:	469e      	mov	lr, r3
 8003ac2:	4770      	bx	lr

08003ac4 <_fini>:
 8003ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac6:	bf00      	nop
 8003ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aca:	bc08      	pop	{r3}
 8003acc:	469e      	mov	lr, r3
 8003ace:	4770      	bx	lr
