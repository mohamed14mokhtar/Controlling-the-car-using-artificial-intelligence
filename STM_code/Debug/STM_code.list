
STM_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d678  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800d818  0800d818  0000e818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9d0  0800d9d0  0000f150  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9d0  0800d9d0  0000e9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9d8  0800d9d8  0000f150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9d8  0800d9d8  0000e9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d9dc  0800d9dc  0000e9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800d9e0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000060d0  20000150  0800db30  0000f150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006220  0800db30  0000f220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002679c  00000000  00000000  0000f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058f8  00000000  00000000  0003591c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e50  00000000  00000000  0003b218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001749  00000000  00000000  0003d068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c69a  00000000  00000000  0003e7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000285cf  00000000  00000000  0005ae4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e5bf  00000000  00000000  0008341a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001219d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000814c  00000000  00000000  00121a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00129b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d800 	.word	0x0800d800

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	0800d800 	.word	0x0800d800

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SPI_DATA_REC */
  SPI_DATA_RECHandle = osSemaphoreNew(1, 1, &SPI_DATA_REC_attributes);
 80004d4:	4a20      	ldr	r2, [pc, #128]	@ (8000558 <MX_FREERTOS_Init+0x88>)
 80004d6:	2101      	movs	r1, #1
 80004d8:	2001      	movs	r0, #1
 80004da:	f007 f8ee 	bl	80076ba <osSemaphoreNew>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a1e      	ldr	r2, [pc, #120]	@ (800055c <MX_FREERTOS_Init+0x8c>)
 80004e2:	6013      	str	r3, [r2, #0]

  /* creation of UART_DATA_TR */
  UART_DATA_TRHandle = osSemaphoreNew(1, 1, &UART_DATA_TR_attributes);
 80004e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000560 <MX_FREERTOS_Init+0x90>)
 80004e6:	2101      	movs	r1, #1
 80004e8:	2001      	movs	r0, #1
 80004ea:	f007 f8e6 	bl	80076ba <osSemaphoreNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000564 <MX_FREERTOS_Init+0x94>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of USB_DATA */
  USB_DATAHandle = osSemaphoreNew(1, 1, &USB_DATA_attributes);
 80004f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000568 <MX_FREERTOS_Init+0x98>)
 80004f6:	2101      	movs	r1, #1
 80004f8:	2001      	movs	r0, #1
 80004fa:	f007 f8de 	bl	80076ba <osSemaphoreNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a1a      	ldr	r2, [pc, #104]	@ (800056c <MX_FREERTOS_Init+0x9c>)
 8000502:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SPI_DATA */
  SPI_DATAHandle = osMessageQueueNew (10, sizeof(uint8_t), &SPI_DATA_attributes);
 8000504:	4a1a      	ldr	r2, [pc, #104]	@ (8000570 <MX_FREERTOS_Init+0xa0>)
 8000506:	2101      	movs	r1, #1
 8000508:	200a      	movs	r0, #10
 800050a:	f007 f9f5 	bl	80078f8 <osMessageQueueNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a18      	ldr	r2, [pc, #96]	@ (8000574 <MX_FREERTOS_Init+0xa4>)
 8000512:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000514:	4a18      	ldr	r2, [pc, #96]	@ (8000578 <MX_FREERTOS_Init+0xa8>)
 8000516:	2100      	movs	r1, #0
 8000518:	4818      	ldr	r0, [pc, #96]	@ (800057c <MX_FREERTOS_Init+0xac>)
 800051a:	f007 f821 	bl	8007560 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a17      	ldr	r2, [pc, #92]	@ (8000580 <MX_FREERTOS_Init+0xb0>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(servo_control, NULL, &myTask02_attributes);
 8000524:	4a17      	ldr	r2, [pc, #92]	@ (8000584 <MX_FREERTOS_Init+0xb4>)
 8000526:	2100      	movs	r1, #0
 8000528:	4817      	ldr	r0, [pc, #92]	@ (8000588 <MX_FREERTOS_Init+0xb8>)
 800052a:	f007 f819 	bl	8007560 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a16      	ldr	r2, [pc, #88]	@ (800058c <MX_FREERTOS_Init+0xbc>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(handle_transmit, NULL, &myTask03_attributes);
 8000534:	4a16      	ldr	r2, [pc, #88]	@ (8000590 <MX_FREERTOS_Init+0xc0>)
 8000536:	2100      	movs	r1, #0
 8000538:	4816      	ldr	r0, [pc, #88]	@ (8000594 <MX_FREERTOS_Init+0xc4>)
 800053a:	f007 f811 	bl	8007560 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a15      	ldr	r2, [pc, #84]	@ (8000598 <MX_FREERTOS_Init+0xc8>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(handle_USB_data, NULL, &myTask04_attributes);
 8000544:	4a15      	ldr	r2, [pc, #84]	@ (800059c <MX_FREERTOS_Init+0xcc>)
 8000546:	2100      	movs	r1, #0
 8000548:	4815      	ldr	r0, [pc, #84]	@ (80005a0 <MX_FREERTOS_Init+0xd0>)
 800054a:	f007 f809 	bl	8007560 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a14      	ldr	r2, [pc, #80]	@ (80005a4 <MX_FREERTOS_Init+0xd4>)
 8000552:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	0800d988 	.word	0x0800d988
 800055c:	20000188 	.word	0x20000188
 8000560:	0800d998 	.word	0x0800d998
 8000564:	2000018c 	.word	0x2000018c
 8000568:	0800d9a8 	.word	0x0800d9a8
 800056c:	20000190 	.word	0x20000190
 8000570:	0800d970 	.word	0x0800d970
 8000574:	20000184 	.word	0x20000184
 8000578:	0800d8e0 	.word	0x0800d8e0
 800057c:	080005a9 	.word	0x080005a9
 8000580:	20000174 	.word	0x20000174
 8000584:	0800d904 	.word	0x0800d904
 8000588:	080005bd 	.word	0x080005bd
 800058c:	20000178 	.word	0x20000178
 8000590:	0800d928 	.word	0x0800d928
 8000594:	080005e9 	.word	0x080005e9
 8000598:	2000017c 	.word	0x2000017c
 800059c:	0800d94c 	.word	0x0800d94c
 80005a0:	080006ad 	.word	0x080006ad
 80005a4:	20000180 	.word	0x20000180

080005a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005b0:	f00c fb4e 	bl	800cc50 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f007 f865 	bl	8007684 <osDelay>
 80005ba:	e7fb      	b.n	80005b4 <StartDefaultTask+0xc>

080005bc <servo_control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servo_control */
void servo_control(void *argument)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	uint8_t ir_sensor_1 ;
	uint8_t ir_sensor_2 ;
  /* Infinite loop */
  for(;;)
  {
	  ir_sensor_1 = HAL_GPIO_ReadPin(GPIOA, IR_1_Pin);
 80005c4:	2108      	movs	r1, #8
 80005c6:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <servo_control+0x28>)
 80005c8:	f001 f8f4 	bl	80017b4 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	73fb      	strb	r3, [r7, #15]
	  ir_sensor_2 = HAL_GPIO_ReadPin(GPIOA, IR_2_Pin);
 80005d0:	2110      	movs	r1, #16
 80005d2:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <servo_control+0x28>)
 80005d4:	f001 f8ee 	bl	80017b4 <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	73bb      	strb	r3, [r7, #14]
  	  if((ir_sensor_1 == GPIO_PIN_RESET) || (ir_sensor_2 == GPIO_PIN_RESET)){
  		  //servo_Motor_Start_angle_90(&servo);
  	  }else{
  		  //servo_Motor_Start_angle_N90(&servo);
  	  }
      osDelay(20);
 80005dc:	2014      	movs	r0, #20
 80005de:	f007 f851 	bl	8007684 <osDelay>
	  ir_sensor_1 = HAL_GPIO_ReadPin(GPIOA, IR_1_Pin);
 80005e2:	e7ef      	b.n	80005c4 <servo_control+0x8>
 80005e4:	40020000 	.word	0x40020000

080005e8 <handle_transmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_handle_transmit */
void handle_transmit(void *argument)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN handle_transmit */
	uint8_t stop_condution = 'S';
 80005f0:	2353      	movs	r3, #83	@ 0x53
 80005f2:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(USB_DATAHandle, 100);
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <handle_transmit+0xa4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2164      	movs	r1, #100	@ 0x64
 80005fa:	4618      	mov	r0, r3
 80005fc:	f007 f8e6 	bl	80077cc <osSemaphoreAcquire>
	  if(USB_data == 'R'){
 8000600:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <handle_transmit+0xa8>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b52      	cmp	r3, #82	@ 0x52
 8000606:	d10f      	bne.n	8000628 <handle_transmit+0x40>
		  if(previous_state_stop_condution != stop_condution){
 8000608:	4b22      	ldr	r3, [pc, #136]	@ (8000694 <handle_transmit+0xac>)
 800060a:	781a      	ldrb	r2, [r3, #0]
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	429a      	cmp	r2, r3
 8000610:	d032      	beq.n	8000678 <handle_transmit+0x90>
			  HAL_UART_Transmit(&huart1, &stop_condution, UART_DATA_SIZE, 100);
 8000612:	f107 010f 	add.w	r1, r7, #15
 8000616:	2364      	movs	r3, #100	@ 0x64
 8000618:	2201      	movs	r2, #1
 800061a:	481f      	ldr	r0, [pc, #124]	@ (8000698 <handle_transmit+0xb0>)
 800061c:	f004 fbc4 	bl	8004da8 <HAL_UART_Transmit>
			  previous_state_stop_condution = stop_condution;
 8000620:	7bfa      	ldrb	r2, [r7, #15]
 8000622:	4b1c      	ldr	r3, [pc, #112]	@ (8000694 <handle_transmit+0xac>)
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	e027      	b.n	8000678 <handle_transmit+0x90>
		  }
	  }else{
		  osSemaphoreAcquire(SPI_DATA_RECHandle, 100);
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <handle_transmit+0xb4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2164      	movs	r1, #100	@ 0x64
 800062e:	4618      	mov	r0, r3
 8000630:	f007 f8cc 	bl	80077cc <osSemaphoreAcquire>
		  osMessageQueueGet(SPI_DATAHandle,(void *)&SPI_QUEUE_GET,NULL,100);
 8000634:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <handle_transmit+0xb8>)
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	2364      	movs	r3, #100	@ 0x64
 800063a:	2200      	movs	r2, #0
 800063c:	4919      	ldr	r1, [pc, #100]	@ (80006a4 <handle_transmit+0xbc>)
 800063e:	f007 fa2f 	bl	8007aa0 <osMessageQueueGet>
		  osSemaphoreRelease(SPI_DATAHandle);
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <handle_transmit+0xb8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f007 f912 	bl	8007870 <osSemaphoreRelease>
		  previous_state_stop_condution = SPI_QUEUE_GET;
 800064c:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <handle_transmit+0xbc>)
 800064e:	781a      	ldrb	r2, [r3, #0]
 8000650:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <handle_transmit+0xac>)
 8000652:	701a      	strb	r2, [r3, #0]
		  if(previous_state_spi != SPI_QUEUE_GET){
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <handle_transmit+0xc0>)
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <handle_transmit+0xbc>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	d00b      	beq.n	8000678 <handle_transmit+0x90>
			  previous_state_spi = SPI_QUEUE_GET;
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <handle_transmit+0xbc>)
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <handle_transmit+0xc0>)
 8000666:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, &SPI_QUEUE_GET, SPI_QUEUE_GET, 100);
 8000668:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <handle_transmit+0xbc>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	2364      	movs	r3, #100	@ 0x64
 8000670:	490c      	ldr	r1, [pc, #48]	@ (80006a4 <handle_transmit+0xbc>)
 8000672:	4809      	ldr	r0, [pc, #36]	@ (8000698 <handle_transmit+0xb0>)
 8000674:	f004 fb98 	bl	8004da8 <HAL_UART_Transmit>
		  }
	  }
	  osSemaphoreRelease(USB_DATAHandle);
 8000678:	4b04      	ldr	r3, [pc, #16]	@ (800068c <handle_transmit+0xa4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f007 f8f7 	bl	8007870 <osSemaphoreRelease>
    osDelay(20);
 8000682:	2014      	movs	r0, #20
 8000684:	f006 fffe 	bl	8007684 <osDelay>
	  osSemaphoreAcquire(USB_DATAHandle, 100);
 8000688:	e7b4      	b.n	80005f4 <handle_transmit+0xc>
 800068a:	bf00      	nop
 800068c:	20000190 	.word	0x20000190
 8000690:	20000196 	.word	0x20000196
 8000694:	2000016f 	.word	0x2000016f
 8000698:	20000280 	.word	0x20000280
 800069c:	20000188 	.word	0x20000188
 80006a0:	20000184 	.word	0x20000184
 80006a4:	2000016d 	.word	0x2000016d
 80006a8:	20000170 	.word	0x20000170

080006ac <handle_USB_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_handle_USB_data */
void handle_USB_data(void *argument)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN handle_USB_data */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(USB_DATAHandle, 100);
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <handle_USB_data+0x48>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2164      	movs	r1, #100	@ 0x64
 80006ba:	4618      	mov	r0, r3
 80006bc:	f007 f886 	bl	80077cc <osSemaphoreAcquire>
	  if(previous_state_usb != USB_data){
 80006c0:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <handle_USB_data+0x4c>)
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <handle_USB_data+0x50>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d00a      	beq.n	80006e2 <handle_USB_data+0x36>
		  if(USB_data == 'R'){
 80006cc:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <handle_USB_data+0x50>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b52      	cmp	r3, #82	@ 0x52
 80006d2:	d102      	bne.n	80006da <handle_USB_data+0x2e>
			  data_send_uart1 = 'S';
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <handle_USB_data+0x54>)
 80006d6:	2253      	movs	r2, #83	@ 0x53
 80006d8:	701a      	strb	r2, [r3, #0]
		  }
		  previous_state_usb = USB_data;
 80006da:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <handle_USB_data+0x50>)
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <handle_USB_data+0x4c>)
 80006e0:	701a      	strb	r2, [r3, #0]
	  }

	  osSemaphoreRelease(USB_DATAHandle);
 80006e2:	4b04      	ldr	r3, [pc, #16]	@ (80006f4 <handle_USB_data+0x48>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f007 f8c2 	bl	8007870 <osSemaphoreRelease>
    osDelay(5);
 80006ec:	2005      	movs	r0, #5
 80006ee:	f006 ffc9 	bl	8007684 <osDelay>
	  osSemaphoreAcquire(USB_DATAHandle, 100);
 80006f2:	e7df      	b.n	80006b4 <handle_USB_data+0x8>
 80006f4:	20000190 	.word	0x20000190
 80006f8:	2000016e 	.word	0x2000016e
 80006fc:	20000196 	.word	0x20000196
 8000700:	2000016c 	.word	0x2000016c

08000704 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	if(receive_uart2 == 15){
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <HAL_UART_RxCpltCallback+0x28>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d102      	bne.n	800071a <HAL_UART_RxCpltCallback+0x16>
		HAL_NVIC_SystemReset();
 8000714:	f000 fe33 	bl	800137e <HAL_NVIC_SystemReset>
	}else{
		HAL_UART_Receive_IT(&huart2,&receive_uart2,UART_DATA_SIZE);
	}

}
 8000718:	e004      	b.n	8000724 <HAL_UART_RxCpltCallback+0x20>
		HAL_UART_Receive_IT(&huart2,&receive_uart2,UART_DATA_SIZE);
 800071a:	2201      	movs	r2, #1
 800071c:	4903      	ldr	r1, [pc, #12]	@ (800072c <HAL_UART_RxCpltCallback+0x28>)
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <HAL_UART_RxCpltCallback+0x2c>)
 8000720:	f004 fbcd 	bl	8004ebe <HAL_UART_Receive_IT>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000194 	.word	0x20000194
 8000730:	200002c8 	.word	0x200002c8

08000734 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	osSemaphoreAcquire(SPI_DATA_RECHandle, 100);
 800073c:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <HAL_SPI_TxRxCpltCallback+0x40>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2164      	movs	r1, #100	@ 0x64
 8000742:	4618      	mov	r0, r3
 8000744:	f007 f842 	bl	80077cc <osSemaphoreAcquire>
	HAL_SPI_Receive_IT(&hspi1, &SPI_receive, SPI_DATA_SIZE);
 8000748:	2201      	movs	r2, #1
 800074a:	490b      	ldr	r1, [pc, #44]	@ (8000778 <HAL_SPI_TxRxCpltCallback+0x44>)
 800074c:	480b      	ldr	r0, [pc, #44]	@ (800077c <HAL_SPI_TxRxCpltCallback+0x48>)
 800074e:	f002 ffc9 	bl	80036e4 <HAL_SPI_Receive_IT>
	osMessageQueuePut(SPI_DATAHandle,(void *)&SPI_receive, 0, 100);
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8000754:	6818      	ldr	r0, [r3, #0]
 8000756:	2364      	movs	r3, #100	@ 0x64
 8000758:	2200      	movs	r2, #0
 800075a:	4907      	ldr	r1, [pc, #28]	@ (8000778 <HAL_SPI_TxRxCpltCallback+0x44>)
 800075c:	f007 f940 	bl	80079e0 <osMessageQueuePut>
	osSemaphoreRelease(SPI_DATAHandle);
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f007 f883 	bl	8007870 <osSemaphoreRelease>
	//xQueueSendToBackFromISR(SPI_DATAHandle,(void *)&SPI_receive,NULL);
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000188 	.word	0x20000188
 8000778:	20000195 	.word	0x20000195
 800077c:	20000198 	.word	0x20000198
 8000780:	20000184 	.word	0x20000184

08000784 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b26      	ldr	r3, [pc, #152]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a25      	ldr	r2, [pc, #148]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b23      	ldr	r3, [pc, #140]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a1e      	ldr	r2, [pc, #120]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a17      	ldr	r2, [pc, #92]	@ (8000854 <MX_GPIO_Init+0xd0>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000810:	4811      	ldr	r0, [pc, #68]	@ (8000858 <MX_GPIO_Init+0xd4>)
 8000812:	f000 ffe7 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000816:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	480a      	ldr	r0, [pc, #40]	@ (8000858 <MX_GPIO_Init+0xd4>)
 8000830:	f000 fe3c 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IR_1_Pin|IR_2_Pin;
 8000834:	2318      	movs	r3, #24
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_GPIO_Init+0xd8>)
 8000848:	f000 fe30 	bl	80014ac <HAL_GPIO_Init>

}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	@ 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40020800 	.word	0x40020800
 800085c:	40020400 	.word	0x40020400

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000864:	f000 fc2c 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000868:	f000 f824 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086c:	f7ff ff8a 	bl	8000784 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000870:	f000 f8a2 	bl	80009b8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000874:	f000 fa34 	bl	8000ce0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000878:	f000 fb18 	bl	8000eac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800087c:	f000 fb40 	bl	8000f00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_SPI_Receive_IT(&hspi1, &SPI_receive, SPI_DATA_SIZE);
 8000880:	2201      	movs	r2, #1
 8000882:	4908      	ldr	r1, [pc, #32]	@ (80008a4 <main+0x44>)
 8000884:	4808      	ldr	r0, [pc, #32]	@ (80008a8 <main+0x48>)
 8000886:	f002 ff2d 	bl	80036e4 <HAL_SPI_Receive_IT>
  HAL_UART_Receive_IT(&huart2,&receive_uart2,UART_DATA_SIZE);
 800088a:	2201      	movs	r2, #1
 800088c:	4907      	ldr	r1, [pc, #28]	@ (80008ac <main+0x4c>)
 800088e:	4808      	ldr	r0, [pc, #32]	@ (80008b0 <main+0x50>)
 8000890:	f004 fb15 	bl	8004ebe <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000894:	f006 fe1a 	bl	80074cc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000898:	f7ff fe1a 	bl	80004d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800089c:	f006 fe3a 	bl	8007514 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <main+0x40>
 80008a4:	20000195 	.word	0x20000195
 80008a8:	20000198 	.word	0x20000198
 80008ac:	20000194 	.word	0x20000194
 80008b0:	200002c8 	.word	0x200002c8

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	@ 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	2230      	movs	r2, #48	@ 0x30
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f00c feb4 	bl	800d630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	4b29      	ldr	r3, [pc, #164]	@ (8000984 <SystemClock_Config+0xd0>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	4a28      	ldr	r2, [pc, #160]	@ (8000984 <SystemClock_Config+0xd0>)
 80008e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e8:	4b26      	ldr	r3, [pc, #152]	@ (8000984 <SystemClock_Config+0xd0>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	4b23      	ldr	r3, [pc, #140]	@ (8000988 <SystemClock_Config+0xd4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000900:	4a21      	ldr	r2, [pc, #132]	@ (8000988 <SystemClock_Config+0xd4>)
 8000902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <SystemClock_Config+0xd4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000918:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000922:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000926:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000928:	2319      	movs	r3, #25
 800092a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800092c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000930:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000932:	2304      	movs	r3, #4
 8000934:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000936:	2307      	movs	r3, #7
 8000938:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	4618      	mov	r0, r3
 8000940:	f002 f9bc 	bl	8002cbc <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800094a:	f000 f82e 	bl	80009aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2302      	movs	r3, #2
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2102      	movs	r1, #2
 800096a:	4618      	mov	r0, r3
 800096c:	f002 fc1e 	bl	80031ac <HAL_RCC_ClockConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000976:	f000 f818 	bl	80009aa <Error_Handler>
  }
}
 800097a:	bf00      	nop
 800097c:	3750      	adds	r7, #80	@ 0x50
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800099c:	d101      	bne.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800099e:	f000 fbb1 	bl	8001104 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ae:	b672      	cpsid	i
}
 80009b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b2:	bf00      	nop
 80009b4:	e7fd      	b.n	80009b2 <Error_Handler+0x8>
	...

080009b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009bc:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <MX_SPI1_Init+0x5c>)
 80009be:	4a16      	ldr	r2, [pc, #88]	@ (8000a18 <MX_SPI1_Init+0x60>)
 80009c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009c2:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_SPI1_Init+0x5c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <MX_SPI1_Init+0x5c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MX_SPI1_Init+0x5c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <MX_SPI1_Init+0x5c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <MX_SPI1_Init+0x5c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <MX_SPI1_Init+0x5c>)
 80009e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a14 <MX_SPI1_Init+0x5c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <MX_SPI1_Init+0x5c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <MX_SPI1_Init+0x5c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <MX_SPI1_Init+0x5c>)
 80009fc:	220a      	movs	r2, #10
 80009fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_SPI1_Init+0x5c>)
 8000a02:	f002 fde5 	bl	80035d0 <HAL_SPI_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f7ff ffcd 	bl	80009aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000198 	.word	0x20000198
 8000a18:	40013000 	.word	0x40013000

08000a1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	@ 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab0 <HAL_SPI_MspInit+0x94>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d133      	bne.n	8000aa6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <HAL_SPI_MspInit+0x98>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab4 <HAL_SPI_MspInit+0x98>)
 8000a48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <HAL_SPI_MspInit+0x98>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_SPI_MspInit+0x98>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a14      	ldr	r2, [pc, #80]	@ (8000ab4 <HAL_SPI_MspInit+0x98>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_SPI_MspInit+0x98>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a76:	23e0      	movs	r3, #224	@ 0xe0
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a86:	2305      	movs	r3, #5
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4809      	ldr	r0, [pc, #36]	@ (8000ab8 <HAL_SPI_MspInit+0x9c>)
 8000a92:	f000 fd0b 	bl	80014ac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2105      	movs	r1, #5
 8000a9a:	2023      	movs	r0, #35	@ 0x23
 8000a9c:	f000 fc45 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000aa0:	2023      	movs	r0, #35	@ 0x23
 8000aa2:	f000 fc5e 	bl	8001362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	@ 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40013000 	.word	0x40013000
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <HAL_MspInit+0x54>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	4a11      	ldr	r2, [pc, #68]	@ (8000b10 <HAL_MspInit+0x54>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <HAL_MspInit+0x54>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <HAL_MspInit+0x54>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <HAL_MspInit+0x54>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <HAL_MspInit+0x54>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	210f      	movs	r1, #15
 8000afe:	f06f 0001 	mvn.w	r0, #1
 8000b02:	f000 fc12 	bl	800132a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	@ 0x38
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4b34      	ldr	r3, [pc, #208]	@ (8000bfc <HAL_InitTick+0xe8>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	4a33      	ldr	r2, [pc, #204]	@ (8000bfc <HAL_InitTick+0xe8>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b34:	4b31      	ldr	r3, [pc, #196]	@ (8000bfc <HAL_InitTick+0xe8>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b40:	f107 0210 	add.w	r2, r7, #16
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f002 fd0e 	bl	800356c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b50:	6a3b      	ldr	r3, [r7, #32]
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b5a:	f002 fcdf 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8000b5e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b60:	e004      	b.n	8000b6c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b62:	f002 fcdb 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8000b66:	4603      	mov	r3, r0
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b6e:	4a24      	ldr	r2, [pc, #144]	@ (8000c00 <HAL_InitTick+0xec>)
 8000b70:	fba2 2303 	umull	r2, r3, r2, r3
 8000b74:	0c9b      	lsrs	r3, r3, #18
 8000b76:	3b01      	subs	r3, #1
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000b7a:	4b22      	ldr	r3, [pc, #136]	@ (8000c04 <HAL_InitTick+0xf0>)
 8000b7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000b82:	4b20      	ldr	r3, [pc, #128]	@ (8000c04 <HAL_InitTick+0xf0>)
 8000b84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b88:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c04 <HAL_InitTick+0xf0>)
 8000b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b8e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <HAL_InitTick+0xf0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	@ (8000c04 <HAL_InitTick+0xf0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <HAL_InitTick+0xf0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000ba2:	4818      	ldr	r0, [pc, #96]	@ (8000c04 <HAL_InitTick+0xf0>)
 8000ba4:	f003 fadf 	bl	8004166 <HAL_TIM_Base_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d11b      	bne.n	8000bee <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000bb6:	4813      	ldr	r0, [pc, #76]	@ (8000c04 <HAL_InitTick+0xf0>)
 8000bb8:	f003 fb2e 	bl	8004218 <HAL_TIM_Base_Start_IT>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bc2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d111      	bne.n	8000bee <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bca:	201c      	movs	r0, #28
 8000bcc:	f000 fbc9 	bl	8001362 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b0f      	cmp	r3, #15
 8000bd4:	d808      	bhi.n	8000be8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	201c      	movs	r0, #28
 8000bdc:	f000 fba5 	bl	800132a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be0:	4a09      	ldr	r2, [pc, #36]	@ (8000c08 <HAL_InitTick+0xf4>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e002      	b.n	8000bee <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3738      	adds	r7, #56	@ 0x38
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	431bde83 	.word	0x431bde83
 8000c04:	200001f0 	.word	0x200001f0
 8000c08:	20000004 	.word	0x20000004

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <NMI_Handler+0x4>

08000c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <MemManage_Handler+0x4>

08000c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <TIM1_CC_IRQHandler+0x10>)
 8000c4a:	f003 fb96 	bl	800437a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000238 	.word	0x20000238

08000c58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <TIM2_IRQHandler+0x10>)
 8000c5e:	f003 fb8c 	bl	800437a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200001f0 	.word	0x200001f0

08000c6c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c70:	4802      	ldr	r0, [pc, #8]	@ (8000c7c <SPI1_IRQHandler+0x10>)
 8000c72:	f002 fe5d 	bl	8003930 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000198 	.word	0x20000198

08000c80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <USART1_IRQHandler+0x10>)
 8000c86:	f004 f93f 	bl	8004f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000280 	.word	0x20000280

08000c94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <USART2_IRQHandler+0x10>)
 8000c9a:	f004 f935 	bl	8004f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200002c8 	.word	0x200002c8

08000ca8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <OTG_FS_IRQHandler+0x10>)
 8000cae:	f000 fef6 	bl	8001a9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200059dc 	.word	0x200059dc

08000cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b092      	sub	sp, #72	@ 0x48
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
 8000d00:	615a      	str	r2, [r3, #20]
 8000d02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2220      	movs	r2, #32
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f00c fc90 	bl	800d630 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d10:	4b33      	ldr	r3, [pc, #204]	@ (8000de0 <MX_TIM1_Init+0x100>)
 8000d12:	4a34      	ldr	r2, [pc, #208]	@ (8000de4 <MX_TIM1_Init+0x104>)
 8000d14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840-1;
 8000d16:	4b32      	ldr	r3, [pc, #200]	@ (8000de0 <MX_TIM1_Init+0x100>)
 8000d18:	f240 3247 	movw	r2, #839	@ 0x347
 8000d1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b30      	ldr	r3, [pc, #192]	@ (8000de0 <MX_TIM1_Init+0x100>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8000d24:	4b2e      	ldr	r3, [pc, #184]	@ (8000de0 <MX_TIM1_Init+0x100>)
 8000d26:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000d2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000de0 <MX_TIM1_Init+0x100>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d32:	4b2b      	ldr	r3, [pc, #172]	@ (8000de0 <MX_TIM1_Init+0x100>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b29      	ldr	r3, [pc, #164]	@ (8000de0 <MX_TIM1_Init+0x100>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d3e:	4828      	ldr	r0, [pc, #160]	@ (8000de0 <MX_TIM1_Init+0x100>)
 8000d40:	f003 facc 	bl	80042dc <HAL_TIM_PWM_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f7ff fe2e 	bl	80009aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4820      	ldr	r0, [pc, #128]	@ (8000de0 <MX_TIM1_Init+0x100>)
 8000d5e:	f003 feff 	bl	8004b60 <HAL_TIMEx_MasterConfigSynchronization>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000d68:	f7ff fe1f 	bl	80009aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6c:	2360      	movs	r3, #96	@ 0x60
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d84:	2300      	movs	r3, #0
 8000d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4813      	ldr	r0, [pc, #76]	@ (8000de0 <MX_TIM1_Init+0x100>)
 8000d92:	f003 fbe3 	bl	800455c <HAL_TIM_PWM_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000d9c:	f7ff fe05 	bl	80009aa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000db4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4807      	ldr	r0, [pc, #28]	@ (8000de0 <MX_TIM1_Init+0x100>)
 8000dc4:	f003 ff3a 	bl	8004c3c <HAL_TIMEx_ConfigBreakDeadTime>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000dce:	f7ff fdec 	bl	80009aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dd2:	4803      	ldr	r0, [pc, #12]	@ (8000de0 <MX_TIM1_Init+0x100>)
 8000dd4:	f000 f830 	bl	8000e38 <HAL_TIM_MspPostInit>

}
 8000dd8:	bf00      	nop
 8000dda:	3748      	adds	r7, #72	@ 0x48
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000238 	.word	0x20000238
 8000de4:	40010000 	.word	0x40010000

08000de8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0e      	ldr	r2, [pc, #56]	@ (8000e30 <HAL_TIM_PWM_MspInit+0x48>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d115      	bne.n	8000e26 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000e34 <HAL_TIM_PWM_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	4a0c      	ldr	r2, [pc, #48]	@ (8000e34 <HAL_TIM_PWM_MspInit+0x4c>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <HAL_TIM_PWM_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2105      	movs	r1, #5
 8000e1a:	201b      	movs	r0, #27
 8000e1c:	f000 fa85 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e20:	201b      	movs	r0, #27
 8000e22:	f000 fa9e 	bl	8001362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40010000 	.word	0x40010000
 8000e34:	40023800 	.word	0x40023800

08000e38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a12      	ldr	r2, [pc, #72]	@ (8000ea0 <HAL_TIM_MspPostInit+0x68>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d11e      	bne.n	8000e98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <HAL_TIM_MspPostInit+0x6c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a10      	ldr	r2, [pc, #64]	@ (8000ea4 <HAL_TIM_MspPostInit+0x6c>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <HAL_TIM_MspPostInit+0x6c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 8000e76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <HAL_TIM_MspPostInit+0x70>)
 8000e94:	f000 fb0a 	bl	80014ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020000 	.word	0x40020000

08000eac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <MX_USART1_UART_Init+0x50>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000eb8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ebc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ee4:	f003 ff10 	bl	8004d08 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eee:	f7ff fd5c 	bl	80009aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000280 	.word	0x20000280
 8000efc:	40011000 	.word	0x40011000

08000f00 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <MX_USART2_UART_Init+0x50>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f38:	f003 fee6 	bl	8004d08 <HAL_UART_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f42:	f7ff fd32 	bl	80009aa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200002c8 	.word	0x200002c8
 8000f50:	40004400 	.word	0x40004400

08000f54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	@ 0x30
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a3a      	ldr	r2, [pc, #232]	@ (800105c <HAL_UART_MspInit+0x108>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d135      	bne.n	8000fe2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	4b39      	ldr	r3, [pc, #228]	@ (8001060 <HAL_UART_MspInit+0x10c>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	4a38      	ldr	r2, [pc, #224]	@ (8001060 <HAL_UART_MspInit+0x10c>)
 8000f80:	f043 0310 	orr.w	r3, r3, #16
 8000f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f86:	4b36      	ldr	r3, [pc, #216]	@ (8001060 <HAL_UART_MspInit+0x10c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	f003 0310 	and.w	r3, r3, #16
 8000f8e:	61bb      	str	r3, [r7, #24]
 8000f90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	4b32      	ldr	r3, [pc, #200]	@ (8001060 <HAL_UART_MspInit+0x10c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a31      	ldr	r2, [pc, #196]	@ (8001060 <HAL_UART_MspInit+0x10c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b2f      	ldr	r3, [pc, #188]	@ (8001060 <HAL_UART_MspInit+0x10c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4826      	ldr	r0, [pc, #152]	@ (8001064 <HAL_UART_MspInit+0x110>)
 8000fcc:	f000 fa6e 	bl	80014ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	2025      	movs	r0, #37	@ 0x25
 8000fd6:	f000 f9a8 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fda:	2025      	movs	r0, #37	@ 0x25
 8000fdc:	f000 f9c1 	bl	8001362 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fe0:	e038      	b.n	8001054 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a20      	ldr	r2, [pc, #128]	@ (8001068 <HAL_UART_MspInit+0x114>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d133      	bne.n	8001054 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <HAL_UART_MspInit+0x10c>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8001060 <HAL_UART_MspInit+0x10c>)
 8000ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <HAL_UART_MspInit+0x10c>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <HAL_UART_MspInit+0x10c>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001010:	4a13      	ldr	r2, [pc, #76]	@ (8001060 <HAL_UART_MspInit+0x10c>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6313      	str	r3, [r2, #48]	@ 0x30
 8001018:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <HAL_UART_MspInit+0x10c>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001024:	230c      	movs	r3, #12
 8001026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001034:	2307      	movs	r3, #7
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	4809      	ldr	r0, [pc, #36]	@ (8001064 <HAL_UART_MspInit+0x110>)
 8001040:	f000 fa34 	bl	80014ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2105      	movs	r1, #5
 8001048:	2026      	movs	r0, #38	@ 0x26
 800104a:	f000 f96e 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800104e:	2026      	movs	r0, #38	@ 0x26
 8001050:	f000 f987 	bl	8001362 <HAL_NVIC_EnableIRQ>
}
 8001054:	bf00      	nop
 8001056:	3730      	adds	r7, #48	@ 0x30
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40011000 	.word	0x40011000
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000
 8001068:	40004400 	.word	0x40004400

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001070:	f7ff fe24 	bl	8000cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	@ (80010ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	@ (80010b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109a:	f00c fb27 	bl	800d6ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109e:	f7ff fbdf 	bl	8000860 <main>
  bx  lr    
 80010a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 80010b0:	0800d9e0 	.word	0x0800d9e0
  ldr r2, =_sbss
 80010b4:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80010b8:	20006220 	.word	0x20006220

080010bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <HAL_Init+0x40>)
 80010ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <HAL_Init+0x40>)
 80010d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	@ (8001100 <HAL_Init+0x40>)
 80010e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 f913 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ee:	200f      	movs	r0, #15
 80010f0:	f7ff fd10 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f4:	f7ff fce2 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023c00 	.word	0x40023c00

08001104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_IncTick+0x20>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_IncTick+0x24>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a04      	ldr	r2, [pc, #16]	@ (8001128 <HAL_IncTick+0x24>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008
 8001128:	20000310 	.word	0x20000310

0800112c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <HAL_GetTick+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000310 	.word	0x20000310

08001144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff ffee 	bl	800112c <HAL_GetTick>
 8001150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115c:	d005      	beq.n	800116a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_Delay+0x44>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116a:	bf00      	nop
 800116c:	f7ff ffde 	bl	800112c <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8f7      	bhi.n	800116c <HAL_Delay+0x28>
  {
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	@ (8001228 <__NVIC_EnableIRQ+0x38>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	@ (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	@ (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	@ 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	@ 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80012ec:	f3bf 8f4f 	dsb	sy
}
 80012f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <__NVIC_SystemReset+0x24>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012fa:	4904      	ldr	r1, [pc, #16]	@ (800130c <__NVIC_SystemReset+0x24>)
 80012fc:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <__NVIC_SystemReset+0x28>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001302:	f3bf 8f4f 	dsb	sy
}
 8001306:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <__NVIC_SystemReset+0x20>
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	05fa0004 	.word	0x05fa0004

08001314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff35 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff4a 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ff9a 	bl	8001280 <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff69 	bl	800122c <__NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff3d 	bl	80011f0 <__NVIC_EnableIRQ>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001382:	f7ff ffb1 	bl	80012e8 <__NVIC_SystemReset>

08001386 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001392:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff feca 	bl	800112c <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d008      	beq.n	80013b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2280      	movs	r2, #128	@ 0x80
 80013aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e052      	b.n	800145e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0216 	bic.w	r2, r2, #22
 80013c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	695a      	ldr	r2, [r3, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d103      	bne.n	80013e8 <HAL_DMA_Abort+0x62>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d007      	beq.n	80013f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0208 	bic.w	r2, r2, #8
 80013f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001408:	e013      	b.n	8001432 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800140a:	f7ff fe8f 	bl	800112c <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b05      	cmp	r3, #5
 8001416:	d90c      	bls.n	8001432 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2220      	movs	r2, #32
 800141c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2203      	movs	r2, #3
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e015      	b.n	800145e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1e4      	bne.n	800140a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001444:	223f      	movs	r2, #63	@ 0x3f
 8001446:	409a      	lsls	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d004      	beq.n	8001484 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2280      	movs	r2, #128	@ 0x80
 800147e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e00c      	b.n	800149e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2205      	movs	r2, #5
 8001488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	@ 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
 80014c6:	e159      	b.n	800177c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014c8:	2201      	movs	r2, #1
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	f040 8148 	bne.w	8001776 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d005      	beq.n	80014fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d130      	bne.n	8001560 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001534:	2201      	movs	r2, #1
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	f003 0201 	and.w	r2, r3, #1
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b03      	cmp	r3, #3
 800156a:	d017      	beq.n	800159c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d123      	bne.n	80015f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	08da      	lsrs	r2, r3, #3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3208      	adds	r2, #8
 80015b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	08da      	lsrs	r2, r3, #3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3208      	adds	r2, #8
 80015ea:	69b9      	ldr	r1, [r7, #24]
 80015ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	2203      	movs	r2, #3
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0203 	and.w	r2, r3, #3
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80a2 	beq.w	8001776 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b57      	ldr	r3, [pc, #348]	@ (8001794 <HAL_GPIO_Init+0x2e8>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	4a56      	ldr	r2, [pc, #344]	@ (8001794 <HAL_GPIO_Init+0x2e8>)
 800163c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001640:	6453      	str	r3, [r2, #68]	@ 0x44
 8001642:	4b54      	ldr	r3, [pc, #336]	@ (8001794 <HAL_GPIO_Init+0x2e8>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800164e:	4a52      	ldr	r2, [pc, #328]	@ (8001798 <HAL_GPIO_Init+0x2ec>)
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3302      	adds	r3, #2
 8001656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	220f      	movs	r2, #15
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a49      	ldr	r2, [pc, #292]	@ (800179c <HAL_GPIO_Init+0x2f0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d019      	beq.n	80016ae <HAL_GPIO_Init+0x202>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a48      	ldr	r2, [pc, #288]	@ (80017a0 <HAL_GPIO_Init+0x2f4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d013      	beq.n	80016aa <HAL_GPIO_Init+0x1fe>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a47      	ldr	r2, [pc, #284]	@ (80017a4 <HAL_GPIO_Init+0x2f8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d00d      	beq.n	80016a6 <HAL_GPIO_Init+0x1fa>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a46      	ldr	r2, [pc, #280]	@ (80017a8 <HAL_GPIO_Init+0x2fc>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d007      	beq.n	80016a2 <HAL_GPIO_Init+0x1f6>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a45      	ldr	r2, [pc, #276]	@ (80017ac <HAL_GPIO_Init+0x300>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d101      	bne.n	800169e <HAL_GPIO_Init+0x1f2>
 800169a:	2304      	movs	r3, #4
 800169c:	e008      	b.n	80016b0 <HAL_GPIO_Init+0x204>
 800169e:	2307      	movs	r3, #7
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x204>
 80016a2:	2303      	movs	r3, #3
 80016a4:	e004      	b.n	80016b0 <HAL_GPIO_Init+0x204>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_Init+0x204>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_GPIO_Init+0x204>
 80016ae:	2300      	movs	r3, #0
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	f002 0203 	and.w	r2, r2, #3
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	4093      	lsls	r3, r2
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c0:	4935      	ldr	r1, [pc, #212]	@ (8001798 <HAL_GPIO_Init+0x2ec>)
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ce:	4b38      	ldr	r3, [pc, #224]	@ (80017b0 <HAL_GPIO_Init+0x304>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016f2:	4a2f      	ldr	r2, [pc, #188]	@ (80017b0 <HAL_GPIO_Init+0x304>)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f8:	4b2d      	ldr	r3, [pc, #180]	@ (80017b0 <HAL_GPIO_Init+0x304>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800171c:	4a24      	ldr	r2, [pc, #144]	@ (80017b0 <HAL_GPIO_Init+0x304>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001722:	4b23      	ldr	r3, [pc, #140]	@ (80017b0 <HAL_GPIO_Init+0x304>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001746:	4a1a      	ldr	r2, [pc, #104]	@ (80017b0 <HAL_GPIO_Init+0x304>)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <HAL_GPIO_Init+0x304>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001770:	4a0f      	ldr	r2, [pc, #60]	@ (80017b0 <HAL_GPIO_Init+0x304>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3301      	adds	r3, #1
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2b0f      	cmp	r3, #15
 8001780:	f67f aea2 	bls.w	80014c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3724      	adds	r7, #36	@ 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40013800 	.word	0x40013800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40020800 	.word	0x40020800
 80017a8:	40020c00 	.word	0x40020c00
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40013c00 	.word	0x40013c00

080017b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e001      	b.n	80017d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
 80017f0:	4613      	mov	r3, r2
 80017f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f4:	787b      	ldrb	r3, [r7, #1]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001800:	e003      	b.n	800180a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	041a      	lsls	r2, r3, #16
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	619a      	str	r2, [r3, #24]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af02      	add	r7, sp, #8
 800181c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e101      	b.n	8001a2c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d106      	bne.n	8001848 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f00b fbea 	bl	800d01c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2203      	movs	r2, #3
 800184c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001856:	d102      	bne.n	800185e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f004 fbbd 	bl	8005fe2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7c1a      	ldrb	r2, [r3, #16]
 8001870:	f88d 2000 	strb.w	r2, [sp]
 8001874:	3304      	adds	r3, #4
 8001876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001878:	f004 fa9c 	bl	8005db4 <USB_CoreInit>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2202      	movs	r2, #2
 8001886:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0ce      	b.n	8001a2c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f004 fbb5 	bl	8006004 <USB_SetCurrentMode>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2202      	movs	r2, #2
 80018a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0bf      	b.n	8001a2c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e04a      	b.n	8001948 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	3315      	adds	r3, #21
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018c6:	7bfa      	ldrb	r2, [r7, #15]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	3314      	adds	r3, #20
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	b298      	uxth	r0, r3
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	332e      	adds	r3, #46	@ 0x2e
 80018ee:	4602      	mov	r2, r0
 80018f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3318      	adds	r3, #24
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	331c      	adds	r3, #28
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3320      	adds	r3, #32
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	3324      	adds	r3, #36	@ 0x24
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	3301      	adds	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	791b      	ldrb	r3, [r3, #4]
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	429a      	cmp	r2, r3
 8001950:	d3af      	bcc.n	80018b2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	e044      	b.n	80019e2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800199a:	7bfa      	ldrb	r2, [r7, #15]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	3301      	adds	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	791b      	ldrb	r3, [r3, #4]
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d3b5      	bcc.n	8001958 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7c1a      	ldrb	r2, [r3, #16]
 80019f4:	f88d 2000 	strb.w	r2, [sp]
 80019f8:	3304      	adds	r3, #4
 80019fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019fc:	f004 fb4e 	bl	800609c <USB_DevInit>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00c      	b.n	8001a2c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f005 fb98 	bl	800715a <USB_DevDisconnect>

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_PCD_Start+0x1c>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e022      	b.n	8001a96 <HAL_PCD_Start+0x62>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d009      	beq.n	8001a78 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d105      	bne.n	8001a78 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f004 fa9f 	bl	8005fc0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f005 fb46 	bl	8007118 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a9e:	b590      	push	{r4, r7, lr}
 8001aa0:	b08d      	sub	sp, #52	@ 0x34
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f005 fc04 	bl	80072c2 <USB_GetMode>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f040 848c 	bne.w	80023da <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f005 fb68 	bl	800719c <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8482 	beq.w	80023d8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f005 fb55 	bl	800719c <USB_ReadInterrupts>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d107      	bne.n	8001b0c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	695a      	ldr	r2, [r3, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f002 0202 	and.w	r2, r2, #2
 8001b0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f005 fb43 	bl	800719c <USB_ReadInterrupts>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b10      	cmp	r3, #16
 8001b1e:	d161      	bne.n	8001be4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699a      	ldr	r2, [r3, #24]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0210 	bic.w	r2, r2, #16
 8001b2e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	f003 020f 	and.w	r2, r3, #15
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	0c5b      	lsrs	r3, r3, #17
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d124      	bne.n	8001ba6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d035      	beq.n	8001bd4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6a38      	ldr	r0, [r7, #32]
 8001b7c:	f005 f97a 	bl	8006e74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b8c:	441a      	add	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b9e:	441a      	add	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	615a      	str	r2, [r3, #20]
 8001ba4:	e016      	b.n	8001bd4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	0c5b      	lsrs	r3, r3, #17
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d110      	bne.n	8001bd4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001bb8:	2208      	movs	r2, #8
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6a38      	ldr	r0, [r7, #32]
 8001bbe:	f005 f959 	bl	8006e74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bce:	441a      	add	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0210 	orr.w	r2, r2, #16
 8001be2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f005 fad7 	bl	800719c <USB_ReadInterrupts>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bf4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001bf8:	f040 80a7 	bne.w	8001d4a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f005 fadc 	bl	80071c2 <USB_ReadDevAllOutEpInterrupt>
 8001c0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001c0c:	e099      	b.n	8001d42 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 808e 	beq.w	8001d36 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f005 fb00 	bl	800722a <USB_ReadDevOutEPInterrupt>
 8001c2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00c      	beq.n	8001c50 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c42:	461a      	mov	r2, r3
 8001c44:	2301      	movs	r3, #1
 8001c46:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fea4 	bl	8002998 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00c      	beq.n	8001c74 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c66:	461a      	mov	r2, r3
 8001c68:	2308      	movs	r3, #8
 8001c6a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 ff7a 	bl	8002b68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d008      	beq.n	8001c90 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	015a      	lsls	r2, r3, #5
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	2310      	movs	r3, #16
 8001c8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d030      	beq.n	8001cfc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca2:	2b80      	cmp	r3, #128	@ 0x80
 8001ca4:	d109      	bne.n	8001cba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cb8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	3304      	adds	r3, #4
 8001cce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	78db      	ldrb	r3, [r3, #3]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d108      	bne.n	8001cea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f00b fa95 	bl	800d214 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d008      	beq.n	8001d18 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d12:	461a      	mov	r2, r3
 8001d14:	2320      	movs	r3, #32
 8001d16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d34:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	3301      	adds	r3, #1
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3e:	085b      	lsrs	r3, r3, #1
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f47f af62 	bne.w	8001c0e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f005 fa24 	bl	800719c <USB_ReadInterrupts>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001d5e:	f040 80db 	bne.w	8001f18 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f005 fa45 	bl	80071f6 <USB_ReadDevAllInEpInterrupt>
 8001d6c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001d72:	e0cd      	b.n	8001f10 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80c2 	beq.w	8001f04 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f005 fa6b 	bl	8007266 <USB_ReadDevInEPInterrupt>
 8001d90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d057      	beq.n	8001e4c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	2201      	movs	r2, #1
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001db0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69f9      	ldr	r1, [r7, #28]
 8001db8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	015a      	lsls	r2, r3, #5
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dcc:	461a      	mov	r2, r3
 8001dce:	2301      	movs	r3, #1
 8001dd0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	799b      	ldrb	r3, [r3, #6]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d132      	bne.n	8001e40 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	3320      	adds	r3, #32
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4403      	add	r3, r0
 8001dfa:	331c      	adds	r3, #28
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4419      	add	r1, r3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4403      	add	r3, r0
 8001e0e:	3320      	adds	r3, #32
 8001e10:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d113      	bne.n	8001e40 <HAL_PCD_IRQHandler+0x3a2>
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	3324      	adds	r3, #36	@ 0x24
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d108      	bne.n	8001e40 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e38:	461a      	mov	r2, r3
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	f005 fa72 	bl	8007324 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	4619      	mov	r1, r3
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f00b f969 	bl	800d11e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d008      	beq.n	8001e68 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e62:	461a      	mov	r2, r3
 8001e64:	2308      	movs	r3, #8
 8001e66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d008      	beq.n	8001e84 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2310      	movs	r3, #16
 8001e82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2340      	movs	r3, #64	@ 0x40
 8001e9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d023      	beq.n	8001ef2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001eaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001eac:	6a38      	ldr	r0, [r7, #32]
 8001eae:	f004 fa59 	bl	8006364 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	3310      	adds	r3, #16
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	78db      	ldrb	r3, [r3, #3]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d108      	bne.n	8001ee0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f00b f9ac 	bl	800d238 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001eec:	461a      	mov	r2, r3
 8001eee:	2302      	movs	r3, #2
 8001ef0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001efc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fcbd 	bl	800287e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f06:	3301      	adds	r3, #1
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f47f af2e 	bne.w	8001d74 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f005 f93d 	bl	800719c <USB_ReadInterrupts>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f2c:	d122      	bne.n	8001f74 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d108      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f54:	2100      	movs	r1, #0
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 fea4 	bl	8002ca4 <HAL_PCDEx_LPM_Callback>
 8001f5c:	e002      	b.n	8001f64 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f00b f94a 	bl	800d1f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001f72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f005 f90f 	bl	800719c <USB_ReadInterrupts>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f88:	d112      	bne.n	8001fb0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d102      	bne.n	8001fa0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f00b f906 	bl	800d1ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695a      	ldr	r2, [r3, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001fae:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f005 f8f1 	bl	800719c <USB_ReadInterrupts>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fc4:	f040 80b7 	bne.w	8002136 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2110      	movs	r1, #16
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 f9be 	bl	8006364 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fec:	e046      	b.n	800207c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002000:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002012:	0151      	lsls	r1, r2, #5
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	440a      	add	r2, r1
 8002018:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800201c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002020:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800202e:	461a      	mov	r2, r3
 8002030:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002034:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002046:	0151      	lsls	r1, r2, #5
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	440a      	add	r2, r1
 800204c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002050:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002054:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	4413      	add	r3, r2
 800205e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002066:	0151      	lsls	r1, r2, #5
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	440a      	add	r2, r1
 800206c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002070:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002074:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002078:	3301      	adds	r3, #1
 800207a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	791b      	ldrb	r3, [r3, #4]
 8002080:	461a      	mov	r2, r3
 8002082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002084:	4293      	cmp	r3, r2
 8002086:	d3b2      	bcc.n	8001fee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002096:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800209a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7bdb      	ldrb	r3, [r3, #15]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d016      	beq.n	80020d2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020b4:	f043 030b 	orr.w	r3, r3, #11
 80020b8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020ca:	f043 030b 	orr.w	r3, r3, #11
 80020ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d0:	e015      	b.n	80020fe <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020e4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80020e8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020f8:	f043 030b 	orr.w	r3, r3, #11
 80020fc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800210c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002110:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002120:	461a      	mov	r2, r3
 8002122:	f005 f8ff 	bl	8007324 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f005 f82e 	bl	800719c <USB_ReadInterrupts>
 8002140:	4603      	mov	r3, r0
 8002142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800214a:	d123      	bne.n	8002194 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f005 f8c4 	bl	80072de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f004 f97b 	bl	8006456 <USB_GetDevSpeed>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681c      	ldr	r4, [r3, #0]
 800216c:	f001 f9ca 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8002170:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002176:	461a      	mov	r2, r3
 8002178:	4620      	mov	r0, r4
 800217a:	f003 fe7f 	bl	8005e7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f00a fff5 	bl	800d16e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002192:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f004 ffff 	bl	800719c <USB_ReadInterrupts>
 800219e:	4603      	mov	r3, r0
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d10a      	bne.n	80021be <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f00a ffd2 	bl	800d152 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f002 0208 	and.w	r2, r2, #8
 80021bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f004 ffea 	bl	800719c <USB_ReadInterrupts>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ce:	2b80      	cmp	r3, #128	@ 0x80
 80021d0:	d123      	bne.n	800221a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021de:	2301      	movs	r3, #1
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021e2:	e014      	b.n	800220e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4619      	mov	r1, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fb0a 	bl	800281c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	3301      	adds	r3, #1
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	791b      	ldrb	r3, [r3, #4]
 8002212:	461a      	mov	r2, r3
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	4293      	cmp	r3, r2
 8002218:	d3e4      	bcc.n	80021e4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f004 ffbc 	bl	800719c <USB_ReadInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800222a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800222e:	d13c      	bne.n	80022aa <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002230:	2301      	movs	r3, #1
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
 8002234:	e02b      	b.n	800228e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	4413      	add	r3, r2
 800223e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	3318      	adds	r3, #24
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d115      	bne.n	8002288 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800225c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800225e:	2b00      	cmp	r3, #0
 8002260:	da12      	bge.n	8002288 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	3317      	adds	r3, #23
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	b2db      	uxtb	r3, r3
 800227a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800227e:	b2db      	uxtb	r3, r3
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 faca 	bl	800281c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	3301      	adds	r3, #1
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	791b      	ldrb	r3, [r3, #4]
 8002292:	461a      	mov	r2, r3
 8002294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002296:	4293      	cmp	r3, r2
 8002298:	d3cd      	bcc.n	8002236 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80022a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f004 ff74 	bl	800719c <USB_ReadInterrupts>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022be:	d156      	bne.n	800236e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022c0:	2301      	movs	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80022c4:	e045      	b.n	8002352 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d12e      	bne.n	800234c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da2b      	bge.n	800234c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002300:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002304:	429a      	cmp	r2, r3
 8002306:	d121      	bne.n	800234c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10a      	bne.n	800234c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002344:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002348:	6053      	str	r3, [r2, #4]
            break;
 800234a:	e008      	b.n	800235e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	3301      	adds	r3, #1
 8002350:	627b      	str	r3, [r7, #36]	@ 0x24
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	791b      	ldrb	r3, [r3, #4]
 8002356:	461a      	mov	r2, r3
 8002358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235a:	4293      	cmp	r3, r2
 800235c:	d3b3      	bcc.n	80022c6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800236c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f004 ff12 	bl	800719c <USB_ReadInterrupts>
 8002378:	4603      	mov	r3, r0
 800237a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800237e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002382:	d10a      	bne.n	800239a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f00a ff69 	bl	800d25c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002398:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f004 fefc 	bl	800719c <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d115      	bne.n	80023da <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f00a ff59 	bl	800d278 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	e000      	b.n	80023da <HAL_PCD_IRQHandler+0x93c>
      return;
 80023d8:	bf00      	nop
    }
  }
}
 80023da:	3734      	adds	r7, #52	@ 0x34
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd90      	pop	{r4, r7, pc}

080023e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_PCD_SetAddress+0x1a>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e012      	b.n	8002420 <HAL_PCD_SetAddress+0x40>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f004 fe5b 	bl	80070cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4603      	mov	r3, r0
 8002438:	70fb      	strb	r3, [r7, #3]
 800243a:	460b      	mov	r3, r1
 800243c:	803b      	strh	r3, [r7, #0]
 800243e:	4613      	mov	r3, r2
 8002440:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800244a:	2b00      	cmp	r3, #0
 800244c:	da0f      	bge.n	800246e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	f003 020f 	and.w	r2, r3, #15
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	3310      	adds	r3, #16
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	3304      	adds	r3, #4
 8002464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	705a      	strb	r2, [r3, #1]
 800246c:	e00f      	b.n	800248e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	f003 020f 	and.w	r2, r3, #15
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	4413      	add	r3, r2
 8002484:	3304      	adds	r3, #4
 8002486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800249a:	883b      	ldrh	r3, [r7, #0]
 800249c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	78ba      	ldrb	r2, [r7, #2]
 80024a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	785b      	ldrb	r3, [r3, #1]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d004      	beq.n	80024bc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024bc:	78bb      	ldrb	r3, [r7, #2]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d102      	bne.n	80024c8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_PCD_EP_Open+0xae>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e00e      	b.n	80024f4 <HAL_PCD_EP_Open+0xcc>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68f9      	ldr	r1, [r7, #12]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 ffdb 	bl	80064a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80024f2:	7afb      	ldrb	r3, [r7, #11]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800250c:	2b00      	cmp	r3, #0
 800250e:	da0f      	bge.n	8002530 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	f003 020f 	and.w	r2, r3, #15
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	3310      	adds	r3, #16
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	4413      	add	r3, r2
 8002524:	3304      	adds	r3, #4
 8002526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	705a      	strb	r2, [r3, #1]
 800252e:	e00f      	b.n	8002550 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	f003 020f 	and.w	r2, r3, #15
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	3304      	adds	r3, #4
 8002548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	b2da      	uxtb	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_PCD_EP_Close+0x6e>
 8002566:	2302      	movs	r3, #2
 8002568:	e00e      	b.n	8002588 <HAL_PCD_EP_Close+0x8c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68f9      	ldr	r1, [r7, #12]
 8002578:	4618      	mov	r0, r3
 800257a:	f004 f819 	bl	80065b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	460b      	mov	r3, r1
 800259e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025a0:	7afb      	ldrb	r3, [r7, #11]
 80025a2:	f003 020f 	and.w	r2, r3, #15
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4413      	add	r3, r2
 80025b6:	3304      	adds	r3, #4
 80025b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2200      	movs	r2, #0
 80025ca:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2200      	movs	r2, #0
 80025d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025d2:	7afb      	ldrb	r3, [r7, #11]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	799b      	ldrb	r3, [r3, #6]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d102      	bne.n	80025ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	799b      	ldrb	r3, [r3, #6]
 80025f4:	461a      	mov	r2, r3
 80025f6:	6979      	ldr	r1, [r7, #20]
 80025f8:	f004 f8b6 	bl	8006768 <USB_EPStartXfer>

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	460b      	mov	r3, r1
 8002610:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	f003 020f 	and.w	r2, r3, #15
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002628:	681b      	ldr	r3, [r3, #0]
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	460b      	mov	r3, r1
 8002644:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002646:	7afb      	ldrb	r3, [r7, #11]
 8002648:	f003 020f 	and.w	r2, r3, #15
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	3310      	adds	r3, #16
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4413      	add	r3, r2
 800265a:	3304      	adds	r3, #4
 800265c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2200      	movs	r2, #0
 800266e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2201      	movs	r2, #1
 8002674:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002676:	7afb      	ldrb	r3, [r7, #11]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	b2da      	uxtb	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	799b      	ldrb	r3, [r3, #6]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d102      	bne.n	8002690 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	799b      	ldrb	r3, [r3, #6]
 8002698:	461a      	mov	r2, r3
 800269a:	6979      	ldr	r1, [r7, #20]
 800269c:	f004 f864 	bl	8006768 <USB_EPStartXfer>

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	7912      	ldrb	r2, [r2, #4]
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e04f      	b.n	8002768 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	da0f      	bge.n	80026f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	f003 020f 	and.w	r2, r3, #15
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	3310      	adds	r3, #16
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	3304      	adds	r3, #4
 80026e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	705a      	strb	r2, [r3, #1]
 80026ee:	e00d      	b.n	800270c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	3304      	adds	r3, #4
 8002704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	b2da      	uxtb	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_PCD_EP_SetStall+0x82>
 8002728:	2302      	movs	r3, #2
 800272a:	e01d      	b.n	8002768 <HAL_PCD_EP_SetStall+0xbe>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68f9      	ldr	r1, [r7, #12]
 800273a:	4618      	mov	r0, r3
 800273c:	f004 fbf2 	bl	8006f24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	7999      	ldrb	r1, [r3, #6]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002758:	461a      	mov	r2, r3
 800275a:	f004 fde3 	bl	8007324 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	7912      	ldrb	r2, [r2, #4]
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e042      	b.n	8002814 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800278e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002792:	2b00      	cmp	r3, #0
 8002794:	da0f      	bge.n	80027b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	f003 020f 	and.w	r2, r3, #15
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	3310      	adds	r3, #16
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	3304      	adds	r3, #4
 80027ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	705a      	strb	r2, [r3, #1]
 80027b4:	e00f      	b.n	80027d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	f003 020f 	and.w	r2, r3, #15
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	4413      	add	r3, r2
 80027cc:	3304      	adds	r3, #4
 80027ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_PCD_EP_ClrStall+0x86>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e00e      	b.n	8002814 <HAL_PCD_EP_ClrStall+0xa4>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68f9      	ldr	r1, [r7, #12]
 8002804:	4618      	mov	r0, r3
 8002806:	f004 fbfb 	bl	8007000 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800282c:	2b00      	cmp	r3, #0
 800282e:	da0c      	bge.n	800284a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	f003 020f 	and.w	r2, r3, #15
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	3310      	adds	r3, #16
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	4413      	add	r3, r2
 8002844:	3304      	adds	r3, #4
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e00c      	b.n	8002864 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	f003 020f 	and.w	r2, r3, #15
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	4413      	add	r3, r2
 8002860:	3304      	adds	r3, #4
 8002862:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68f9      	ldr	r1, [r7, #12]
 800286a:	4618      	mov	r0, r3
 800286c:	f004 fa1a 	bl	8006ca4 <USB_EPStopXfer>
 8002870:	4603      	mov	r3, r0
 8002872:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002874:	7afb      	ldrb	r3, [r7, #11]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b08a      	sub	sp, #40	@ 0x28
 8002882:	af02      	add	r7, sp, #8
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	3310      	adds	r3, #16
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	3304      	adds	r3, #4
 80028a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d901      	bls.n	80028b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06b      	b.n	800298e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d902      	bls.n	80028d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3303      	adds	r3, #3
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028da:	e02a      	b.n	8002932 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d902      	bls.n	80028f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	3303      	adds	r3, #3
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	68d9      	ldr	r1, [r3, #12]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	b2da      	uxtb	r2, r3
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	4603      	mov	r3, r0
 8002914:	6978      	ldr	r0, [r7, #20]
 8002916:	f004 fa6f 	bl	8006df8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	441a      	add	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	441a      	add	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	429a      	cmp	r2, r3
 8002946:	d809      	bhi.n	800295c <PCD_WriteEmptyTxFifo+0xde>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002950:	429a      	cmp	r2, r3
 8002952:	d203      	bcs.n	800295c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1bf      	bne.n	80028dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	429a      	cmp	r2, r3
 8002966:	d811      	bhi.n	800298c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	2201      	movs	r2, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800297c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	43db      	mvns	r3, r3
 8002982:	6939      	ldr	r1, [r7, #16]
 8002984:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002988:	4013      	ands	r3, r2
 800298a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	333c      	adds	r3, #60	@ 0x3c
 80029b0:	3304      	adds	r3, #4
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	799b      	ldrb	r3, [r3, #6]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d17b      	bne.n	8002ac6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	4a61      	ldr	r2, [pc, #388]	@ (8002b60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	f240 80b9 	bls.w	8002b54 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80b3 	beq.w	8002b54 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029fa:	461a      	mov	r2, r3
 80029fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a00:	6093      	str	r3, [r2, #8]
 8002a02:	e0a7      	b.n	8002b54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d009      	beq.n	8002a22 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2320      	movs	r3, #32
 8002a1e:	6093      	str	r3, [r2, #8]
 8002a20:	e098      	b.n	8002b54 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f040 8093 	bne.w	8002b54 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	4a4b      	ldr	r2, [pc, #300]	@ (8002b60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d90f      	bls.n	8002a56 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a52:	6093      	str	r3, [r2, #8]
 8002a54:	e07e      	b.n	8002b54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4413      	add	r3, r2
 8002a68:	3304      	adds	r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	0159      	lsls	r1, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	440b      	add	r3, r1
 8002a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a82:	1ad2      	subs	r2, r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d114      	bne.n	8002ab8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	f004 fc3e 	bl	8007324 <USB_EP0_OutStart>
 8002aa8:	e006      	b.n	8002ab8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	441a      	add	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4619      	mov	r1, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f00a fb12 	bl	800d0e8 <HAL_PCD_DataOutStageCallback>
 8002ac4:	e046      	b.n	8002b54 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	4a26      	ldr	r2, [pc, #152]	@ (8002b64 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d124      	bne.n	8002b18 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aea:	6093      	str	r3, [r2, #8]
 8002aec:	e032      	b.n	8002b54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b04:	461a      	mov	r2, r3
 8002b06:	2320      	movs	r3, #32
 8002b08:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f00a fae9 	bl	800d0e8 <HAL_PCD_DataOutStageCallback>
 8002b16:	e01d      	b.n	8002b54 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d114      	bne.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d108      	bne.n	8002b48 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b40:	461a      	mov	r2, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	f004 fbee 	bl	8007324 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f00a faca 	bl	800d0e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	4f54300a 	.word	0x4f54300a
 8002b64:	4f54310a 	.word	0x4f54310a

08002b68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	333c      	adds	r3, #60	@ 0x3c
 8002b80:	3304      	adds	r3, #4
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4a15      	ldr	r2, [pc, #84]	@ (8002bf0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d90e      	bls.n	8002bbc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f00a fa81 	bl	800d0c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d90c      	bls.n	8002be4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	799b      	ldrb	r3, [r3, #6]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d108      	bne.n	8002be4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2101      	movs	r1, #1
 8002be0:	f004 fba0 	bl	8007324 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	4f54300a 	.word	0x4f54300a

08002bf4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	70fb      	strb	r3, [r7, #3]
 8002c00:	4613      	mov	r3, r2
 8002c02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d107      	bne.n	8002c22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c12:	883b      	ldrh	r3, [r7, #0]
 8002c14:	0419      	lsls	r1, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c20:	e028      	b.n	8002c74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]
 8002c34:	e00d      	b.n	8002c52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	3340      	adds	r3, #64	@ 0x40
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	4413      	add	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d3ec      	bcc.n	8002c36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c5c:	883b      	ldrh	r3, [r7, #0]
 8002c5e:	0418      	lsls	r0, r3, #16
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4302      	orrs	r2, r0
 8002c6c:	3340      	adds	r3, #64	@ 0x40
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e267      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d075      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cda:	4b88      	ldr	r3, [pc, #544]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d00c      	beq.n	8002d00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce6:	4b85      	ldr	r3, [pc, #532]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d112      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf2:	4b82      	ldr	r3, [pc, #520]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	4b7e      	ldr	r3, [pc, #504]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05b      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x108>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d157      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e242      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x74>
 8002d22:	4b76      	ldr	r3, [pc, #472]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a75      	ldr	r2, [pc, #468]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e01d      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b70      	ldr	r3, [pc, #448]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6f      	ldr	r2, [pc, #444]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b6d      	ldr	r3, [pc, #436]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6c      	ldr	r2, [pc, #432]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d54:	4b69      	ldr	r3, [pc, #420]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a68      	ldr	r2, [pc, #416]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b66      	ldr	r3, [pc, #408]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a65      	ldr	r2, [pc, #404]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe f9da 	bl	800112c <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe f9d6 	bl	800112c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	@ 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e207      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0xc0>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fe f9c6 	bl	800112c <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fe f9c2 	bl	800112c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	@ 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1f3      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	4b51      	ldr	r3, [pc, #324]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0xe8>
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d063      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dde:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d11c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dea:	4b44      	ldr	r3, [pc, #272]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d116      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df6:	4b41      	ldr	r3, [pc, #260]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e1c7      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4937      	ldr	r1, [pc, #220]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	e03a      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e2c:	4b34      	ldr	r3, [pc, #208]	@ (8002f00 <HAL_RCC_OscConfig+0x244>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fe f97b 	bl	800112c <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3a:	f7fe f977 	bl	800112c <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e1a8      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e58:	4b28      	ldr	r3, [pc, #160]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4925      	ldr	r1, [pc, #148]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]
 8002e6c:	e015      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6e:	4b24      	ldr	r3, [pc, #144]	@ (8002f00 <HAL_RCC_OscConfig+0x244>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe f95a 	bl	800112c <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7c:	f7fe f956 	bl	800112c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e187      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d036      	beq.n	8002f14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eae:	4b15      	ldr	r3, [pc, #84]	@ (8002f04 <HAL_RCC_OscConfig+0x248>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7fe f93a 	bl	800112c <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ebc:	f7fe f936 	bl	800112c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e167      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <HAL_RCC_OscConfig+0x240>)
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x200>
 8002eda:	e01b      	b.n	8002f14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002edc:	4b09      	ldr	r3, [pc, #36]	@ (8002f04 <HAL_RCC_OscConfig+0x248>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe f923 	bl	800112c <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	e00e      	b.n	8002f08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eea:	f7fe f91f 	bl	800112c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d907      	bls.n	8002f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e150      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
 8002efc:	40023800 	.word	0x40023800
 8002f00:	42470000 	.word	0x42470000
 8002f04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	4b88      	ldr	r3, [pc, #544]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ea      	bne.n	8002eea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8097 	beq.w	8003050 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f26:	4b81      	ldr	r3, [pc, #516]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10f      	bne.n	8002f52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	4b7d      	ldr	r3, [pc, #500]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	4a7c      	ldr	r2, [pc, #496]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f42:	4b7a      	ldr	r3, [pc, #488]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	4b77      	ldr	r3, [pc, #476]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d118      	bne.n	8002f90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5e:	4b74      	ldr	r3, [pc, #464]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a73      	ldr	r2, [pc, #460]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6a:	f7fe f8df 	bl	800112c <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f72:	f7fe f8db 	bl	800112c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e10c      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	4b6a      	ldr	r3, [pc, #424]	@ (8003130 <HAL_RCC_OscConfig+0x474>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d106      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x2ea>
 8002f98:	4b64      	ldr	r3, [pc, #400]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9c:	4a63      	ldr	r2, [pc, #396]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa4:	e01c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x324>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x30c>
 8002fae:	4b5f      	ldr	r3, [pc, #380]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb2:	4a5e      	ldr	r2, [pc, #376]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fba:	4b5c      	ldr	r3, [pc, #368]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	4a5b      	ldr	r2, [pc, #364]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x324>
 8002fc8:	4b58      	ldr	r3, [pc, #352]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fcc:	4a57      	ldr	r2, [pc, #348]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd4:	4b55      	ldr	r3, [pc, #340]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd8:	4a54      	ldr	r2, [pc, #336]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d015      	beq.n	8003014 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7fe f8a0 	bl	800112c <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff0:	f7fe f89c 	bl	800112c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e0cb      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003006:	4b49      	ldr	r3, [pc, #292]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ee      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x334>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7fe f88a 	bl	800112c <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7fe f886 	bl	800112c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e0b5      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003032:	4b3e      	ldr	r3, [pc, #248]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1ee      	bne.n	800301c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003044:	4b39      	ldr	r3, [pc, #228]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	4a38      	ldr	r2, [pc, #224]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 800304a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800304e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80a1 	beq.w	800319c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800305a:	4b34      	ldr	r3, [pc, #208]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b08      	cmp	r3, #8
 8003064:	d05c      	beq.n	8003120 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d141      	bne.n	80030f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b31      	ldr	r3, [pc, #196]	@ (8003134 <HAL_RCC_OscConfig+0x478>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe f85a 	bl	800112c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7fe f856 	bl	800112c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e087      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	4b27      	ldr	r3, [pc, #156]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	019b      	lsls	r3, r3, #6
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	3b01      	subs	r3, #1
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	491b      	ldr	r1, [pc, #108]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003134 <HAL_RCC_OscConfig+0x478>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7fe f82f 	bl	800112c <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe f82b 	bl	800112c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e05c      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e4:	4b11      	ldr	r3, [pc, #68]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x416>
 80030f0:	e054      	b.n	800319c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <HAL_RCC_OscConfig+0x478>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fe f818 	bl	800112c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fe f814 	bl	800112c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e045      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	4b06      	ldr	r3, [pc, #24]	@ (800312c <HAL_RCC_OscConfig+0x470>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x444>
 800311e:	e03d      	b.n	800319c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d107      	bne.n	8003138 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e038      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
 800312c:	40023800 	.word	0x40023800
 8003130:	40007000 	.word	0x40007000
 8003134:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003138:	4b1b      	ldr	r3, [pc, #108]	@ (80031a8 <HAL_RCC_OscConfig+0x4ec>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d028      	beq.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d121      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d11a      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003168:	4013      	ands	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800316e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003170:	4293      	cmp	r3, r2
 8003172:	d111      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	3b01      	subs	r3, #1
 8003182:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800

080031ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0cc      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c0:	4b68      	ldr	r3, [pc, #416]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d90c      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b65      	ldr	r3, [pc, #404]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b63      	ldr	r3, [pc, #396]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b8      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003200:	4b59      	ldr	r3, [pc, #356]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a58      	ldr	r2, [pc, #352]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800320a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003218:	4b53      	ldr	r3, [pc, #332]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4a52      	ldr	r2, [pc, #328]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b50      	ldr	r3, [pc, #320]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	494d      	ldr	r1, [pc, #308]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d044      	beq.n	80032cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b47      	ldr	r3, [pc, #284]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d119      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d003      	beq.n	800326a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003266:	2b03      	cmp	r3, #3
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	4b3f      	ldr	r3, [pc, #252]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e06f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327a:	4b3b      	ldr	r3, [pc, #236]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e067      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328a:	4b37      	ldr	r3, [pc, #220]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4934      	ldr	r1, [pc, #208]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	4313      	orrs	r3, r2
 800329a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800329c:	f7fd ff46 	bl	800112c <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7fd ff42 	bl	800112c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e04f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 020c 	and.w	r2, r3, #12
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d1eb      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032cc:	4b25      	ldr	r3, [pc, #148]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d20c      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b22      	ldr	r3, [pc, #136]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e032      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4916      	ldr	r1, [pc, #88]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800331e:	4b12      	ldr	r3, [pc, #72]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	490e      	ldr	r1, [pc, #56]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003332:	f000 f821 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490a      	ldr	r1, [pc, #40]	@ (800336c <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	4a09      	ldr	r2, [pc, #36]	@ (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800334e:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd fbde 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023c00 	.word	0x40023c00
 8003368:	40023800 	.word	0x40023800
 800336c:	0800d9b8 	.word	0x0800d9b8
 8003370:	20000000 	.word	0x20000000
 8003374:	20000004 	.word	0x20000004

08003378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800337c:	b090      	sub	sp, #64	@ 0x40
 800337e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003390:	4b59      	ldr	r3, [pc, #356]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b08      	cmp	r3, #8
 800339a:	d00d      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x40>
 800339c:	2b08      	cmp	r3, #8
 800339e:	f200 80a1 	bhi.w	80034e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x34>
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033aa:	e09b      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ac:	4b53      	ldr	r3, [pc, #332]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x184>)
 80033ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033b0:	e09b      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b2:	4b53      	ldr	r3, [pc, #332]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x188>)
 80033b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033b6:	e098      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b8:	4b4f      	ldr	r3, [pc, #316]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c2:	4b4d      	ldr	r3, [pc, #308]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d028      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ce:	4b4a      	ldr	r3, [pc, #296]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	2200      	movs	r2, #0
 80033d6:	623b      	str	r3, [r7, #32]
 80033d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033e0:	2100      	movs	r1, #0
 80033e2:	4b47      	ldr	r3, [pc, #284]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x188>)
 80033e4:	fb03 f201 	mul.w	r2, r3, r1
 80033e8:	2300      	movs	r3, #0
 80033ea:	fb00 f303 	mul.w	r3, r0, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	4a43      	ldr	r2, [pc, #268]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f2:	fba0 1202 	umull	r1, r2, r0, r2
 80033f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033f8:	460a      	mov	r2, r1
 80033fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80033fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033fe:	4413      	add	r3, r2
 8003400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003404:	2200      	movs	r2, #0
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	61fa      	str	r2, [r7, #28]
 800340a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800340e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003412:	f7fc fee5 	bl	80001e0 <__aeabi_uldivmod>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4613      	mov	r3, r2
 800341c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800341e:	e053      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003420:	4b35      	ldr	r3, [pc, #212]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	099b      	lsrs	r3, r3, #6
 8003426:	2200      	movs	r2, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	617a      	str	r2, [r7, #20]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003432:	f04f 0b00 	mov.w	fp, #0
 8003436:	4652      	mov	r2, sl
 8003438:	465b      	mov	r3, fp
 800343a:	f04f 0000 	mov.w	r0, #0
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	0159      	lsls	r1, r3, #5
 8003444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003448:	0150      	lsls	r0, r2, #5
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	ebb2 080a 	subs.w	r8, r2, sl
 8003452:	eb63 090b 	sbc.w	r9, r3, fp
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003462:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003466:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800346a:	ebb2 0408 	subs.w	r4, r2, r8
 800346e:	eb63 0509 	sbc.w	r5, r3, r9
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	00eb      	lsls	r3, r5, #3
 800347c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003480:	00e2      	lsls	r2, r4, #3
 8003482:	4614      	mov	r4, r2
 8003484:	461d      	mov	r5, r3
 8003486:	eb14 030a 	adds.w	r3, r4, sl
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	eb45 030b 	adc.w	r3, r5, fp
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800349e:	4629      	mov	r1, r5
 80034a0:	028b      	lsls	r3, r1, #10
 80034a2:	4621      	mov	r1, r4
 80034a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034a8:	4621      	mov	r1, r4
 80034aa:	028a      	lsls	r2, r1, #10
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b2:	2200      	movs	r2, #0
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	60fa      	str	r2, [r7, #12]
 80034b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034bc:	f7fc fe90 	bl	80001e0 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4613      	mov	r3, r2
 80034c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	3301      	adds	r3, #1
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80034d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034e2:	e002      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x184>)
 80034e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3740      	adds	r7, #64	@ 0x40
 80034f0:	46bd      	mov	sp, r7
 80034f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	00f42400 	.word	0x00f42400
 8003500:	017d7840 	.word	0x017d7840

08003504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003508:	4b03      	ldr	r3, [pc, #12]	@ (8003518 <HAL_RCC_GetHCLKFreq+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000000 	.word	0x20000000

0800351c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003520:	f7ff fff0 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	@ (800353c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	0a9b      	lsrs	r3, r3, #10
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	@ (8003540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	0800d9c8 	.word	0x0800d9c8

08003544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003548:	f7ff ffdc 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	0b5b      	lsrs	r3, r3, #13
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4903      	ldr	r1, [pc, #12]	@ (8003568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40023800 	.word	0x40023800
 8003568:	0800d9c8 	.word	0x0800d9c8

0800356c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	220f      	movs	r2, #15
 800357a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800357c:	4b12      	ldr	r3, [pc, #72]	@ (80035c8 <HAL_RCC_GetClockConfig+0x5c>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0203 	and.w	r2, r3, #3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003588:	4b0f      	ldr	r3, [pc, #60]	@ (80035c8 <HAL_RCC_GetClockConfig+0x5c>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003594:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035a0:	4b09      	ldr	r3, [pc, #36]	@ (80035c8 <HAL_RCC_GetClockConfig+0x5c>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	08db      	lsrs	r3, r3, #3
 80035a6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035ae:	4b07      	ldr	r3, [pc, #28]	@ (80035cc <HAL_RCC_GetClockConfig+0x60>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0207 	and.w	r2, r3, #7
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	601a      	str	r2, [r3, #0]
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40023c00 	.word	0x40023c00

080035d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e07b      	b.n	80036da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d108      	bne.n	80035fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035f2:	d009      	beq.n	8003608 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	61da      	str	r2, [r3, #28]
 80035fa:	e005      	b.n	8003608 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd f9fa 	bl	8000a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800363e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368c:	ea42 0103 	orr.w	r1, r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003694:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	0c1b      	lsrs	r3, r3, #16
 80036a6:	f003 0104 	and.w	r1, r3, #4
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	f003 0210 	and.w	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69da      	ldr	r2, [r3, #28]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d001      	beq.n	8003702 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
 8003700:	e07f      	b.n	8003802 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d110      	bne.n	800372c <HAL_SPI_Receive_IT+0x48>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003712:	d10b      	bne.n	800372c <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2204      	movs	r2, #4
 8003718:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f876 	bl	8003814 <HAL_SPI_TransmitReceive_IT>
 8003728:	4603      	mov	r3, r0
 800372a:	e06a      	b.n	8003802 <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_SPI_Receive_IT+0x54>
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e062      	b.n	8003802 <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_SPI_Receive_IT+0x66>
 8003746:	2302      	movs	r3, #2
 8003748:	e05b      	b.n	8003802 <HAL_SPI_Receive_IT+0x11e>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2204      	movs	r2, #4
 8003756:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	88fa      	ldrh	r2, [r7, #6]
 800376a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <HAL_SPI_Receive_IT+0x128>)
 8003796:	641a      	str	r2, [r3, #64]	@ 0x40
 8003798:	e002      	b.n	80037a0 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4a1c      	ldr	r2, [pc, #112]	@ (8003810 <HAL_SPI_Receive_IT+0x12c>)
 800379e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a8:	d10f      	bne.n	80037ca <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037c8:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d4:	2b40      	cmp	r3, #64	@ 0x40
 80037d6:	d007      	beq.n	80037e8 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037e6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80037fe:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	08003d35 	.word	0x08003d35
 8003810:	08003ceb 	.word	0x08003ceb

08003814 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003828:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d00c      	beq.n	8003850 <HAL_SPI_TransmitReceive_IT+0x3c>
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800383c:	d106      	bne.n	800384c <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d102      	bne.n	800384c <HAL_SPI_TransmitReceive_IT+0x38>
 8003846:	7dfb      	ldrb	r3, [r7, #23]
 8003848:	2b04      	cmp	r3, #4
 800384a:	d001      	beq.n	8003850 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
 800384e:	e061      	b.n	8003914 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_SPI_TransmitReceive_IT+0x4e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_SPI_TransmitReceive_IT+0x4e>
 800385c:	887b      	ldrh	r3, [r7, #2]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e056      	b.n	8003914 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_SPI_TransmitReceive_IT+0x60>
 8003870:	2302      	movs	r3, #2
 8003872:	e04f      	b.n	8003914 <HAL_SPI_TransmitReceive_IT+0x100>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b04      	cmp	r3, #4
 8003886:	d003      	beq.n	8003890 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2205      	movs	r2, #5
 800388c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	887a      	ldrh	r2, [r7, #2]
 80038a0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	887a      	ldrh	r2, [r7, #2]
 80038a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	887a      	ldrh	r2, [r7, #2]
 80038b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d006      	beq.n	80038d0 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4a16      	ldr	r2, [pc, #88]	@ (8003920 <HAL_SPI_TransmitReceive_IT+0x10c>)
 80038c6:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a16      	ldr	r2, [pc, #88]	@ (8003924 <HAL_SPI_TransmitReceive_IT+0x110>)
 80038cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80038ce:	e005      	b.n	80038dc <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a15      	ldr	r2, [pc, #84]	@ (8003928 <HAL_SPI_TransmitReceive_IT+0x114>)
 80038d4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4a14      	ldr	r2, [pc, #80]	@ (800392c <HAL_SPI_TransmitReceive_IT+0x118>)
 80038da:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e6:	2b40      	cmp	r3, #64	@ 0x40
 80038e8:	d007      	beq.n	80038fa <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038f8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8003910:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	08003c2d 	.word	0x08003c2d
 8003924:	08003c8d 	.word	0x08003c8d
 8003928:	08003b69 	.word	0x08003b69
 800392c:	08003bcd 	.word	0x08003bcd

08003930 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10e      	bne.n	8003970 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003958:	2b00      	cmp	r3, #0
 800395a:	d009      	beq.n	8003970 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	d004      	beq.n	8003970 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	4798      	blx	r3
    return;
 800396e:	e0ce      	b.n	8003b0e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_SPI_IRQHandler+0x5e>
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003980:	2b00      	cmp	r3, #0
 8003982:	d004      	beq.n	800398e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
    return;
 800398c:	e0bf      	b.n	8003b0e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <HAL_SPI_IRQHandler+0x7e>
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80b0 	beq.w	8003b0e <HAL_SPI_IRQHandler+0x1de>
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80aa 	beq.w	8003b0e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d023      	beq.n	8003a0c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d011      	beq.n	80039f4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d4:	f043 0204 	orr.w	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	e00b      	b.n	8003a0c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	693b      	ldr	r3, [r7, #16]
        return;
 8003a0a:	e080      	b.n	8003b0e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d014      	beq.n	8003a40 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a1a:	f043 0201 	orr.w	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00c      	beq.n	8003a64 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4e:	f043 0208 	orr.w	r2, r3, #8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003a56:	2300      	movs	r3, #0
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d04f      	beq.n	8003b0c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a7a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d104      	bne.n	8003a98 <HAL_SPI_IRQHandler+0x168>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d034      	beq.n	8003b02 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0203 	bic.w	r2, r2, #3
 8003aa6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d011      	beq.n	8003ad4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab4:	4a17      	ldr	r2, [pc, #92]	@ (8003b14 <HAL_SPI_IRQHandler+0x1e4>)
 8003ab6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd fcd2 	bl	8001466 <HAL_DMA_Abort_IT>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003acc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d016      	beq.n	8003b0a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae0:	4a0c      	ldr	r2, [pc, #48]	@ (8003b14 <HAL_SPI_IRQHandler+0x1e4>)
 8003ae2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fd fcbc 	bl	8001466 <HAL_DMA_Abort_IT>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003b00:	e003      	b.n	8003b0a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f812 	bl	8003b2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003b08:	e000      	b.n	8003b0c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003b0a:	bf00      	nop
    return;
 8003b0c:	bf00      	nop
  }
}
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	08003b41 	.word	0x08003b41

08003b18 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff ffe6 	bl	8003b2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f103 020c 	add.w	r2, r3, #12
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7c:	7812      	ldrb	r2, [r2, #0]
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10f      	bne.n	8003bc4 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bb2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa1e 	bl	8004000 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	7812      	ldrb	r2, [r2, #0]
 8003be0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10f      	bne.n	8003c24 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c12:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d102      	bne.n	8003c24 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9ee 	bl	8004000 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3e:	b292      	uxth	r2, r2
 8003c40:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c46:	1c9a      	adds	r2, r3, #2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10f      	bne.n	8003c84 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c72:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f9be 	bl	8004000 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	881a      	ldrh	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	1c9a      	adds	r2, r3, #2
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10f      	bne.n	8003ce2 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cd0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f98f 	bl	8004000 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f103 020c 	add.w	r2, r3, #12
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfe:	7812      	ldrb	r2, [r2, #0]
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d102      	bne.n	8003d2c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f9de 	bl	80040e8 <SPI_CloseRx_ISR>
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d46:	b292      	uxth	r2, r2
 8003d48:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4e:	1c9a      	adds	r2, r3, #2
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f9bb 	bl	80040e8 <SPI_CloseRx_ISR>
  }
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d8c:	f7fd f9ce 	bl	800112c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	4413      	add	r3, r2
 8003d9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d9c:	f7fd f9c6 	bl	800112c <HAL_GetTick>
 8003da0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003da2:	4b39      	ldr	r3, [pc, #228]	@ (8003e88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	015b      	lsls	r3, r3, #5
 8003da8:	0d1b      	lsrs	r3, r3, #20
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	fb02 f303 	mul.w	r3, r2, r3
 8003db0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003db2:	e054      	b.n	8003e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d050      	beq.n	8003e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dbc:	f7fd f9b6 	bl	800112c <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d902      	bls.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d13d      	bne.n	8003e4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003de0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dea:	d111      	bne.n	8003e10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003df4:	d004      	beq.n	8003e00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dfe:	d107      	bne.n	8003e10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e18:	d10f      	bne.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e017      	b.n	8003e7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4013      	ands	r3, r2
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	bf0c      	ite	eq
 8003e6e:	2301      	moveq	r3, #1
 8003e70:	2300      	movne	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d19b      	bne.n	8003db4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000000 	.word	0x20000000

08003e8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ea0:	d111      	bne.n	8003ec6 <SPI_EndRxTransaction+0x3a>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eaa:	d004      	beq.n	8003eb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb4:	d107      	bne.n	8003ec6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ec4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ece:	d12a      	bne.n	8003f26 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed8:	d012      	beq.n	8003f00 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2180      	movs	r1, #128	@ 0x80
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff ff49 	bl	8003d7c <SPI_WaitFlagStateUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d02d      	beq.n	8003f4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef4:	f043 0220 	orr.w	r2, r3, #32
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e026      	b.n	8003f4e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2200      	movs	r2, #0
 8003f08:	2101      	movs	r1, #1
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff ff36 	bl	8003d7c <SPI_WaitFlagStateUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01a      	beq.n	8003f4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1a:	f043 0220 	orr.w	r2, r3, #32
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e013      	b.n	8003f4e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2101      	movs	r1, #1
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff ff23 	bl	8003d7c <SPI_WaitFlagStateUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f40:	f043 0220 	orr.w	r2, r3, #32
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e000      	b.n	8003f4e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff ff04 	bl	8003d7c <SPI_WaitFlagStateUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7e:	f043 0220 	orr.w	r2, r3, #32
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e032      	b.n	8003ff0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff8 <SPI_EndRxTxTransaction+0xa0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ffc <SPI_EndRxTxTransaction+0xa4>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	0d5b      	lsrs	r3, r3, #21
 8003f96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fa8:	d112      	bne.n	8003fd0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2180      	movs	r1, #128	@ 0x80
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7ff fee1 	bl	8003d7c <SPI_WaitFlagStateUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d016      	beq.n	8003fee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e00f      	b.n	8003ff0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe6:	2b80      	cmp	r3, #128	@ 0x80
 8003fe8:	d0f2      	beq.n	8003fd0 <SPI_EndRxTxTransaction+0x78>
 8003fea:	e000      	b.n	8003fee <SPI_EndRxTxTransaction+0x96>
        break;
 8003fec:	bf00      	nop
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000000 	.word	0x20000000
 8003ffc:	165e9f81 	.word	0x165e9f81

08004000 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004008:	4b35      	ldr	r3, [pc, #212]	@ (80040e0 <SPI_CloseRxTx_ISR+0xe0>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a35      	ldr	r2, [pc, #212]	@ (80040e4 <SPI_CloseRxTx_ISR+0xe4>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	0a5b      	lsrs	r3, r3, #9
 8004014:	2264      	movs	r2, #100	@ 0x64
 8004016:	fb02 f303 	mul.w	r3, r2, r3
 800401a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800401c:	f7fd f886 	bl	800112c <HAL_GetTick>
 8004020:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0220 	bic.w	r2, r2, #32
 8004030:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403c:	f043 0220 	orr.w	r2, r3, #32
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004044:	e009      	b.n	800405a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	3b01      	subs	r3, #1
 800404a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0eb      	beq.n	8004032 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	2164      	movs	r1, #100	@ 0x64
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff ff7a 	bl	8003f58 <SPI_EndRxTxTransaction>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406e:	f043 0220 	orr.w	r2, r3, #32
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004098:	2b00      	cmp	r3, #0
 800409a:	d115      	bne.n	80040c8 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d107      	bne.n	80040b8 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fd31 	bl	8003b18 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80040b6:	e00e      	b.n	80040d6 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7fc fb37 	bl	8000734 <HAL_SPI_TxRxCpltCallback>
}
 80040c6:	e006      	b.n	80040d6 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff fd2b 	bl	8003b2c <HAL_SPI_ErrorCallback>
}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000000 	.word	0x20000000
 80040e4:	057619f1 	.word	0x057619f1

080040e8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040fe:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004100:	f7fd f814 	bl	800112c <HAL_GetTick>
 8004104:	4603      	mov	r3, r0
 8004106:	461a      	mov	r2, r3
 8004108:	2164      	movs	r1, #100	@ 0x64
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff febe 	bl	8003e8c <SPI_EndRxTransaction>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414c:	2b00      	cmp	r3, #0
 800414e:	d103      	bne.n	8004158 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff fce1 	bl	8003b18 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004156:	e002      	b.n	800415e <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff fce7 	bl	8003b2c <HAL_SPI_ErrorCallback>
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e041      	b.n	80041fc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f839 	bl	8004204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f000 fac3 	bl	8004730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d001      	beq.n	8004230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e044      	b.n	80042ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1e      	ldr	r2, [pc, #120]	@ (80042c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d018      	beq.n	8004284 <HAL_TIM_Base_Start_IT+0x6c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800425a:	d013      	beq.n	8004284 <HAL_TIM_Base_Start_IT+0x6c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1a      	ldr	r2, [pc, #104]	@ (80042cc <HAL_TIM_Base_Start_IT+0xb4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_TIM_Base_Start_IT+0x6c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a19      	ldr	r2, [pc, #100]	@ (80042d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_TIM_Base_Start_IT+0x6c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a17      	ldr	r2, [pc, #92]	@ (80042d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <HAL_TIM_Base_Start_IT+0x6c>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a16      	ldr	r2, [pc, #88]	@ (80042d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d111      	bne.n	80042a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b06      	cmp	r3, #6
 8004294:	d010      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a6:	e007      	b.n	80042b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40014000 	.word	0x40014000

080042dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e041      	b.n	8004372 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fc fd70 	bl	8000de8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3304      	adds	r3, #4
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f000 fa08 	bl	8004730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d020      	beq.n	80043de <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d01b      	beq.n	80043de <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f06f 0202 	mvn.w	r2, #2
 80043ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f995 	bl	80046f4 <HAL_TIM_IC_CaptureCallback>
 80043ca:	e005      	b.n	80043d8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f987 	bl	80046e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f998 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d020      	beq.n	800442a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01b      	beq.n	800442a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f06f 0204 	mvn.w	r2, #4
 80043fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f96f 	bl	80046f4 <HAL_TIM_IC_CaptureCallback>
 8004416:	e005      	b.n	8004424 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f961 	bl	80046e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f972 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01b      	beq.n	8004476 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f06f 0208 	mvn.w	r2, #8
 8004446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2204      	movs	r2, #4
 800444c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f949 	bl	80046f4 <HAL_TIM_IC_CaptureCallback>
 8004462:	e005      	b.n	8004470 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f93b 	bl	80046e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f94c 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b00      	cmp	r3, #0
 800447e:	d020      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01b      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f06f 0210 	mvn.w	r2, #16
 8004492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2208      	movs	r2, #8
 8004498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f923 	bl	80046f4 <HAL_TIM_IC_CaptureCallback>
 80044ae:	e005      	b.n	80044bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f915 	bl	80046e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f926 	bl	8004708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00c      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f06f 0201 	mvn.w	r2, #1
 80044de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fc fa53 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00c      	beq.n	800450a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d007      	beq.n	800450a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fbf5 	bl	8004cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00c      	beq.n	800452e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f8f7 	bl	800471c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f003 0320 	and.w	r3, r3, #32
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00c      	beq.n	8004552 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f06f 0220 	mvn.w	r2, #32
 800454a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fbc7 	bl	8004ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004576:	2302      	movs	r3, #2
 8004578:	e0ae      	b.n	80046d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b0c      	cmp	r3, #12
 8004586:	f200 809f 	bhi.w	80046c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800458a:	a201      	add	r2, pc, #4	@ (adr r2, 8004590 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800458c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004590:	080045c5 	.word	0x080045c5
 8004594:	080046c9 	.word	0x080046c9
 8004598:	080046c9 	.word	0x080046c9
 800459c:	080046c9 	.word	0x080046c9
 80045a0:	08004605 	.word	0x08004605
 80045a4:	080046c9 	.word	0x080046c9
 80045a8:	080046c9 	.word	0x080046c9
 80045ac:	080046c9 	.word	0x080046c9
 80045b0:	08004647 	.word	0x08004647
 80045b4:	080046c9 	.word	0x080046c9
 80045b8:	080046c9 	.word	0x080046c9
 80045bc:	080046c9 	.word	0x080046c9
 80045c0:	08004687 	.word	0x08004687
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 f93c 	bl	8004848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0208 	orr.w	r2, r2, #8
 80045de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0204 	bic.w	r2, r2, #4
 80045ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6999      	ldr	r1, [r3, #24]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	619a      	str	r2, [r3, #24]
      break;
 8004602:	e064      	b.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f982 	bl	8004914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800461e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800462e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6999      	ldr	r1, [r3, #24]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	021a      	lsls	r2, r3, #8
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	619a      	str	r2, [r3, #24]
      break;
 8004644:	e043      	b.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f9cd 	bl	80049ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0208 	orr.w	r2, r2, #8
 8004660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0204 	bic.w	r2, r2, #4
 8004670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69d9      	ldr	r1, [r3, #28]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	61da      	str	r2, [r3, #28]
      break;
 8004684:	e023      	b.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fa17 	bl	8004ac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69d9      	ldr	r1, [r3, #28]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	021a      	lsls	r2, r3, #8
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	61da      	str	r2, [r3, #28]
      break;
 80046c6:	e002      	b.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	75fb      	strb	r3, [r7, #23]
      break;
 80046cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a3a      	ldr	r2, [pc, #232]	@ (800482c <TIM_Base_SetConfig+0xfc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d00f      	beq.n	8004768 <TIM_Base_SetConfig+0x38>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474e:	d00b      	beq.n	8004768 <TIM_Base_SetConfig+0x38>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a37      	ldr	r2, [pc, #220]	@ (8004830 <TIM_Base_SetConfig+0x100>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d007      	beq.n	8004768 <TIM_Base_SetConfig+0x38>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a36      	ldr	r2, [pc, #216]	@ (8004834 <TIM_Base_SetConfig+0x104>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d003      	beq.n	8004768 <TIM_Base_SetConfig+0x38>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a35      	ldr	r2, [pc, #212]	@ (8004838 <TIM_Base_SetConfig+0x108>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d108      	bne.n	800477a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a2b      	ldr	r2, [pc, #172]	@ (800482c <TIM_Base_SetConfig+0xfc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d01b      	beq.n	80047ba <TIM_Base_SetConfig+0x8a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004788:	d017      	beq.n	80047ba <TIM_Base_SetConfig+0x8a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a28      	ldr	r2, [pc, #160]	@ (8004830 <TIM_Base_SetConfig+0x100>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <TIM_Base_SetConfig+0x8a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a27      	ldr	r2, [pc, #156]	@ (8004834 <TIM_Base_SetConfig+0x104>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00f      	beq.n	80047ba <TIM_Base_SetConfig+0x8a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a26      	ldr	r2, [pc, #152]	@ (8004838 <TIM_Base_SetConfig+0x108>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00b      	beq.n	80047ba <TIM_Base_SetConfig+0x8a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a25      	ldr	r2, [pc, #148]	@ (800483c <TIM_Base_SetConfig+0x10c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d007      	beq.n	80047ba <TIM_Base_SetConfig+0x8a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a24      	ldr	r2, [pc, #144]	@ (8004840 <TIM_Base_SetConfig+0x110>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d003      	beq.n	80047ba <TIM_Base_SetConfig+0x8a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a23      	ldr	r2, [pc, #140]	@ (8004844 <TIM_Base_SetConfig+0x114>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d108      	bne.n	80047cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a0e      	ldr	r2, [pc, #56]	@ (800482c <TIM_Base_SetConfig+0xfc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d103      	bne.n	8004800 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b01      	cmp	r3, #1
 8004810:	d105      	bne.n	800481e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f023 0201 	bic.w	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	611a      	str	r2, [r3, #16]
  }
}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40010000 	.word	0x40010000
 8004830:	40000400 	.word	0x40000400
 8004834:	40000800 	.word	0x40000800
 8004838:	40000c00 	.word	0x40000c00
 800483c:	40014000 	.word	0x40014000
 8004840:	40014400 	.word	0x40014400
 8004844:	40014800 	.word	0x40014800

08004848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f023 0201 	bic.w	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0303 	bic.w	r3, r3, #3
 800487e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f023 0302 	bic.w	r3, r3, #2
 8004890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a1c      	ldr	r2, [pc, #112]	@ (8004910 <TIM_OC1_SetConfig+0xc8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d10c      	bne.n	80048be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f023 0308 	bic.w	r3, r3, #8
 80048aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f023 0304 	bic.w	r3, r3, #4
 80048bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a13      	ldr	r2, [pc, #76]	@ (8004910 <TIM_OC1_SetConfig+0xc8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d111      	bne.n	80048ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	621a      	str	r2, [r3, #32]
}
 8004904:	bf00      	nop
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	40010000 	.word	0x40010000

08004914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f023 0210 	bic.w	r2, r3, #16
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800494a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	021b      	lsls	r3, r3, #8
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f023 0320 	bic.w	r3, r3, #32
 800495e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a1e      	ldr	r2, [pc, #120]	@ (80049e8 <TIM_OC2_SetConfig+0xd4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d10d      	bne.n	8004990 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800497a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800498e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a15      	ldr	r2, [pc, #84]	@ (80049e8 <TIM_OC2_SetConfig+0xd4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d113      	bne.n	80049c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800499e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40010000 	.word	0x40010000

080049ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0303 	bic.w	r3, r3, #3
 8004a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1d      	ldr	r2, [pc, #116]	@ (8004abc <TIM_OC3_SetConfig+0xd0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d10d      	bne.n	8004a66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a14      	ldr	r2, [pc, #80]	@ (8004abc <TIM_OC3_SetConfig+0xd0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d113      	bne.n	8004a96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	621a      	str	r2, [r3, #32]
}
 8004ab0:	bf00      	nop
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	40010000 	.word	0x40010000

08004ac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	031b      	lsls	r3, r3, #12
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a10      	ldr	r2, [pc, #64]	@ (8004b5c <TIM_OC4_SetConfig+0x9c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d109      	bne.n	8004b34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	019b      	lsls	r3, r3, #6
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	621a      	str	r2, [r3, #32]
}
 8004b4e:	bf00      	nop
 8004b50:	371c      	adds	r7, #28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40010000 	.word	0x40010000

08004b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e050      	b.n	8004c1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d018      	beq.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc4:	d013      	beq.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a18      	ldr	r2, [pc, #96]	@ (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00e      	beq.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a16      	ldr	r2, [pc, #88]	@ (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d009      	beq.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a15      	ldr	r2, [pc, #84]	@ (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d004      	beq.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a13      	ldr	r2, [pc, #76]	@ (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d10c      	bne.n	8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800
 8004c34:	40000c00 	.word	0x40000c00
 8004c38:	40014000 	.word	0x40014000

08004c3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e03d      	b.n	8004cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e042      	b.n	8004da0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fc f910 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2224      	movs	r2, #36	@ 0x24
 8004d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fdbd 	bl	80058cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695a      	ldr	r2, [r3, #20]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	@ 0x28
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d175      	bne.n	8004eb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_UART_Transmit+0x2c>
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e06e      	b.n	8004eb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2221      	movs	r2, #33	@ 0x21
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004de6:	f7fc f9a1 	bl	800112c <HAL_GetTick>
 8004dea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	88fa      	ldrh	r2, [r7, #6]
 8004df0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	88fa      	ldrh	r2, [r7, #6]
 8004df6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e00:	d108      	bne.n	8004e14 <HAL_UART_Transmit+0x6c>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d104      	bne.n	8004e14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	e003      	b.n	8004e1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e1c:	e02e      	b.n	8004e7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2200      	movs	r2, #0
 8004e26:	2180      	movs	r1, #128	@ 0x80
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fb1f 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e03a      	b.n	8004eb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10b      	bne.n	8004e5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	3302      	adds	r3, #2
 8004e5a:	61bb      	str	r3, [r7, #24]
 8004e5c:	e007      	b.n	8004e6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	781a      	ldrb	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1cb      	bne.n	8004e1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2140      	movs	r1, #64	@ 0x40
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 faeb 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e006      	b.n	8004eb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e000      	b.n	8004eb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004eb4:	2302      	movs	r3, #2
  }
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d112      	bne.n	8004efe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <HAL_UART_Receive_IT+0x26>
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e00b      	b.n	8004f00 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fb12 	bl	800551e <UART_Start_Receive_IT>
 8004efa:	4603      	mov	r3, r0
 8004efc:	e000      	b.n	8004f00 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004efe:	2302      	movs	r3, #2
  }
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b0ba      	sub	sp, #232	@ 0xe8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10f      	bne.n	8004f6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <HAL_UART_IRQHandler+0x66>
 8004f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fbf2 	bl	8005750 <UART_Receive_IT>
      return;
 8004f6c:	e25b      	b.n	8005426 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80de 	beq.w	8005134 <HAL_UART_IRQHandler+0x22c>
 8004f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d106      	bne.n	8004f92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f88:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80d1 	beq.w	8005134 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_UART_IRQHandler+0xae>
 8004f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fae:	f043 0201 	orr.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <HAL_UART_IRQHandler+0xd2>
 8004fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	f043 0202 	orr.w	r2, r3, #2
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <HAL_UART_IRQHandler+0xf6>
 8004fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d005      	beq.n	8004ffe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff6:	f043 0204 	orr.w	r2, r3, #4
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d011      	beq.n	800502e <HAL_UART_IRQHandler+0x126>
 800500a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d105      	bne.n	8005022 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005026:	f043 0208 	orr.w	r2, r3, #8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 81f2 	beq.w	800541c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <HAL_UART_IRQHandler+0x14e>
 8005044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fb7d 	bl	8005750 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005060:	2b40      	cmp	r3, #64	@ 0x40
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <HAL_UART_IRQHandler+0x17a>
 800507a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d04f      	beq.n	8005122 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa85 	bl	8005592 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005092:	2b40      	cmp	r3, #64	@ 0x40
 8005094:	d141      	bne.n	800511a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3314      	adds	r3, #20
 800509c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80050ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3314      	adds	r3, #20
 80050be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80050c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80050c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80050ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80050da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1d9      	bne.n	8005096 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d013      	beq.n	8005112 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ee:	4a7e      	ldr	r2, [pc, #504]	@ (80052e8 <HAL_UART_IRQHandler+0x3e0>)
 80050f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fc f9b5 	bl	8001466 <HAL_DMA_Abort_IT>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800510c:	4610      	mov	r0, r2
 800510e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005110:	e00e      	b.n	8005130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f994 	bl	8005440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	e00a      	b.n	8005130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f990 	bl	8005440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005120:	e006      	b.n	8005130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f98c 	bl	8005440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800512e:	e175      	b.n	800541c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005130:	bf00      	nop
    return;
 8005132:	e173      	b.n	800541c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005138:	2b01      	cmp	r3, #1
 800513a:	f040 814f 	bne.w	80053dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800513e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005142:	f003 0310 	and.w	r3, r3, #16
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 8148 	beq.w	80053dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800514c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 8141 	beq.w	80053dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800515a:	2300      	movs	r3, #0
 800515c:	60bb      	str	r3, [r7, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	60bb      	str	r3, [r7, #8]
 800516e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517a:	2b40      	cmp	r3, #64	@ 0x40
 800517c:	f040 80b6 	bne.w	80052ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800518c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8145 	beq.w	8005420 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800519a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800519e:	429a      	cmp	r2, r3
 80051a0:	f080 813e 	bcs.w	8005420 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051b6:	f000 8088 	beq.w	80052ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80051d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	330c      	adds	r3, #12
 80051e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80051e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80051f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80051fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1d9      	bne.n	80051ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3314      	adds	r3, #20
 800520c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005216:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005218:	f023 0301 	bic.w	r3, r3, #1
 800521c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3314      	adds	r3, #20
 8005226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800522a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800522e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005232:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800523c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e1      	bne.n	8005206 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3314      	adds	r3, #20
 8005248:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005252:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005254:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005258:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3314      	adds	r3, #20
 8005262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005266:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005268:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800526c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e3      	bne.n	8005242 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005298:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800529a:	f023 0310 	bic.w	r3, r3, #16
 800529e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80052ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80052ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e3      	bne.n	8005288 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fc f85e 	bl	8001386 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2202      	movs	r2, #2
 80052ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	b29b      	uxth	r3, r3
 80052de:	4619      	mov	r1, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f8b7 	bl	8005454 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052e6:	e09b      	b.n	8005420 <HAL_UART_IRQHandler+0x518>
 80052e8:	08005659 	.word	0x08005659
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 808e 	beq.w	8005424 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8089 	beq.w	8005424 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	330c      	adds	r3, #12
 8005318:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005324:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005328:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	330c      	adds	r3, #12
 8005332:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005336:	647a      	str	r2, [r7, #68]	@ 0x44
 8005338:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800533c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e3      	bne.n	8005312 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3314      	adds	r3, #20
 8005350:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	623b      	str	r3, [r7, #32]
   return(result);
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3314      	adds	r3, #20
 800536a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800536e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005370:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e3      	bne.n	800534a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	330c      	adds	r3, #12
 8005396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	60fb      	str	r3, [r7, #12]
   return(result);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0310 	bic.w	r3, r3, #16
 80053a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	330c      	adds	r3, #12
 80053b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80053b4:	61fa      	str	r2, [r7, #28]
 80053b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	69b9      	ldr	r1, [r7, #24]
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	617b      	str	r3, [r7, #20]
   return(result);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e3      	bne.n	8005390 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053d2:	4619      	mov	r1, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f83d 	bl	8005454 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053da:	e023      	b.n	8005424 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d009      	beq.n	80053fc <HAL_UART_IRQHandler+0x4f4>
 80053e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f943 	bl	8005680 <UART_Transmit_IT>
    return;
 80053fa:	e014      	b.n	8005426 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00e      	beq.n	8005426 <HAL_UART_IRQHandler+0x51e>
 8005408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800540c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d008      	beq.n	8005426 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f983 	bl	8005720 <UART_EndTransmit_IT>
    return;
 800541a:	e004      	b.n	8005426 <HAL_UART_IRQHandler+0x51e>
    return;
 800541c:	bf00      	nop
 800541e:	e002      	b.n	8005426 <HAL_UART_IRQHandler+0x51e>
      return;
 8005420:	bf00      	nop
 8005422:	e000      	b.n	8005426 <HAL_UART_IRQHandler+0x51e>
      return;
 8005424:	bf00      	nop
  }
}
 8005426:	37e8      	adds	r7, #232	@ 0xe8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547c:	e03b      	b.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d037      	beq.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005486:	f7fb fe51 	bl	800112c <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	6a3a      	ldr	r2, [r7, #32]
 8005492:	429a      	cmp	r2, r3
 8005494:	d302      	bcc.n	800549c <UART_WaitOnFlagUntilTimeout+0x30>
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e03a      	b.n	8005516 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d023      	beq.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b80      	cmp	r3, #128	@ 0x80
 80054b2:	d020      	beq.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b40      	cmp	r3, #64	@ 0x40
 80054b8:	d01d      	beq.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d116      	bne.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 f857 	bl	8005592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2208      	movs	r2, #8
 80054e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e00f      	b.n	8005516 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4013      	ands	r3, r2
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	429a      	cmp	r2, r3
 8005504:	bf0c      	ite	eq
 8005506:	2301      	moveq	r3, #1
 8005508:	2300      	movne	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	79fb      	ldrb	r3, [r7, #7]
 8005510:	429a      	cmp	r2, r3
 8005512:	d0b4      	beq.n	800547e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800551e:	b480      	push	{r7}
 8005520:	b085      	sub	sp, #20
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	4613      	mov	r3, r2
 800552a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	88fa      	ldrh	r2, [r7, #6]
 8005536:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	88fa      	ldrh	r2, [r7, #6]
 800553c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2222      	movs	r2, #34	@ 0x22
 8005548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d007      	beq.n	8005564 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005562:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695a      	ldr	r2, [r3, #20]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0220 	orr.w	r2, r2, #32
 8005582:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005592:	b480      	push	{r7}
 8005594:	b095      	sub	sp, #84	@ 0x54
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	330c      	adds	r3, #12
 80055b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80055bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e5      	bne.n	800559a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3314      	adds	r3, #20
 80055d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	f023 0301 	bic.w	r3, r3, #1
 80055e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3314      	adds	r3, #20
 80055ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e5      	bne.n	80055ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005606:	2b01      	cmp	r3, #1
 8005608:	d119      	bne.n	800563e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	330c      	adds	r3, #12
 8005610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	e853 3f00 	ldrex	r3, [r3]
 8005618:	60bb      	str	r3, [r7, #8]
   return(result);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f023 0310 	bic.w	r3, r3, #16
 8005620:	647b      	str	r3, [r7, #68]	@ 0x44
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	330c      	adds	r3, #12
 8005628:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800562a:	61ba      	str	r2, [r7, #24]
 800562c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6979      	ldr	r1, [r7, #20]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	613b      	str	r3, [r7, #16]
   return(result);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e5      	bne.n	800560a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800564c:	bf00      	nop
 800564e:	3754      	adds	r7, #84	@ 0x54
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f7ff fee4 	bl	8005440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b21      	cmp	r3, #33	@ 0x21
 8005692:	d13e      	bne.n	8005712 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800569c:	d114      	bne.n	80056c8 <UART_Transmit_IT+0x48>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d110      	bne.n	80056c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	1c9a      	adds	r2, r3, #2
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	621a      	str	r2, [r3, #32]
 80056c6:	e008      	b.n	80056da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	1c59      	adds	r1, r3, #1
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6211      	str	r1, [r2, #32]
 80056d2:	781a      	ldrb	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	4619      	mov	r1, r3
 80056e8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10f      	bne.n	800570e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800570c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e000      	b.n	8005714 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005712:	2302      	movs	r3, #2
  }
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005736:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff fe73 	bl	800542c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08c      	sub	sp, #48	@ 0x30
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b22      	cmp	r3, #34	@ 0x22
 8005762:	f040 80ae 	bne.w	80058c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800576e:	d117      	bne.n	80057a0 <UART_Receive_IT+0x50>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d113      	bne.n	80057a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005778:	2300      	movs	r3, #0
 800577a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005780:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	b29b      	uxth	r3, r3
 800578a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578e:	b29a      	uxth	r2, r3
 8005790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005792:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005798:	1c9a      	adds	r2, r3, #2
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	629a      	str	r2, [r3, #40]	@ 0x28
 800579e:	e026      	b.n	80057ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b2:	d007      	beq.n	80057c4 <UART_Receive_IT+0x74>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <UART_Receive_IT+0x82>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ce:	701a      	strb	r2, [r3, #0]
 80057d0:	e008      	b.n	80057e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	4619      	mov	r1, r3
 80057fc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d15d      	bne.n	80058be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0220 	bic.w	r2, r2, #32
 8005810:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005820:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695a      	ldr	r2, [r3, #20]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0201 	bic.w	r2, r2, #1
 8005830:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005844:	2b01      	cmp	r3, #1
 8005846:	d135      	bne.n	80058b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	330c      	adds	r3, #12
 8005854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	613b      	str	r3, [r7, #16]
   return(result);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f023 0310 	bic.w	r3, r3, #16
 8005864:	627b      	str	r3, [r7, #36]	@ 0x24
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	330c      	adds	r3, #12
 800586c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586e:	623a      	str	r2, [r7, #32]
 8005870:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	69f9      	ldr	r1, [r7, #28]
 8005874:	6a3a      	ldr	r2, [r7, #32]
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	61bb      	str	r3, [r7, #24]
   return(result);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e5      	bne.n	800584e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b10      	cmp	r3, #16
 800588e:	d10a      	bne.n	80058a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff fdd1 	bl	8005454 <HAL_UARTEx_RxEventCallback>
 80058b2:	e002      	b.n	80058ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7fa ff25 	bl	8000704 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	e002      	b.n	80058c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e000      	b.n	80058c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80058c2:	2302      	movs	r3, #2
  }
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3730      	adds	r7, #48	@ 0x30
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d0:	b0c0      	sub	sp, #256	@ 0x100
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e8:	68d9      	ldr	r1, [r3, #12]
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	ea40 0301 	orr.w	r3, r0, r1
 80058f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	431a      	orrs	r2, r3
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	431a      	orrs	r2, r3
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005924:	f021 010c 	bic.w	r1, r1, #12
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005932:	430b      	orrs	r3, r1
 8005934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005946:	6999      	ldr	r1, [r3, #24]
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	ea40 0301 	orr.w	r3, r0, r1
 8005952:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b8f      	ldr	r3, [pc, #572]	@ (8005b98 <UART_SetConfig+0x2cc>)
 800595c:	429a      	cmp	r2, r3
 800595e:	d005      	beq.n	800596c <UART_SetConfig+0xa0>
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b8d      	ldr	r3, [pc, #564]	@ (8005b9c <UART_SetConfig+0x2d0>)
 8005968:	429a      	cmp	r2, r3
 800596a:	d104      	bne.n	8005976 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800596c:	f7fd fdea 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8005970:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005974:	e003      	b.n	800597e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005976:	f7fd fdd1 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 800597a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800597e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005988:	f040 810c 	bne.w	8005ba4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800598c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005990:	2200      	movs	r2, #0
 8005992:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005996:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800599a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800599e:	4622      	mov	r2, r4
 80059a0:	462b      	mov	r3, r5
 80059a2:	1891      	adds	r1, r2, r2
 80059a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059a6:	415b      	adcs	r3, r3
 80059a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059ae:	4621      	mov	r1, r4
 80059b0:	eb12 0801 	adds.w	r8, r2, r1
 80059b4:	4629      	mov	r1, r5
 80059b6:	eb43 0901 	adc.w	r9, r3, r1
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ce:	4690      	mov	r8, r2
 80059d0:	4699      	mov	r9, r3
 80059d2:	4623      	mov	r3, r4
 80059d4:	eb18 0303 	adds.w	r3, r8, r3
 80059d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059dc:	462b      	mov	r3, r5
 80059de:	eb49 0303 	adc.w	r3, r9, r3
 80059e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059fa:	460b      	mov	r3, r1
 80059fc:	18db      	adds	r3, r3, r3
 80059fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a00:	4613      	mov	r3, r2
 8005a02:	eb42 0303 	adc.w	r3, r2, r3
 8005a06:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a10:	f7fa fbe6 	bl	80001e0 <__aeabi_uldivmod>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4b61      	ldr	r3, [pc, #388]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	011c      	lsls	r4, r3, #4
 8005a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	1891      	adds	r1, r2, r2
 8005a3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a3c:	415b      	adcs	r3, r3
 8005a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a44:	4641      	mov	r1, r8
 8005a46:	eb12 0a01 	adds.w	sl, r2, r1
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	eb43 0b01 	adc.w	fp, r3, r1
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a64:	4692      	mov	sl, r2
 8005a66:	469b      	mov	fp, r3
 8005a68:	4643      	mov	r3, r8
 8005a6a:	eb1a 0303 	adds.w	r3, sl, r3
 8005a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a72:	464b      	mov	r3, r9
 8005a74:	eb4b 0303 	adc.w	r3, fp, r3
 8005a78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a90:	460b      	mov	r3, r1
 8005a92:	18db      	adds	r3, r3, r3
 8005a94:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a96:	4613      	mov	r3, r2
 8005a98:	eb42 0303 	adc.w	r3, r2, r3
 8005a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005aa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005aa6:	f7fa fb9b 	bl	80001e0 <__aeabi_uldivmod>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2264      	movs	r2, #100	@ 0x64
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	1acb      	subs	r3, r1, r3
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005ac6:	4b36      	ldr	r3, [pc, #216]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ad4:	441c      	add	r4, r3
 8005ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ae0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ae4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ae8:	4642      	mov	r2, r8
 8005aea:	464b      	mov	r3, r9
 8005aec:	1891      	adds	r1, r2, r2
 8005aee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005af0:	415b      	adcs	r3, r3
 8005af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005af4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005af8:	4641      	mov	r1, r8
 8005afa:	1851      	adds	r1, r2, r1
 8005afc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005afe:	4649      	mov	r1, r9
 8005b00:	414b      	adcs	r3, r1
 8005b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b10:	4659      	mov	r1, fp
 8005b12:	00cb      	lsls	r3, r1, #3
 8005b14:	4651      	mov	r1, sl
 8005b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b1a:	4651      	mov	r1, sl
 8005b1c:	00ca      	lsls	r2, r1, #3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	4619      	mov	r1, r3
 8005b22:	4603      	mov	r3, r0
 8005b24:	4642      	mov	r2, r8
 8005b26:	189b      	adds	r3, r3, r2
 8005b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b2c:	464b      	mov	r3, r9
 8005b2e:	460a      	mov	r2, r1
 8005b30:	eb42 0303 	adc.w	r3, r2, r3
 8005b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	18db      	adds	r3, r3, r3
 8005b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b52:	4613      	mov	r3, r2
 8005b54:	eb42 0303 	adc.w	r3, r2, r3
 8005b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b62:	f7fa fb3d 	bl	80001e0 <__aeabi_uldivmod>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	2164      	movs	r1, #100	@ 0x64
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	3332      	adds	r3, #50	@ 0x32
 8005b7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	f003 0207 	and.w	r2, r3, #7
 8005b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4422      	add	r2, r4
 8005b92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b94:	e106      	b.n	8005da4 <UART_SetConfig+0x4d8>
 8005b96:	bf00      	nop
 8005b98:	40011000 	.word	0x40011000
 8005b9c:	40011400 	.word	0x40011400
 8005ba0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bb6:	4642      	mov	r2, r8
 8005bb8:	464b      	mov	r3, r9
 8005bba:	1891      	adds	r1, r2, r2
 8005bbc:	6239      	str	r1, [r7, #32]
 8005bbe:	415b      	adcs	r3, r3
 8005bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bc6:	4641      	mov	r1, r8
 8005bc8:	1854      	adds	r4, r2, r1
 8005bca:	4649      	mov	r1, r9
 8005bcc:	eb43 0501 	adc.w	r5, r3, r1
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	00eb      	lsls	r3, r5, #3
 8005bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bde:	00e2      	lsls	r2, r4, #3
 8005be0:	4614      	mov	r4, r2
 8005be2:	461d      	mov	r5, r3
 8005be4:	4643      	mov	r3, r8
 8005be6:	18e3      	adds	r3, r4, r3
 8005be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bec:	464b      	mov	r3, r9
 8005bee:	eb45 0303 	adc.w	r3, r5, r3
 8005bf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c12:	4629      	mov	r1, r5
 8005c14:	008b      	lsls	r3, r1, #2
 8005c16:	4621      	mov	r1, r4
 8005c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	008a      	lsls	r2, r1, #2
 8005c20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c24:	f7fa fadc 	bl	80001e0 <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4b60      	ldr	r3, [pc, #384]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	011c      	lsls	r4, r3, #4
 8005c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c48:	4642      	mov	r2, r8
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	1891      	adds	r1, r2, r2
 8005c4e:	61b9      	str	r1, [r7, #24]
 8005c50:	415b      	adcs	r3, r3
 8005c52:	61fb      	str	r3, [r7, #28]
 8005c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c58:	4641      	mov	r1, r8
 8005c5a:	1851      	adds	r1, r2, r1
 8005c5c:	6139      	str	r1, [r7, #16]
 8005c5e:	4649      	mov	r1, r9
 8005c60:	414b      	adcs	r3, r1
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c70:	4659      	mov	r1, fp
 8005c72:	00cb      	lsls	r3, r1, #3
 8005c74:	4651      	mov	r1, sl
 8005c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c7a:	4651      	mov	r1, sl
 8005c7c:	00ca      	lsls	r2, r1, #3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4619      	mov	r1, r3
 8005c82:	4603      	mov	r3, r0
 8005c84:	4642      	mov	r2, r8
 8005c86:	189b      	adds	r3, r3, r2
 8005c88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	460a      	mov	r2, r1
 8005c90:	eb42 0303 	adc.w	r3, r2, r3
 8005c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ca2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	008b      	lsls	r3, r1, #2
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cba:	4641      	mov	r1, r8
 8005cbc:	008a      	lsls	r2, r1, #2
 8005cbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cc2:	f7fa fa8d 	bl	80001e0 <__aeabi_uldivmod>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4b38      	ldr	r3, [pc, #224]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005cce:	fba3 2301 	umull	r2, r3, r3, r1
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	2264      	movs	r2, #100	@ 0x64
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	1acb      	subs	r3, r1, r3
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	3332      	adds	r3, #50	@ 0x32
 8005ce0:	4a33      	ldr	r2, [pc, #204]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cec:	441c      	add	r4, r3
 8005cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cf6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005cf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	464b      	mov	r3, r9
 8005d00:	1891      	adds	r1, r2, r2
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	415b      	adcs	r3, r3
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	1851      	adds	r1, r2, r1
 8005d10:	6039      	str	r1, [r7, #0]
 8005d12:	4649      	mov	r1, r9
 8005d14:	414b      	adcs	r3, r1
 8005d16:	607b      	str	r3, [r7, #4]
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d24:	4659      	mov	r1, fp
 8005d26:	00cb      	lsls	r3, r1, #3
 8005d28:	4651      	mov	r1, sl
 8005d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d2e:	4651      	mov	r1, sl
 8005d30:	00ca      	lsls	r2, r1, #3
 8005d32:	4610      	mov	r0, r2
 8005d34:	4619      	mov	r1, r3
 8005d36:	4603      	mov	r3, r0
 8005d38:	4642      	mov	r2, r8
 8005d3a:	189b      	adds	r3, r3, r2
 8005d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d3e:	464b      	mov	r3, r9
 8005d40:	460a      	mov	r2, r1
 8005d42:	eb42 0303 	adc.w	r3, r2, r3
 8005d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d52:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d60:	4649      	mov	r1, r9
 8005d62:	008b      	lsls	r3, r1, #2
 8005d64:	4641      	mov	r1, r8
 8005d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d6a:	4641      	mov	r1, r8
 8005d6c:	008a      	lsls	r2, r1, #2
 8005d6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d72:	f7fa fa35 	bl	80001e0 <__aeabi_uldivmod>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	2164      	movs	r1, #100	@ 0x64
 8005d84:	fb01 f303 	mul.w	r3, r1, r3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	3332      	adds	r3, #50	@ 0x32
 8005d8e:	4a08      	ldr	r2, [pc, #32]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005d90:	fba2 2303 	umull	r2, r3, r2, r3
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	f003 020f 	and.w	r2, r3, #15
 8005d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4422      	add	r2, r4
 8005da2:	609a      	str	r2, [r3, #8]
}
 8005da4:	bf00      	nop
 8005da6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005daa:	46bd      	mov	sp, r7
 8005dac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005db0:	51eb851f 	.word	0x51eb851f

08005db4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005db4:	b084      	sub	sp, #16
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	f107 001c 	add.w	r0, r7, #28
 8005dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dc6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d123      	bne.n	8005e16 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005de2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005df6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d105      	bne.n	8005e0a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 fae8 	bl	80073e0 <USB_CoreReset>
 8005e10:	4603      	mov	r3, r0
 8005e12:	73fb      	strb	r3, [r7, #15]
 8005e14:	e01b      	b.n	8005e4e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f001 fadc 	bl	80073e0 <USB_CoreReset>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e40:	e005      	b.n	8005e4e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e4e:	7fbb      	ldrb	r3, [r7, #30]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d10b      	bne.n	8005e6c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f043 0206 	orr.w	r2, r3, #6
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f043 0220 	orr.w	r2, r3, #32
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e78:	b004      	add	sp, #16
 8005e7a:	4770      	bx	lr

08005e7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	4613      	mov	r3, r2
 8005e88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d165      	bne.n	8005f5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4a41      	ldr	r2, [pc, #260]	@ (8005f98 <USB_SetTurnaroundTime+0x11c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d906      	bls.n	8005ea6 <USB_SetTurnaroundTime+0x2a>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	4a40      	ldr	r2, [pc, #256]	@ (8005f9c <USB_SetTurnaroundTime+0x120>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d202      	bcs.n	8005ea6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005ea0:	230f      	movs	r3, #15
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	e062      	b.n	8005f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	4a3c      	ldr	r2, [pc, #240]	@ (8005f9c <USB_SetTurnaroundTime+0x120>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d306      	bcc.n	8005ebc <USB_SetTurnaroundTime+0x40>
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	4a3b      	ldr	r2, [pc, #236]	@ (8005fa0 <USB_SetTurnaroundTime+0x124>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d202      	bcs.n	8005ebc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005eb6:	230e      	movs	r3, #14
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	e057      	b.n	8005f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4a38      	ldr	r2, [pc, #224]	@ (8005fa0 <USB_SetTurnaroundTime+0x124>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d306      	bcc.n	8005ed2 <USB_SetTurnaroundTime+0x56>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4a37      	ldr	r2, [pc, #220]	@ (8005fa4 <USB_SetTurnaroundTime+0x128>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d202      	bcs.n	8005ed2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ecc:	230d      	movs	r3, #13
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	e04c      	b.n	8005f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	4a33      	ldr	r2, [pc, #204]	@ (8005fa4 <USB_SetTurnaroundTime+0x128>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d306      	bcc.n	8005ee8 <USB_SetTurnaroundTime+0x6c>
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4a32      	ldr	r2, [pc, #200]	@ (8005fa8 <USB_SetTurnaroundTime+0x12c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d802      	bhi.n	8005ee8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ee2:	230c      	movs	r3, #12
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	e041      	b.n	8005f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4a2f      	ldr	r2, [pc, #188]	@ (8005fa8 <USB_SetTurnaroundTime+0x12c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d906      	bls.n	8005efe <USB_SetTurnaroundTime+0x82>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8005fac <USB_SetTurnaroundTime+0x130>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d802      	bhi.n	8005efe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ef8:	230b      	movs	r3, #11
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	e036      	b.n	8005f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	4a2a      	ldr	r2, [pc, #168]	@ (8005fac <USB_SetTurnaroundTime+0x130>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d906      	bls.n	8005f14 <USB_SetTurnaroundTime+0x98>
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4a29      	ldr	r2, [pc, #164]	@ (8005fb0 <USB_SetTurnaroundTime+0x134>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d802      	bhi.n	8005f14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005f0e:	230a      	movs	r3, #10
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	e02b      	b.n	8005f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4a26      	ldr	r2, [pc, #152]	@ (8005fb0 <USB_SetTurnaroundTime+0x134>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d906      	bls.n	8005f2a <USB_SetTurnaroundTime+0xae>
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4a25      	ldr	r2, [pc, #148]	@ (8005fb4 <USB_SetTurnaroundTime+0x138>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d202      	bcs.n	8005f2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f24:	2309      	movs	r3, #9
 8005f26:	617b      	str	r3, [r7, #20]
 8005f28:	e020      	b.n	8005f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	4a21      	ldr	r2, [pc, #132]	@ (8005fb4 <USB_SetTurnaroundTime+0x138>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d306      	bcc.n	8005f40 <USB_SetTurnaroundTime+0xc4>
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4a20      	ldr	r2, [pc, #128]	@ (8005fb8 <USB_SetTurnaroundTime+0x13c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d802      	bhi.n	8005f40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f3a:	2308      	movs	r3, #8
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	e015      	b.n	8005f6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4a1d      	ldr	r2, [pc, #116]	@ (8005fb8 <USB_SetTurnaroundTime+0x13c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d906      	bls.n	8005f56 <USB_SetTurnaroundTime+0xda>
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005fbc <USB_SetTurnaroundTime+0x140>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d202      	bcs.n	8005f56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f50:	2307      	movs	r3, #7
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	e00a      	b.n	8005f6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f56:	2306      	movs	r3, #6
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	e007      	b.n	8005f6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d102      	bne.n	8005f68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f62:	2309      	movs	r3, #9
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	e001      	b.n	8005f6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f68:	2309      	movs	r3, #9
 8005f6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	029b      	lsls	r3, r3, #10
 8005f80:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005f84:	431a      	orrs	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	371c      	adds	r7, #28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	00d8acbf 	.word	0x00d8acbf
 8005f9c:	00e4e1c0 	.word	0x00e4e1c0
 8005fa0:	00f42400 	.word	0x00f42400
 8005fa4:	01067380 	.word	0x01067380
 8005fa8:	011a499f 	.word	0x011a499f
 8005fac:	01312cff 	.word	0x01312cff
 8005fb0:	014ca43f 	.word	0x014ca43f
 8005fb4:	016e3600 	.word	0x016e3600
 8005fb8:	01a6ab1f 	.word	0x01a6ab1f
 8005fbc:	01e84800 	.word	0x01e84800

08005fc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f043 0201 	orr.w	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f023 0201 	bic.w	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d115      	bne.n	8006052 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006032:	200a      	movs	r0, #10
 8006034:	f7fb f886 	bl	8001144 <HAL_Delay>
      ms += 10U;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	330a      	adds	r3, #10
 800603c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f001 f93f 	bl	80072c2 <USB_GetMode>
 8006044:	4603      	mov	r3, r0
 8006046:	2b01      	cmp	r3, #1
 8006048:	d01e      	beq.n	8006088 <USB_SetCurrentMode+0x84>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2bc7      	cmp	r3, #199	@ 0xc7
 800604e:	d9f0      	bls.n	8006032 <USB_SetCurrentMode+0x2e>
 8006050:	e01a      	b.n	8006088 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006052:	78fb      	ldrb	r3, [r7, #3]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d115      	bne.n	8006084 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006064:	200a      	movs	r0, #10
 8006066:	f7fb f86d 	bl	8001144 <HAL_Delay>
      ms += 10U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	330a      	adds	r3, #10
 800606e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 f926 	bl	80072c2 <USB_GetMode>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <USB_SetCurrentMode+0x84>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006080:	d9f0      	bls.n	8006064 <USB_SetCurrentMode+0x60>
 8006082:	e001      	b.n	8006088 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e005      	b.n	8006094 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2bc8      	cmp	r3, #200	@ 0xc8
 800608c:	d101      	bne.n	8006092 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800609c:	b084      	sub	sp, #16
 800609e:	b580      	push	{r7, lr}
 80060a0:	b086      	sub	sp, #24
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80060aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	e009      	b.n	80060d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	3340      	adds	r3, #64	@ 0x40
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	2200      	movs	r2, #0
 80060c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	3301      	adds	r3, #1
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b0e      	cmp	r3, #14
 80060d4:	d9f2      	bls.n	80060bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d11c      	bne.n	8006118 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060ec:	f043 0302 	orr.w	r3, r3, #2
 80060f0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006102:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	639a      	str	r2, [r3, #56]	@ 0x38
 8006116:	e00b      	b.n	8006130 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006128:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006136:	461a      	mov	r2, r3
 8006138:	2300      	movs	r3, #0
 800613a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800613c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006140:	2b01      	cmp	r3, #1
 8006142:	d10d      	bne.n	8006160 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006148:	2b00      	cmp	r3, #0
 800614a:	d104      	bne.n	8006156 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800614c:	2100      	movs	r1, #0
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f968 	bl	8006424 <USB_SetDevSpeed>
 8006154:	e008      	b.n	8006168 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006156:	2101      	movs	r1, #1
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f963 	bl	8006424 <USB_SetDevSpeed>
 800615e:	e003      	b.n	8006168 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006160:	2103      	movs	r1, #3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f95e 	bl	8006424 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006168:	2110      	movs	r1, #16
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f8fa 	bl	8006364 <USB_FlushTxFifo>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f924 	bl	80063c8 <USB_FlushRxFifo>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006190:	461a      	mov	r2, r3
 8006192:	2300      	movs	r3, #0
 8006194:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800619c:	461a      	mov	r2, r3
 800619e:	2300      	movs	r3, #0
 80061a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061a8:	461a      	mov	r2, r3
 80061aa:	2300      	movs	r3, #0
 80061ac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061ae:	2300      	movs	r3, #0
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	e043      	b.n	800623c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061ca:	d118      	bne.n	80061fe <USB_DevInit+0x162>
    {
      if (i == 0U)
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061de:	461a      	mov	r2, r3
 80061e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	e013      	b.n	8006210 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f4:	461a      	mov	r2, r3
 80061f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	e008      	b.n	8006210 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800620a:	461a      	mov	r2, r3
 800620c:	2300      	movs	r3, #0
 800620e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800621c:	461a      	mov	r2, r3
 800621e:	2300      	movs	r3, #0
 8006220:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800622e:	461a      	mov	r2, r3
 8006230:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006234:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	3301      	adds	r3, #1
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006240:	461a      	mov	r2, r3
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	4293      	cmp	r3, r2
 8006246:	d3b5      	bcc.n	80061b4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006248:	2300      	movs	r3, #0
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	e043      	b.n	80062d6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006260:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006264:	d118      	bne.n	8006298 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006278:	461a      	mov	r2, r3
 800627a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	e013      	b.n	80062aa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800628e:	461a      	mov	r2, r3
 8006290:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	e008      	b.n	80062aa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a4:	461a      	mov	r2, r3
 80062a6:	2300      	movs	r3, #0
 80062a8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b6:	461a      	mov	r2, r3
 80062b8:	2300      	movs	r3, #0
 80062ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c8:	461a      	mov	r2, r3
 80062ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80062ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	3301      	adds	r3, #1
 80062d4:	613b      	str	r3, [r7, #16]
 80062d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062da:	461a      	mov	r2, r3
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	4293      	cmp	r3, r2
 80062e0:	d3b5      	bcc.n	800624e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062f4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006302:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006304:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006308:	2b00      	cmp	r3, #0
 800630a:	d105      	bne.n	8006318 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	f043 0210 	orr.w	r2, r3, #16
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699a      	ldr	r2, [r3, #24]
 800631c:	4b10      	ldr	r3, [pc, #64]	@ (8006360 <USB_DevInit+0x2c4>)
 800631e:	4313      	orrs	r3, r2
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006324:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	f043 0208 	orr.w	r2, r3, #8
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006338:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800633c:	2b01      	cmp	r3, #1
 800633e:	d107      	bne.n	8006350 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006348:	f043 0304 	orr.w	r3, r3, #4
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800635c:	b004      	add	sp, #16
 800635e:	4770      	bx	lr
 8006360:	803c3800 	.word	0x803c3800

08006364 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3301      	adds	r3, #1
 8006376:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800637e:	d901      	bls.n	8006384 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e01b      	b.n	80063bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	daf2      	bge.n	8006372 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	019b      	lsls	r3, r3, #6
 8006394:	f043 0220 	orr.w	r2, r3, #32
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063a8:	d901      	bls.n	80063ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e006      	b.n	80063bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d0f0      	beq.n	800639c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3301      	adds	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063e0:	d901      	bls.n	80063e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e018      	b.n	8006418 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	daf2      	bge.n	80063d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2210      	movs	r2, #16
 80063f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3301      	adds	r3, #1
 80063fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006404:	d901      	bls.n	800640a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e006      	b.n	8006418 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	2b10      	cmp	r3, #16
 8006414:	d0f0      	beq.n	80063f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	68f9      	ldr	r1, [r7, #12]
 8006440:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006444:	4313      	orrs	r3, r2
 8006446:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006456:	b480      	push	{r7}
 8006458:	b087      	sub	sp, #28
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 0306 	and.w	r3, r3, #6
 800646e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d102      	bne.n	800647c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006476:	2300      	movs	r3, #0
 8006478:	75fb      	strb	r3, [r7, #23]
 800647a:	e00a      	b.n	8006492 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b02      	cmp	r3, #2
 8006480:	d002      	beq.n	8006488 <USB_GetDevSpeed+0x32>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b06      	cmp	r3, #6
 8006486:	d102      	bne.n	800648e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006488:	2302      	movs	r3, #2
 800648a:	75fb      	strb	r3, [r7, #23]
 800648c:	e001      	b.n	8006492 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800648e:	230f      	movs	r3, #15
 8006490:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006492:	7dfb      	ldrb	r3, [r7, #23]
}
 8006494:	4618      	mov	r0, r3
 8006496:	371c      	adds	r7, #28
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	785b      	ldrb	r3, [r3, #1]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d13a      	bne.n	8006532 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	2101      	movs	r1, #1
 80064ce:	fa01 f303 	lsl.w	r3, r1, r3
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	68f9      	ldr	r1, [r7, #12]
 80064d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064da:	4313      	orrs	r3, r2
 80064dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d155      	bne.n	80065a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	791b      	ldrb	r3, [r3, #4]
 800650e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006510:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	059b      	lsls	r3, r3, #22
 8006516:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006518:	4313      	orrs	r3, r2
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	440a      	add	r2, r1
 8006522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800652a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	e036      	b.n	80065a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006538:	69da      	ldr	r2, [r3, #28]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	2101      	movs	r1, #1
 8006544:	fa01 f303 	lsl.w	r3, r1, r3
 8006548:	041b      	lsls	r3, r3, #16
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006550:	4313      	orrs	r3, r2
 8006552:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d11a      	bne.n	80065a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	791b      	ldrb	r3, [r3, #4]
 8006584:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006586:	430b      	orrs	r3, r1
 8006588:	4313      	orrs	r3, r2
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	440a      	add	r2, r1
 8006592:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800659a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800659e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
	...

080065b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	785b      	ldrb	r3, [r3, #1]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d161      	bne.n	8006690 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065e2:	d11f      	bne.n	8006624 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006602:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	440a      	add	r2, r1
 800661a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800661e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006622:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800662a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	2101      	movs	r1, #1
 8006636:	fa01 f303 	lsl.w	r3, r1, r3
 800663a:	b29b      	uxth	r3, r3
 800663c:	43db      	mvns	r3, r3
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006644:	4013      	ands	r3, r2
 8006646:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800664e:	69da      	ldr	r2, [r3, #28]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	2101      	movs	r1, #1
 800665a:	fa01 f303 	lsl.w	r3, r1, r3
 800665e:	b29b      	uxth	r3, r3
 8006660:	43db      	mvns	r3, r3
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006668:	4013      	ands	r3, r2
 800666a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	0159      	lsls	r1, r3, #5
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	440b      	add	r3, r1
 8006682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006686:	4619      	mov	r1, r3
 8006688:	4b35      	ldr	r3, [pc, #212]	@ (8006760 <USB_DeactivateEndpoint+0x1b0>)
 800668a:	4013      	ands	r3, r2
 800668c:	600b      	str	r3, [r1, #0]
 800668e:	e060      	b.n	8006752 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066a6:	d11f      	bne.n	80066e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	2101      	movs	r1, #1
 80066fa:	fa01 f303 	lsl.w	r3, r1, r3
 80066fe:	041b      	lsls	r3, r3, #16
 8006700:	43db      	mvns	r3, r3
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006708:	4013      	ands	r3, r2
 800670a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006712:	69da      	ldr	r2, [r3, #28]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	f003 030f 	and.w	r3, r3, #15
 800671c:	2101      	movs	r1, #1
 800671e:	fa01 f303 	lsl.w	r3, r1, r3
 8006722:	041b      	lsls	r3, r3, #16
 8006724:	43db      	mvns	r3, r3
 8006726:	68f9      	ldr	r1, [r7, #12]
 8006728:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800672c:	4013      	ands	r3, r2
 800672e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	0159      	lsls	r1, r3, #5
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	440b      	add	r3, r1
 8006746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800674a:	4619      	mov	r1, r3
 800674c:	4b05      	ldr	r3, [pc, #20]	@ (8006764 <USB_DeactivateEndpoint+0x1b4>)
 800674e:	4013      	ands	r3, r2
 8006750:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	ec337800 	.word	0xec337800
 8006764:	eff37800 	.word	0xeff37800

08006768 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	@ 0x28
 800676c:	af02      	add	r7, sp, #8
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	4613      	mov	r3, r2
 8006774:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	785b      	ldrb	r3, [r3, #1]
 8006784:	2b01      	cmp	r3, #1
 8006786:	f040 817f 	bne.w	8006a88 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d132      	bne.n	80067f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80067b0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80067b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	69fa      	ldr	r2, [r7, #28]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	0151      	lsls	r1, r2, #5
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	440a      	add	r2, r1
 80067ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067f0:	0cdb      	lsrs	r3, r3, #19
 80067f2:	04db      	lsls	r3, r3, #19
 80067f4:	6113      	str	r3, [r2, #16]
 80067f6:	e097      	b.n	8006928 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	69ba      	ldr	r2, [r7, #24]
 8006808:	0151      	lsls	r1, r2, #5
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	440a      	add	r2, r1
 800680e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006812:	0cdb      	lsrs	r3, r3, #19
 8006814:	04db      	lsls	r3, r3, #19
 8006816:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	0151      	lsls	r1, r2, #5
 800682a:	69fa      	ldr	r2, [r7, #28]
 800682c:	440a      	add	r2, r1
 800682e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006832:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006836:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800683a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d11a      	bne.n	8006878 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	691a      	ldr	r2, [r3, #16]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	429a      	cmp	r2, r3
 800684c:	d903      	bls.n	8006856 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	689a      	ldr	r2, [r3, #8]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	0151      	lsls	r1, r2, #5
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	440a      	add	r2, r1
 800686c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006870:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006874:	6113      	str	r3, [r2, #16]
 8006876:	e044      	b.n	8006902 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	691a      	ldr	r2, [r3, #16]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	4413      	add	r3, r2
 8006882:	1e5a      	subs	r2, r3, #1
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	fbb2 f3f3 	udiv	r3, r2, r3
 800688c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	8afb      	ldrh	r3, [r7, #22]
 800689e:	04d9      	lsls	r1, r3, #19
 80068a0:	4ba4      	ldr	r3, [pc, #656]	@ (8006b34 <USB_EPStartXfer+0x3cc>)
 80068a2:	400b      	ands	r3, r1
 80068a4:	69b9      	ldr	r1, [r7, #24]
 80068a6:	0148      	lsls	r0, r1, #5
 80068a8:	69f9      	ldr	r1, [r7, #28]
 80068aa:	4401      	add	r1, r0
 80068ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80068b0:	4313      	orrs	r3, r2
 80068b2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	791b      	ldrb	r3, [r3, #4]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d122      	bne.n	8006902 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	0151      	lsls	r1, r2, #5
 80068ce:	69fa      	ldr	r2, [r7, #28]
 80068d0:	440a      	add	r2, r1
 80068d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068d6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80068da:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e8:	691a      	ldr	r2, [r3, #16]
 80068ea:	8afb      	ldrh	r3, [r7, #22]
 80068ec:	075b      	lsls	r3, r3, #29
 80068ee:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80068f2:	69b9      	ldr	r1, [r7, #24]
 80068f4:	0148      	lsls	r0, r1, #5
 80068f6:	69f9      	ldr	r1, [r7, #28]
 80068f8:	4401      	add	r1, r0
 80068fa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80068fe:	4313      	orrs	r3, r2
 8006900:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006918:	69b9      	ldr	r1, [r7, #24]
 800691a:	0148      	lsls	r0, r1, #5
 800691c:	69f9      	ldr	r1, [r7, #28]
 800691e:	4401      	add	r1, r0
 8006920:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006924:	4313      	orrs	r3, r2
 8006926:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d14b      	bne.n	80069c6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006942:	461a      	mov	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	791b      	ldrb	r3, [r3, #4]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d128      	bne.n	80069a4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800695e:	2b00      	cmp	r3, #0
 8006960:	d110      	bne.n	8006984 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	0151      	lsls	r1, r2, #5
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	440a      	add	r2, r1
 8006978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800697c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	e00f      	b.n	80069a4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800699e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069a2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	e166      	b.n	8006c94 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	69fa      	ldr	r2, [r7, #28]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069e4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	791b      	ldrb	r3, [r3, #4]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d015      	beq.n	8006a1a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 814e 	beq.w	8006c94 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	2101      	movs	r1, #1
 8006a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a0e:	69f9      	ldr	r1, [r7, #28]
 8006a10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a14:	4313      	orrs	r3, r2
 8006a16:	634b      	str	r3, [r1, #52]	@ 0x34
 8006a18:	e13c      	b.n	8006c94 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d110      	bne.n	8006a4c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	0151      	lsls	r1, r2, #5
 8006a3c:	69fa      	ldr	r2, [r7, #28]
 8006a3e:	440a      	add	r2, r1
 8006a40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	e00f      	b.n	8006a6c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	0151      	lsls	r1, r2, #5
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	440a      	add	r2, r1
 8006a62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a6a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	68d9      	ldr	r1, [r3, #12]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	781a      	ldrb	r2, [r3, #0]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	b298      	uxth	r0, r3
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	4603      	mov	r3, r0
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f9b9 	bl	8006df8 <USB_WritePacket>
 8006a86:	e105      	b.n	8006c94 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	0151      	lsls	r1, r2, #5
 8006a9a:	69fa      	ldr	r2, [r7, #28]
 8006a9c:	440a      	add	r2, r1
 8006a9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aa2:	0cdb      	lsrs	r3, r3, #19
 8006aa4:	04db      	lsls	r3, r3, #19
 8006aa6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ac2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ac6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006aca:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d132      	bne.n	8006b38 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b00:	69b9      	ldr	r1, [r7, #24]
 8006b02:	0148      	lsls	r0, r1, #5
 8006b04:	69f9      	ldr	r1, [r7, #28]
 8006b06:	4401      	add	r1, r0
 8006b08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b2e:	6113      	str	r3, [r2, #16]
 8006b30:	e062      	b.n	8006bf8 <USB_EPStartXfer+0x490>
 8006b32:	bf00      	nop
 8006b34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d123      	bne.n	8006b88 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b4c:	691a      	ldr	r2, [r3, #16]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b56:	69b9      	ldr	r1, [r7, #24]
 8006b58:	0148      	lsls	r0, r1, #5
 8006b5a:	69f9      	ldr	r1, [r7, #28]
 8006b5c:	4401      	add	r1, r0
 8006b5e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b62:	4313      	orrs	r3, r2
 8006b64:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	0151      	lsls	r1, r2, #5
 8006b78:	69fa      	ldr	r2, [r7, #28]
 8006b7a:	440a      	add	r2, r1
 8006b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b84:	6113      	str	r3, [r2, #16]
 8006b86:	e037      	b.n	8006bf8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	691a      	ldr	r2, [r3, #16]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	4413      	add	r3, r2
 8006b92:	1e5a      	subs	r2, r3, #1
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	8afa      	ldrh	r2, [r7, #22]
 8006ba4:	fb03 f202 	mul.w	r2, r3, r2
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bb8:	691a      	ldr	r2, [r3, #16]
 8006bba:	8afb      	ldrh	r3, [r7, #22]
 8006bbc:	04d9      	lsls	r1, r3, #19
 8006bbe:	4b38      	ldr	r3, [pc, #224]	@ (8006ca0 <USB_EPStartXfer+0x538>)
 8006bc0:	400b      	ands	r3, r1
 8006bc2:	69b9      	ldr	r1, [r7, #24]
 8006bc4:	0148      	lsls	r0, r1, #5
 8006bc6:	69f9      	ldr	r1, [r7, #28]
 8006bc8:	4401      	add	r1, r0
 8006bca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006be8:	69b9      	ldr	r1, [r7, #24]
 8006bea:	0148      	lsls	r0, r1, #5
 8006bec:	69f9      	ldr	r1, [r7, #28]
 8006bee:	4401      	add	r1, r0
 8006bf0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d10d      	bne.n	8006c1a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d009      	beq.n	8006c1a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	68d9      	ldr	r1, [r3, #12]
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c16:	460a      	mov	r2, r1
 8006c18:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	791b      	ldrb	r3, [r3, #4]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d128      	bne.n	8006c74 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d110      	bne.n	8006c54 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	0151      	lsls	r1, r2, #5
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	440a      	add	r2, r1
 8006c48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	e00f      	b.n	8006c74 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	0151      	lsls	r1, r2, #5
 8006c66:	69fa      	ldr	r2, [r7, #28]
 8006c68:	440a      	add	r2, r1
 8006c6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c8e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3720      	adds	r7, #32
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	1ff80000 	.word	0x1ff80000

08006ca4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	785b      	ldrb	r3, [r3, #1]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d14a      	bne.n	8006d58 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cda:	f040 8086 	bne.w	8006dea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	7812      	ldrb	r2, [r2, #0]
 8006cf2:	0151      	lsls	r1, r2, #5
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	440a      	add	r2, r1
 8006cf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cfc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d00:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	7812      	ldrb	r2, [r2, #0]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d902      	bls.n	8006d3c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	75fb      	strb	r3, [r7, #23]
          break;
 8006d3a:	e056      	b.n	8006dea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d54:	d0e7      	beq.n	8006d26 <USB_EPStopXfer+0x82>
 8006d56:	e048      	b.n	8006dea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d70:	d13b      	bne.n	8006dea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	7812      	ldrb	r2, [r2, #0]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d94:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	7812      	ldrb	r2, [r2, #0]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006db4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006db8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d902      	bls.n	8006dd0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	75fb      	strb	r3, [r7, #23]
          break;
 8006dce:	e00c      	b.n	8006dea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006de4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006de8:	d0e7      	beq.n	8006dba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b089      	sub	sp, #36	@ 0x24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	4611      	mov	r1, r2
 8006e04:	461a      	mov	r2, r3
 8006e06:	460b      	mov	r3, r1
 8006e08:	71fb      	strb	r3, [r7, #7]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d123      	bne.n	8006e66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e1e:	88bb      	ldrh	r3, [r7, #4]
 8006e20:	3303      	adds	r3, #3
 8006e22:	089b      	lsrs	r3, r3, #2
 8006e24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e26:	2300      	movs	r3, #0
 8006e28:	61bb      	str	r3, [r7, #24]
 8006e2a:	e018      	b.n	8006e5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	031a      	lsls	r2, r3, #12
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e38:	461a      	mov	r2, r3
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	3301      	adds	r3, #1
 8006e44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	3301      	adds	r3, #1
 8006e56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	61bb      	str	r3, [r7, #24]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d3e2      	bcc.n	8006e2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3724      	adds	r7, #36	@ 0x24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b08b      	sub	sp, #44	@ 0x2c
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e8a:	88fb      	ldrh	r3, [r7, #6]
 8006e8c:	089b      	lsrs	r3, r3, #2
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e92:	88fb      	ldrh	r3, [r7, #6]
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	623b      	str	r3, [r7, #32]
 8006e9e:	e014      	b.n	8006eca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	601a      	str	r2, [r3, #0]
    pDest++;
 8006eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eae:	3301      	adds	r3, #1
 8006eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	3301      	adds	r3, #1
 8006ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	623b      	str	r3, [r7, #32]
 8006eca:	6a3a      	ldr	r2, [r7, #32]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d3e6      	bcc.n	8006ea0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ed2:	8bfb      	ldrh	r3, [r7, #30]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01e      	beq.n	8006f16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f107 0310 	add.w	r3, r7, #16
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	701a      	strb	r2, [r3, #0]
      i++;
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	3301      	adds	r3, #1
 8006f02:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	3301      	adds	r3, #1
 8006f08:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006f0a:	8bfb      	ldrh	r3, [r7, #30]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f10:	8bfb      	ldrh	r3, [r7, #30]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1ea      	bne.n	8006eec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	372c      	adds	r7, #44	@ 0x2c
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	785b      	ldrb	r3, [r3, #1]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d12c      	bne.n	8006f9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	db12      	blt.n	8006f78 <USB_EPSetStall+0x54>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00f      	beq.n	8006f78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	0151      	lsls	r1, r2, #5
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	440a      	add	r2, r1
 8006f6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	0151      	lsls	r1, r2, #5
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	440a      	add	r2, r1
 8006f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	e02b      	b.n	8006ff2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	db12      	blt.n	8006fd2 <USB_EPSetStall+0xae>
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00f      	beq.n	8006fd2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fcc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006fd0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ff0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	785b      	ldrb	r3, [r3, #1]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d128      	bne.n	800706e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	440a      	add	r2, r1
 8007032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007036:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800703a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	791b      	ldrb	r3, [r3, #4]
 8007040:	2b03      	cmp	r3, #3
 8007042:	d003      	beq.n	800704c <USB_EPClearStall+0x4c>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	791b      	ldrb	r3, [r3, #4]
 8007048:	2b02      	cmp	r3, #2
 800704a:	d138      	bne.n	80070be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	0151      	lsls	r1, r2, #5
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	440a      	add	r2, r1
 8007062:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	e027      	b.n	80070be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	0151      	lsls	r1, r2, #5
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	440a      	add	r2, r1
 8007084:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007088:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800708c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	791b      	ldrb	r3, [r3, #4]
 8007092:	2b03      	cmp	r3, #3
 8007094:	d003      	beq.n	800709e <USB_EPClearStall+0x9e>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	791b      	ldrb	r3, [r3, #4]
 800709a:	2b02      	cmp	r3, #2
 800709c:	d10f      	bne.n	80070be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	0151      	lsls	r1, r2, #5
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	440a      	add	r2, r1
 80070b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80070ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007100:	68f9      	ldr	r1, [r7, #12]
 8007102:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007106:	4313      	orrs	r3, r2
 8007108:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007132:	f023 0303 	bic.w	r3, r3, #3
 8007136:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007146:	f023 0302 	bic.w	r3, r3, #2
 800714a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800715a:	b480      	push	{r7}
 800715c:	b085      	sub	sp, #20
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007174:	f023 0303 	bic.w	r3, r3, #3
 8007178:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007188:	f043 0302 	orr.w	r3, r3, #2
 800718c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4013      	ands	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80071b4:	68fb      	ldr	r3, [r7, #12]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	4013      	ands	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	0c1b      	lsrs	r3, r3, #16
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b085      	sub	sp, #20
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	4013      	ands	r3, r2
 8007218:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	b29b      	uxth	r3, r3
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800722a:	b480      	push	{r7}
 800722c:	b085      	sub	sp, #20
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	4013      	ands	r3, r2
 8007256:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007258:	68bb      	ldr	r3, [r7, #8]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007266:	b480      	push	{r7}
 8007268:	b087      	sub	sp, #28
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	460b      	mov	r3, r1
 8007270:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007288:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	f003 030f 	and.w	r3, r3, #15
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	fa22 f303 	lsr.w	r3, r2, r3
 8007296:	01db      	lsls	r3, r3, #7
 8007298:	b2db      	uxtb	r3, r3
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4313      	orrs	r3, r2
 800729e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4013      	ands	r3, r2
 80072b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072b4:	68bb      	ldr	r3, [r7, #8]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	f003 0301 	and.w	r3, r3, #1
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80072de:	b480      	push	{r7}
 80072e0:	b085      	sub	sp, #20
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80072fc:	f023 0307 	bic.w	r3, r3, #7
 8007300:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007314:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	460b      	mov	r3, r1
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	333c      	adds	r3, #60	@ 0x3c
 800733a:	3304      	adds	r3, #4
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	4a26      	ldr	r2, [pc, #152]	@ (80073dc <USB_EP0_OutStart+0xb8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d90a      	bls.n	800735e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007358:	d101      	bne.n	800735e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	e037      	b.n	80073ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007364:	461a      	mov	r2, r3
 8007366:	2300      	movs	r3, #0
 8007368:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007378:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800737c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800738c:	f043 0318 	orr.w	r3, r3, #24
 8007390:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073a0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80073a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80073a6:	7afb      	ldrb	r3, [r7, #11]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d10f      	bne.n	80073cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b2:	461a      	mov	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073c6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80073ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	371c      	adds	r7, #28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	4f54300a 	.word	0x4f54300a

080073e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	3301      	adds	r3, #1
 80073f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073f8:	d901      	bls.n	80073fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e01b      	b.n	8007436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	daf2      	bge.n	80073ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f043 0201 	orr.w	r2, r3, #1
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3301      	adds	r3, #1
 800741a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007422:	d901      	bls.n	8007428 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e006      	b.n	8007436 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b01      	cmp	r3, #1
 8007432:	d0f0      	beq.n	8007416 <USB_CoreReset+0x36>

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
	...

08007444 <__NVIC_SetPriority>:
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007454:	2b00      	cmp	r3, #0
 8007456:	db0a      	blt.n	800746e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	b2da      	uxtb	r2, r3
 800745c:	490c      	ldr	r1, [pc, #48]	@ (8007490 <__NVIC_SetPriority+0x4c>)
 800745e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007462:	0112      	lsls	r2, r2, #4
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	440b      	add	r3, r1
 8007468:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800746c:	e00a      	b.n	8007484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	b2da      	uxtb	r2, r3
 8007472:	4908      	ldr	r1, [pc, #32]	@ (8007494 <__NVIC_SetPriority+0x50>)
 8007474:	79fb      	ldrb	r3, [r7, #7]
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	3b04      	subs	r3, #4
 800747c:	0112      	lsls	r2, r2, #4
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	440b      	add	r3, r1
 8007482:	761a      	strb	r2, [r3, #24]
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	e000e100 	.word	0xe000e100
 8007494:	e000ed00 	.word	0xe000ed00

08007498 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800749c:	4b05      	ldr	r3, [pc, #20]	@ (80074b4 <SysTick_Handler+0x1c>)
 800749e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80074a0:	f002 ff08 	bl	800a2b4 <xTaskGetSchedulerState>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d001      	beq.n	80074ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80074aa:	f000 ffed 	bl	8008488 <xPortSysTickHandler>
  }
}
 80074ae:	bf00      	nop
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	e000e010 	.word	0xe000e010

080074b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80074bc:	2100      	movs	r1, #0
 80074be:	f06f 0004 	mvn.w	r0, #4
 80074c2:	f7ff ffbf 	bl	8007444 <__NVIC_SetPriority>
#endif
}
 80074c6:	bf00      	nop
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074d2:	f3ef 8305 	mrs	r3, IPSR
 80074d6:	603b      	str	r3, [r7, #0]
  return(result);
 80074d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80074de:	f06f 0305 	mvn.w	r3, #5
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	e00c      	b.n	8007500 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80074e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007510 <osKernelInitialize+0x44>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d105      	bne.n	80074fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80074ee:	4b08      	ldr	r3, [pc, #32]	@ (8007510 <osKernelInitialize+0x44>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	607b      	str	r3, [r7, #4]
 80074f8:	e002      	b.n	8007500 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80074fa:	f04f 33ff 	mov.w	r3, #4294967295
 80074fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007500:	687b      	ldr	r3, [r7, #4]
}
 8007502:	4618      	mov	r0, r3
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	20000314 	.word	0x20000314

08007514 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800751a:	f3ef 8305 	mrs	r3, IPSR
 800751e:	603b      	str	r3, [r7, #0]
  return(result);
 8007520:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007526:	f06f 0305 	mvn.w	r3, #5
 800752a:	607b      	str	r3, [r7, #4]
 800752c:	e010      	b.n	8007550 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800752e:	4b0b      	ldr	r3, [pc, #44]	@ (800755c <osKernelStart+0x48>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d109      	bne.n	800754a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007536:	f7ff ffbf 	bl	80074b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800753a:	4b08      	ldr	r3, [pc, #32]	@ (800755c <osKernelStart+0x48>)
 800753c:	2202      	movs	r2, #2
 800753e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007540:	f002 fa54 	bl	80099ec <vTaskStartScheduler>
      stat = osOK;
 8007544:	2300      	movs	r3, #0
 8007546:	607b      	str	r3, [r7, #4]
 8007548:	e002      	b.n	8007550 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800754a:	f04f 33ff 	mov.w	r3, #4294967295
 800754e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007550:	687b      	ldr	r3, [r7, #4]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20000314 	.word	0x20000314

08007560 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007560:	b580      	push	{r7, lr}
 8007562:	b08e      	sub	sp, #56	@ 0x38
 8007564:	af04      	add	r7, sp, #16
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800756c:	2300      	movs	r3, #0
 800756e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007570:	f3ef 8305 	mrs	r3, IPSR
 8007574:	617b      	str	r3, [r7, #20]
  return(result);
 8007576:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007578:	2b00      	cmp	r3, #0
 800757a:	d17e      	bne.n	800767a <osThreadNew+0x11a>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d07b      	beq.n	800767a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007582:	2380      	movs	r3, #128	@ 0x80
 8007584:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007586:	2318      	movs	r3, #24
 8007588:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800758a:	2300      	movs	r3, #0
 800758c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800758e:	f04f 33ff 	mov.w	r3, #4294967295
 8007592:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d045      	beq.n	8007626 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <osThreadNew+0x48>
        name = attr->name;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d008      	beq.n	80075ce <osThreadNew+0x6e>
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	2b38      	cmp	r3, #56	@ 0x38
 80075c0:	d805      	bhi.n	80075ce <osThreadNew+0x6e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <osThreadNew+0x72>
        return (NULL);
 80075ce:	2300      	movs	r3, #0
 80075d0:	e054      	b.n	800767c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	089b      	lsrs	r3, r3, #2
 80075e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00e      	beq.n	8007608 <osThreadNew+0xa8>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	2ba7      	cmp	r3, #167	@ 0xa7
 80075f0:	d90a      	bls.n	8007608 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d006      	beq.n	8007608 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <osThreadNew+0xa8>
        mem = 1;
 8007602:	2301      	movs	r3, #1
 8007604:	61bb      	str	r3, [r7, #24]
 8007606:	e010      	b.n	800762a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10c      	bne.n	800762a <osThreadNew+0xca>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d108      	bne.n	800762a <osThreadNew+0xca>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d104      	bne.n	800762a <osThreadNew+0xca>
          mem = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	61bb      	str	r3, [r7, #24]
 8007624:	e001      	b.n	800762a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d110      	bne.n	8007652 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007638:	9202      	str	r2, [sp, #8]
 800763a:	9301      	str	r3, [sp, #4]
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	6a3a      	ldr	r2, [r7, #32]
 8007644:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f001 ffdc 	bl	8009604 <xTaskCreateStatic>
 800764c:	4603      	mov	r3, r0
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	e013      	b.n	800767a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d110      	bne.n	800767a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	b29a      	uxth	r2, r3
 800765c:	f107 0310 	add.w	r3, r7, #16
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f002 f82a 	bl	80096c4 <xTaskCreate>
 8007670:	4603      	mov	r3, r0
 8007672:	2b01      	cmp	r3, #1
 8007674:	d001      	beq.n	800767a <osThreadNew+0x11a>
            hTask = NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800767a:	693b      	ldr	r3, [r7, #16]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3728      	adds	r7, #40	@ 0x28
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800768c:	f3ef 8305 	mrs	r3, IPSR
 8007690:	60bb      	str	r3, [r7, #8]
  return(result);
 8007692:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <osDelay+0x1c>
    stat = osErrorISR;
 8007698:	f06f 0305 	mvn.w	r3, #5
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	e007      	b.n	80076b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f002 f968 	bl	8009980 <vTaskDelay>
    }
  }

  return (stat);
 80076b0:	68fb      	ldr	r3, [r7, #12]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b08a      	sub	sp, #40	@ 0x28
 80076be:	af02      	add	r7, sp, #8
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ca:	f3ef 8305 	mrs	r3, IPSR
 80076ce:	613b      	str	r3, [r7, #16]
  return(result);
 80076d0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d175      	bne.n	80077c2 <osSemaphoreNew+0x108>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d072      	beq.n	80077c2 <osSemaphoreNew+0x108>
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d86e      	bhi.n	80077c2 <osSemaphoreNew+0x108>
    mem = -1;
 80076e4:	f04f 33ff 	mov.w	r3, #4294967295
 80076e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d015      	beq.n	800771c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d006      	beq.n	8007706 <osSemaphoreNew+0x4c>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	2b4f      	cmp	r3, #79	@ 0x4f
 80076fe:	d902      	bls.n	8007706 <osSemaphoreNew+0x4c>
        mem = 1;
 8007700:	2301      	movs	r3, #1
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	e00c      	b.n	8007720 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d108      	bne.n	8007720 <osSemaphoreNew+0x66>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d104      	bne.n	8007720 <osSemaphoreNew+0x66>
          mem = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	61bb      	str	r3, [r7, #24]
 800771a:	e001      	b.n	8007720 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007726:	d04c      	beq.n	80077c2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d128      	bne.n	8007780 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d10a      	bne.n	800774a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	2203      	movs	r2, #3
 800773a:	9200      	str	r2, [sp, #0]
 800773c:	2200      	movs	r2, #0
 800773e:	2100      	movs	r1, #0
 8007740:	2001      	movs	r0, #1
 8007742:	f000 ff9d 	bl	8008680 <xQueueGenericCreateStatic>
 8007746:	61f8      	str	r0, [r7, #28]
 8007748:	e005      	b.n	8007756 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800774a:	2203      	movs	r2, #3
 800774c:	2100      	movs	r1, #0
 800774e:	2001      	movs	r0, #1
 8007750:	f001 f813 	bl	800877a <xQueueGenericCreate>
 8007754:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d022      	beq.n	80077a2 <osSemaphoreNew+0xe8>
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d01f      	beq.n	80077a2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007762:	2300      	movs	r3, #0
 8007764:	2200      	movs	r2, #0
 8007766:	2100      	movs	r1, #0
 8007768:	69f8      	ldr	r0, [r7, #28]
 800776a:	f001 f8d3 	bl	8008914 <xQueueGenericSend>
 800776e:	4603      	mov	r3, r0
 8007770:	2b01      	cmp	r3, #1
 8007772:	d016      	beq.n	80077a2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007774:	69f8      	ldr	r0, [r7, #28]
 8007776:	f001 fd71 	bl	800925c <vQueueDelete>
            hSemaphore = NULL;
 800777a:	2300      	movs	r3, #0
 800777c:	61fb      	str	r3, [r7, #28]
 800777e:	e010      	b.n	80077a2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d108      	bne.n	8007798 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	461a      	mov	r2, r3
 800778c:	68b9      	ldr	r1, [r7, #8]
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f001 f851 	bl	8008836 <xQueueCreateCountingSemaphoreStatic>
 8007794:	61f8      	str	r0, [r7, #28]
 8007796:	e004      	b.n	80077a2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007798:	68b9      	ldr	r1, [r7, #8]
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f001 f884 	bl	80088a8 <xQueueCreateCountingSemaphore>
 80077a0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00c      	beq.n	80077c2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	e001      	b.n	80077ba <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80077ba:	6979      	ldr	r1, [r7, #20]
 80077bc:	69f8      	ldr	r0, [r7, #28]
 80077be:	f001 fe99 	bl	80094f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80077c2:	69fb      	ldr	r3, [r7, #28]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80077da:	2300      	movs	r3, #0
 80077dc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d103      	bne.n	80077ec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80077e4:	f06f 0303 	mvn.w	r3, #3
 80077e8:	617b      	str	r3, [r7, #20]
 80077ea:	e039      	b.n	8007860 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ec:	f3ef 8305 	mrs	r3, IPSR
 80077f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80077f2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d022      	beq.n	800783e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80077fe:	f06f 0303 	mvn.w	r3, #3
 8007802:	617b      	str	r3, [r7, #20]
 8007804:	e02c      	b.n	8007860 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007806:	2300      	movs	r3, #0
 8007808:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800780a:	f107 0308 	add.w	r3, r7, #8
 800780e:	461a      	mov	r2, r3
 8007810:	2100      	movs	r1, #0
 8007812:	6938      	ldr	r0, [r7, #16]
 8007814:	f001 fca0 	bl	8009158 <xQueueReceiveFromISR>
 8007818:	4603      	mov	r3, r0
 800781a:	2b01      	cmp	r3, #1
 800781c:	d003      	beq.n	8007826 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800781e:	f06f 0302 	mvn.w	r3, #2
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	e01c      	b.n	8007860 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d019      	beq.n	8007860 <osSemaphoreAcquire+0x94>
 800782c:	4b0f      	ldr	r3, [pc, #60]	@ (800786c <osSemaphoreAcquire+0xa0>)
 800782e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	e010      	b.n	8007860 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6938      	ldr	r0, [r7, #16]
 8007842:	f001 fb79 	bl	8008f38 <xQueueSemaphoreTake>
 8007846:	4603      	mov	r3, r0
 8007848:	2b01      	cmp	r3, #1
 800784a:	d009      	beq.n	8007860 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007852:	f06f 0301 	mvn.w	r3, #1
 8007856:	617b      	str	r3, [r7, #20]
 8007858:	e002      	b.n	8007860 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800785a:	f06f 0302 	mvn.w	r3, #2
 800785e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007860:	697b      	ldr	r3, [r7, #20]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	e000ed04 	.word	0xe000ed04

08007870 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800787c:	2300      	movs	r3, #0
 800787e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d103      	bne.n	800788e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007886:	f06f 0303 	mvn.w	r3, #3
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	e02c      	b.n	80078e8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800788e:	f3ef 8305 	mrs	r3, IPSR
 8007892:	60fb      	str	r3, [r7, #12]
  return(result);
 8007894:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007896:	2b00      	cmp	r3, #0
 8007898:	d01a      	beq.n	80078d0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800789e:	f107 0308 	add.w	r3, r7, #8
 80078a2:	4619      	mov	r1, r3
 80078a4:	6938      	ldr	r0, [r7, #16]
 80078a6:	f001 f9d5 	bl	8008c54 <xQueueGiveFromISR>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d003      	beq.n	80078b8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80078b0:	f06f 0302 	mvn.w	r3, #2
 80078b4:	617b      	str	r3, [r7, #20]
 80078b6:	e017      	b.n	80078e8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d014      	beq.n	80078e8 <osSemaphoreRelease+0x78>
 80078be:	4b0d      	ldr	r3, [pc, #52]	@ (80078f4 <osSemaphoreRelease+0x84>)
 80078c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	e00b      	b.n	80078e8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80078d0:	2300      	movs	r3, #0
 80078d2:	2200      	movs	r2, #0
 80078d4:	2100      	movs	r1, #0
 80078d6:	6938      	ldr	r0, [r7, #16]
 80078d8:	f001 f81c 	bl	8008914 <xQueueGenericSend>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d002      	beq.n	80078e8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80078e2:	f06f 0302 	mvn.w	r3, #2
 80078e6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80078e8:	697b      	ldr	r3, [r7, #20]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	e000ed04 	.word	0xe000ed04

080078f8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b08a      	sub	sp, #40	@ 0x28
 80078fc:	af02      	add	r7, sp, #8
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007904:	2300      	movs	r3, #0
 8007906:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007908:	f3ef 8305 	mrs	r3, IPSR
 800790c:	613b      	str	r3, [r7, #16]
  return(result);
 800790e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007910:	2b00      	cmp	r3, #0
 8007912:	d15f      	bne.n	80079d4 <osMessageQueueNew+0xdc>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d05c      	beq.n	80079d4 <osMessageQueueNew+0xdc>
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d059      	beq.n	80079d4 <osMessageQueueNew+0xdc>
    mem = -1;
 8007920:	f04f 33ff 	mov.w	r3, #4294967295
 8007924:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d029      	beq.n	8007980 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d012      	beq.n	800795a <osMessageQueueNew+0x62>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	2b4f      	cmp	r3, #79	@ 0x4f
 800793a:	d90e      	bls.n	800795a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	695a      	ldr	r2, [r3, #20]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	68b9      	ldr	r1, [r7, #8]
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	429a      	cmp	r2, r3
 8007952:	d302      	bcc.n	800795a <osMessageQueueNew+0x62>
        mem = 1;
 8007954:	2301      	movs	r3, #1
 8007956:	61bb      	str	r3, [r7, #24]
 8007958:	e014      	b.n	8007984 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d110      	bne.n	8007984 <osMessageQueueNew+0x8c>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10c      	bne.n	8007984 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800796e:	2b00      	cmp	r3, #0
 8007970:	d108      	bne.n	8007984 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d104      	bne.n	8007984 <osMessageQueueNew+0x8c>
          mem = 0;
 800797a:	2300      	movs	r3, #0
 800797c:	61bb      	str	r3, [r7, #24]
 800797e:	e001      	b.n	8007984 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d10b      	bne.n	80079a2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691a      	ldr	r2, [r3, #16]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	2100      	movs	r1, #0
 8007994:	9100      	str	r1, [sp, #0]
 8007996:	68b9      	ldr	r1, [r7, #8]
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 fe71 	bl	8008680 <xQueueGenericCreateStatic>
 800799e:	61f8      	str	r0, [r7, #28]
 80079a0:	e008      	b.n	80079b4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d105      	bne.n	80079b4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80079a8:	2200      	movs	r2, #0
 80079aa:	68b9      	ldr	r1, [r7, #8]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fee4 	bl	800877a <xQueueGenericCreate>
 80079b2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00c      	beq.n	80079d4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	e001      	b.n	80079cc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80079cc:	6979      	ldr	r1, [r7, #20]
 80079ce:	69f8      	ldr	r0, [r7, #28]
 80079d0:	f001 fd90 	bl	80094f4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80079d4:	69fb      	ldr	r3, [r7, #28]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3720      	adds	r7, #32
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80079f4:	2300      	movs	r3, #0
 80079f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079f8:	f3ef 8305 	mrs	r3, IPSR
 80079fc:	617b      	str	r3, [r7, #20]
  return(result);
 80079fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d028      	beq.n	8007a56 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <osMessageQueuePut+0x36>
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <osMessageQueuePut+0x36>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007a16:	f06f 0303 	mvn.w	r3, #3
 8007a1a:	61fb      	str	r3, [r7, #28]
 8007a1c:	e038      	b.n	8007a90 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007a22:	f107 0210 	add.w	r2, r7, #16
 8007a26:	2300      	movs	r3, #0
 8007a28:	68b9      	ldr	r1, [r7, #8]
 8007a2a:	69b8      	ldr	r0, [r7, #24]
 8007a2c:	f001 f874 	bl	8008b18 <xQueueGenericSendFromISR>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d003      	beq.n	8007a3e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007a36:	f06f 0302 	mvn.w	r3, #2
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	e028      	b.n	8007a90 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d025      	beq.n	8007a90 <osMessageQueuePut+0xb0>
 8007a44:	4b15      	ldr	r3, [pc, #84]	@ (8007a9c <osMessageQueuePut+0xbc>)
 8007a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	e01c      	b.n	8007a90 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <osMessageQueuePut+0x82>
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d103      	bne.n	8007a6a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007a62:	f06f 0303 	mvn.w	r3, #3
 8007a66:	61fb      	str	r3, [r7, #28]
 8007a68:	e012      	b.n	8007a90 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	69b8      	ldr	r0, [r7, #24]
 8007a72:	f000 ff4f 	bl	8008914 <xQueueGenericSend>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d009      	beq.n	8007a90 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007a82:	f06f 0301 	mvn.w	r3, #1
 8007a86:	61fb      	str	r3, [r7, #28]
 8007a88:	e002      	b.n	8007a90 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007a8a:	f06f 0302 	mvn.w	r3, #2
 8007a8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007a90:	69fb      	ldr	r3, [r7, #28]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3720      	adds	r7, #32
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	e000ed04 	.word	0xe000ed04

08007aa0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ab6:	f3ef 8305 	mrs	r3, IPSR
 8007aba:	617b      	str	r3, [r7, #20]
  return(result);
 8007abc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d028      	beq.n	8007b14 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <osMessageQueueGet+0x34>
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <osMessageQueueGet+0x34>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007ad4:	f06f 0303 	mvn.w	r3, #3
 8007ad8:	61fb      	str	r3, [r7, #28]
 8007ada:	e037      	b.n	8007b4c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007adc:	2300      	movs	r3, #0
 8007ade:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007ae0:	f107 0310 	add.w	r3, r7, #16
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	69b8      	ldr	r0, [r7, #24]
 8007aea:	f001 fb35 	bl	8009158 <xQueueReceiveFromISR>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d003      	beq.n	8007afc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007af4:	f06f 0302 	mvn.w	r3, #2
 8007af8:	61fb      	str	r3, [r7, #28]
 8007afa:	e027      	b.n	8007b4c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d024      	beq.n	8007b4c <osMessageQueueGet+0xac>
 8007b02:	4b15      	ldr	r3, [pc, #84]	@ (8007b58 <osMessageQueueGet+0xb8>)
 8007b04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	e01b      	b.n	8007b4c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <osMessageQueueGet+0x80>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d103      	bne.n	8007b28 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007b20:	f06f 0303 	mvn.w	r3, #3
 8007b24:	61fb      	str	r3, [r7, #28]
 8007b26:	e011      	b.n	8007b4c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	69b8      	ldr	r0, [r7, #24]
 8007b2e:	f001 f921 	bl	8008d74 <xQueueReceive>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d009      	beq.n	8007b4c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007b3e:	f06f 0301 	mvn.w	r3, #1
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	e002      	b.n	8007b4c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007b46:	f06f 0302 	mvn.w	r3, #2
 8007b4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007b4c:	69fb      	ldr	r3, [r7, #28]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3720      	adds	r7, #32
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4a07      	ldr	r2, [pc, #28]	@ (8007b88 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	4a06      	ldr	r2, [pc, #24]	@ (8007b8c <vApplicationGetIdleTaskMemory+0x30>)
 8007b72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2280      	movs	r2, #128	@ 0x80
 8007b78:	601a      	str	r2, [r3, #0]
}
 8007b7a:	bf00      	nop
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	20000318 	.word	0x20000318
 8007b8c:	200003c0 	.word	0x200003c0

08007b90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4a07      	ldr	r2, [pc, #28]	@ (8007bbc <vApplicationGetTimerTaskMemory+0x2c>)
 8007ba0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	4a06      	ldr	r2, [pc, #24]	@ (8007bc0 <vApplicationGetTimerTaskMemory+0x30>)
 8007ba6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bae:	601a      	str	r2, [r3, #0]
}
 8007bb0:	bf00      	nop
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	200005c0 	.word	0x200005c0
 8007bc0:	20000668 	.word	0x20000668

08007bc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08a      	sub	sp, #40	@ 0x28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007bd0:	f001 ff7c 	bl	8009acc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007bd4:	4b5c      	ldr	r3, [pc, #368]	@ (8007d48 <pvPortMalloc+0x184>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007bdc:	f000 f924 	bl	8007e28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007be0:	4b5a      	ldr	r3, [pc, #360]	@ (8007d4c <pvPortMalloc+0x188>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4013      	ands	r3, r2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f040 8095 	bne.w	8007d18 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d01e      	beq.n	8007c32 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007bf4:	2208      	movs	r2, #8
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d015      	beq.n	8007c32 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f023 0307 	bic.w	r3, r3, #7
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00b      	beq.n	8007c32 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c2c:	bf00      	nop
 8007c2e:	bf00      	nop
 8007c30:	e7fd      	b.n	8007c2e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d06f      	beq.n	8007d18 <pvPortMalloc+0x154>
 8007c38:	4b45      	ldr	r3, [pc, #276]	@ (8007d50 <pvPortMalloc+0x18c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d86a      	bhi.n	8007d18 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c42:	4b44      	ldr	r3, [pc, #272]	@ (8007d54 <pvPortMalloc+0x190>)
 8007c44:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c46:	4b43      	ldr	r3, [pc, #268]	@ (8007d54 <pvPortMalloc+0x190>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c4c:	e004      	b.n	8007c58 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d903      	bls.n	8007c6a <pvPortMalloc+0xa6>
 8007c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1f1      	bne.n	8007c4e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c6a:	4b37      	ldr	r3, [pc, #220]	@ (8007d48 <pvPortMalloc+0x184>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d051      	beq.n	8007d18 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2208      	movs	r2, #8
 8007c7a:	4413      	add	r3, r2
 8007c7c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	685a      	ldr	r2, [r3, #4]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	1ad2      	subs	r2, r2, r3
 8007c8e:	2308      	movs	r3, #8
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d920      	bls.n	8007cd8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	f003 0307 	and.w	r3, r3, #7
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <pvPortMalloc+0xfc>
	__asm volatile
 8007ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	613b      	str	r3, [r7, #16]
}
 8007cba:	bf00      	nop
 8007cbc:	bf00      	nop
 8007cbe:	e7fd      	b.n	8007cbc <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	1ad2      	subs	r2, r2, r3
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cd2:	69b8      	ldr	r0, [r7, #24]
 8007cd4:	f000 f90a 	bl	8007eec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8007d50 <pvPortMalloc+0x18c>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8007d50 <pvPortMalloc+0x18c>)
 8007ce4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8007d50 <pvPortMalloc+0x18c>)
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	4b1b      	ldr	r3, [pc, #108]	@ (8007d58 <pvPortMalloc+0x194>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d203      	bcs.n	8007cfa <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cf2:	4b17      	ldr	r3, [pc, #92]	@ (8007d50 <pvPortMalloc+0x18c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a18      	ldr	r2, [pc, #96]	@ (8007d58 <pvPortMalloc+0x194>)
 8007cf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	4b13      	ldr	r3, [pc, #76]	@ (8007d4c <pvPortMalloc+0x188>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d0e:	4b13      	ldr	r3, [pc, #76]	@ (8007d5c <pvPortMalloc+0x198>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3301      	adds	r3, #1
 8007d14:	4a11      	ldr	r2, [pc, #68]	@ (8007d5c <pvPortMalloc+0x198>)
 8007d16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d18:	f001 fee6 	bl	8009ae8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f003 0307 	and.w	r3, r3, #7
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <pvPortMalloc+0x17a>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	60fb      	str	r3, [r7, #12]
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <pvPortMalloc+0x176>
	return pvReturn;
 8007d3e:	69fb      	ldr	r3, [r7, #28]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3728      	adds	r7, #40	@ 0x28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	20004670 	.word	0x20004670
 8007d4c:	20004684 	.word	0x20004684
 8007d50:	20004674 	.word	0x20004674
 8007d54:	20004668 	.word	0x20004668
 8007d58:	20004678 	.word	0x20004678
 8007d5c:	2000467c 	.word	0x2000467c

08007d60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d04f      	beq.n	8007e12 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d72:	2308      	movs	r3, #8
 8007d74:	425b      	negs	r3, r3
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	4413      	add	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	4b25      	ldr	r3, [pc, #148]	@ (8007e1c <vPortFree+0xbc>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4013      	ands	r3, r2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10b      	bne.n	8007da6 <vPortFree+0x46>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	60fb      	str	r3, [r7, #12]
}
 8007da0:	bf00      	nop
 8007da2:	bf00      	nop
 8007da4:	e7fd      	b.n	8007da2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00b      	beq.n	8007dc6 <vPortFree+0x66>
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	60bb      	str	r3, [r7, #8]
}
 8007dc0:	bf00      	nop
 8007dc2:	bf00      	nop
 8007dc4:	e7fd      	b.n	8007dc2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	4b14      	ldr	r3, [pc, #80]	@ (8007e1c <vPortFree+0xbc>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4013      	ands	r3, r2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d01e      	beq.n	8007e12 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d11a      	bne.n	8007e12 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	4b0e      	ldr	r3, [pc, #56]	@ (8007e1c <vPortFree+0xbc>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	43db      	mvns	r3, r3
 8007de6:	401a      	ands	r2, r3
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007dec:	f001 fe6e 	bl	8009acc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	4b0a      	ldr	r3, [pc, #40]	@ (8007e20 <vPortFree+0xc0>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4413      	add	r3, r2
 8007dfa:	4a09      	ldr	r2, [pc, #36]	@ (8007e20 <vPortFree+0xc0>)
 8007dfc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dfe:	6938      	ldr	r0, [r7, #16]
 8007e00:	f000 f874 	bl	8007eec <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e04:	4b07      	ldr	r3, [pc, #28]	@ (8007e24 <vPortFree+0xc4>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	4a06      	ldr	r2, [pc, #24]	@ (8007e24 <vPortFree+0xc4>)
 8007e0c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e0e:	f001 fe6b 	bl	8009ae8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e12:	bf00      	nop
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20004684 	.word	0x20004684
 8007e20:	20004674 	.word	0x20004674
 8007e24:	20004680 	.word	0x20004680

08007e28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e2e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007e32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e34:	4b27      	ldr	r3, [pc, #156]	@ (8007ed4 <prvHeapInit+0xac>)
 8007e36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f003 0307 	and.w	r3, r3, #7
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00c      	beq.n	8007e5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3307      	adds	r3, #7
 8007e46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 0307 	bic.w	r3, r3, #7
 8007e4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	4a1f      	ldr	r2, [pc, #124]	@ (8007ed4 <prvHeapInit+0xac>)
 8007e58:	4413      	add	r3, r2
 8007e5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e60:	4a1d      	ldr	r2, [pc, #116]	@ (8007ed8 <prvHeapInit+0xb0>)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e66:	4b1c      	ldr	r3, [pc, #112]	@ (8007ed8 <prvHeapInit+0xb0>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	4413      	add	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e74:	2208      	movs	r2, #8
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	1a9b      	subs	r3, r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 0307 	bic.w	r3, r3, #7
 8007e82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4a15      	ldr	r2, [pc, #84]	@ (8007edc <prvHeapInit+0xb4>)
 8007e88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e8a:	4b14      	ldr	r3, [pc, #80]	@ (8007edc <prvHeapInit+0xb4>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e92:	4b12      	ldr	r3, [pc, #72]	@ (8007edc <prvHeapInit+0xb4>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2200      	movs	r2, #0
 8007e98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	1ad2      	subs	r2, r2, r3
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8007edc <prvHeapInit+0xb4>)
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8007ee0 <prvHeapInit+0xb8>)
 8007eb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4a09      	ldr	r2, [pc, #36]	@ (8007ee4 <prvHeapInit+0xbc>)
 8007ebe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ec0:	4b09      	ldr	r3, [pc, #36]	@ (8007ee8 <prvHeapInit+0xc0>)
 8007ec2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ec6:	601a      	str	r2, [r3, #0]
}
 8007ec8:	bf00      	nop
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	20000a68 	.word	0x20000a68
 8007ed8:	20004668 	.word	0x20004668
 8007edc:	20004670 	.word	0x20004670
 8007ee0:	20004678 	.word	0x20004678
 8007ee4:	20004674 	.word	0x20004674
 8007ee8:	20004684 	.word	0x20004684

08007eec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ef4:	4b28      	ldr	r3, [pc, #160]	@ (8007f98 <prvInsertBlockIntoFreeList+0xac>)
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	e002      	b.n	8007f00 <prvInsertBlockIntoFreeList+0x14>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d8f7      	bhi.n	8007efa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	4413      	add	r3, r2
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d108      	bne.n	8007f2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	441a      	add	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	441a      	add	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d118      	bne.n	8007f74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	4b15      	ldr	r3, [pc, #84]	@ (8007f9c <prvInsertBlockIntoFreeList+0xb0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d00d      	beq.n	8007f6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	441a      	add	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	e008      	b.n	8007f7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8007f9c <prvInsertBlockIntoFreeList+0xb0>)
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	e003      	b.n	8007f7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d002      	beq.n	8007f8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f8a:	bf00      	nop
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	20004668 	.word	0x20004668
 8007f9c:	20004670 	.word	0x20004670

08007fa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f103 0208 	add.w	r2, r3, #8
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f103 0208 	add.w	r2, r3, #8
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f103 0208 	add.w	r2, r3, #8
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007fee:	bf00      	nop
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	601a      	str	r2, [r3, #0]
}
 8008036:	bf00      	nop
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008042:	b480      	push	{r7}
 8008044:	b085      	sub	sp, #20
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008058:	d103      	bne.n	8008062 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	e00c      	b.n	800807c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	3308      	adds	r3, #8
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	e002      	b.n	8008070 <vListInsert+0x2e>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	429a      	cmp	r2, r3
 800807a:	d2f6      	bcs.n	800806a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	1c5a      	adds	r2, r3, #1
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	601a      	str	r2, [r3, #0]
}
 80080a8:	bf00      	nop
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	6892      	ldr	r2, [r2, #8]
 80080ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6852      	ldr	r2, [r2, #4]
 80080d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d103      	bne.n	80080e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	1e5a      	subs	r2, r3, #1
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3b04      	subs	r3, #4
 8008118:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3b04      	subs	r3, #4
 8008126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f023 0201 	bic.w	r2, r3, #1
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3b04      	subs	r3, #4
 8008136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008138:	4a0c      	ldr	r2, [pc, #48]	@ (800816c <pxPortInitialiseStack+0x64>)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3b14      	subs	r3, #20
 8008142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3b04      	subs	r3, #4
 800814e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f06f 0202 	mvn.w	r2, #2
 8008156:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3b20      	subs	r3, #32
 800815c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800815e:	68fb      	ldr	r3, [r7, #12]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	08008171 	.word	0x08008171

08008170 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800817a:	4b13      	ldr	r3, [pc, #76]	@ (80081c8 <prvTaskExitError+0x58>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008182:	d00b      	beq.n	800819c <prvTaskExitError+0x2c>
	__asm volatile
 8008184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	60fb      	str	r3, [r7, #12]
}
 8008196:	bf00      	nop
 8008198:	bf00      	nop
 800819a:	e7fd      	b.n	8008198 <prvTaskExitError+0x28>
	__asm volatile
 800819c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	60bb      	str	r3, [r7, #8]
}
 80081ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081b0:	bf00      	nop
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d0fc      	beq.n	80081b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	2000000c 	.word	0x2000000c
 80081cc:	00000000 	.word	0x00000000

080081d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081d0:	4b07      	ldr	r3, [pc, #28]	@ (80081f0 <pxCurrentTCBConst2>)
 80081d2:	6819      	ldr	r1, [r3, #0]
 80081d4:	6808      	ldr	r0, [r1, #0]
 80081d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081da:	f380 8809 	msr	PSP, r0
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f04f 0000 	mov.w	r0, #0
 80081e6:	f380 8811 	msr	BASEPRI, r0
 80081ea:	4770      	bx	lr
 80081ec:	f3af 8000 	nop.w

080081f0 <pxCurrentTCBConst2>:
 80081f0:	200046d0 	.word	0x200046d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop

080081f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081f8:	4808      	ldr	r0, [pc, #32]	@ (800821c <prvPortStartFirstTask+0x24>)
 80081fa:	6800      	ldr	r0, [r0, #0]
 80081fc:	6800      	ldr	r0, [r0, #0]
 80081fe:	f380 8808 	msr	MSP, r0
 8008202:	f04f 0000 	mov.w	r0, #0
 8008206:	f380 8814 	msr	CONTROL, r0
 800820a:	b662      	cpsie	i
 800820c:	b661      	cpsie	f
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	df00      	svc	0
 8008218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800821a:	bf00      	nop
 800821c:	e000ed08 	.word	0xe000ed08

08008220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008226:	4b47      	ldr	r3, [pc, #284]	@ (8008344 <xPortStartScheduler+0x124>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a47      	ldr	r2, [pc, #284]	@ (8008348 <xPortStartScheduler+0x128>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d10b      	bne.n	8008248 <xPortStartScheduler+0x28>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	613b      	str	r3, [r7, #16]
}
 8008242:	bf00      	nop
 8008244:	bf00      	nop
 8008246:	e7fd      	b.n	8008244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008248:	4b3e      	ldr	r3, [pc, #248]	@ (8008344 <xPortStartScheduler+0x124>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a3f      	ldr	r2, [pc, #252]	@ (800834c <xPortStartScheduler+0x12c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d10b      	bne.n	800826a <xPortStartScheduler+0x4a>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	60fb      	str	r3, [r7, #12]
}
 8008264:	bf00      	nop
 8008266:	bf00      	nop
 8008268:	e7fd      	b.n	8008266 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800826a:	4b39      	ldr	r3, [pc, #228]	@ (8008350 <xPortStartScheduler+0x130>)
 800826c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	22ff      	movs	r2, #255	@ 0xff
 800827a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	b2db      	uxtb	r3, r3
 8008282:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800828c:	b2da      	uxtb	r2, r3
 800828e:	4b31      	ldr	r3, [pc, #196]	@ (8008354 <xPortStartScheduler+0x134>)
 8008290:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008292:	4b31      	ldr	r3, [pc, #196]	@ (8008358 <xPortStartScheduler+0x138>)
 8008294:	2207      	movs	r2, #7
 8008296:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008298:	e009      	b.n	80082ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800829a:	4b2f      	ldr	r3, [pc, #188]	@ (8008358 <xPortStartScheduler+0x138>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3b01      	subs	r3, #1
 80082a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008358 <xPortStartScheduler+0x138>)
 80082a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082ae:	78fb      	ldrb	r3, [r7, #3]
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082b6:	2b80      	cmp	r3, #128	@ 0x80
 80082b8:	d0ef      	beq.n	800829a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082ba:	4b27      	ldr	r3, [pc, #156]	@ (8008358 <xPortStartScheduler+0x138>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f1c3 0307 	rsb	r3, r3, #7
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d00b      	beq.n	80082de <xPortStartScheduler+0xbe>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	60bb      	str	r3, [r7, #8]
}
 80082d8:	bf00      	nop
 80082da:	bf00      	nop
 80082dc:	e7fd      	b.n	80082da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082de:	4b1e      	ldr	r3, [pc, #120]	@ (8008358 <xPortStartScheduler+0x138>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	021b      	lsls	r3, r3, #8
 80082e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008358 <xPortStartScheduler+0x138>)
 80082e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008358 <xPortStartScheduler+0x138>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80082f0:	4a19      	ldr	r2, [pc, #100]	@ (8008358 <xPortStartScheduler+0x138>)
 80082f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082fc:	4b17      	ldr	r3, [pc, #92]	@ (800835c <xPortStartScheduler+0x13c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a16      	ldr	r2, [pc, #88]	@ (800835c <xPortStartScheduler+0x13c>)
 8008302:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008306:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008308:	4b14      	ldr	r3, [pc, #80]	@ (800835c <xPortStartScheduler+0x13c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a13      	ldr	r2, [pc, #76]	@ (800835c <xPortStartScheduler+0x13c>)
 800830e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008312:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008314:	f000 f8da 	bl	80084cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008318:	4b11      	ldr	r3, [pc, #68]	@ (8008360 <xPortStartScheduler+0x140>)
 800831a:	2200      	movs	r2, #0
 800831c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800831e:	f000 f8f9 	bl	8008514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008322:	4b10      	ldr	r3, [pc, #64]	@ (8008364 <xPortStartScheduler+0x144>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a0f      	ldr	r2, [pc, #60]	@ (8008364 <xPortStartScheduler+0x144>)
 8008328:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800832c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800832e:	f7ff ff63 	bl	80081f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008332:	f001 fd41 	bl	8009db8 <vTaskSwitchContext>
	prvTaskExitError();
 8008336:	f7ff ff1b 	bl	8008170 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	e000ed00 	.word	0xe000ed00
 8008348:	410fc271 	.word	0x410fc271
 800834c:	410fc270 	.word	0x410fc270
 8008350:	e000e400 	.word	0xe000e400
 8008354:	20004688 	.word	0x20004688
 8008358:	2000468c 	.word	0x2000468c
 800835c:	e000ed20 	.word	0xe000ed20
 8008360:	2000000c 	.word	0x2000000c
 8008364:	e000ef34 	.word	0xe000ef34

08008368 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	607b      	str	r3, [r7, #4]
}
 8008380:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008382:	4b10      	ldr	r3, [pc, #64]	@ (80083c4 <vPortEnterCritical+0x5c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3301      	adds	r3, #1
 8008388:	4a0e      	ldr	r2, [pc, #56]	@ (80083c4 <vPortEnterCritical+0x5c>)
 800838a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800838c:	4b0d      	ldr	r3, [pc, #52]	@ (80083c4 <vPortEnterCritical+0x5c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d110      	bne.n	80083b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008394:	4b0c      	ldr	r3, [pc, #48]	@ (80083c8 <vPortEnterCritical+0x60>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00b      	beq.n	80083b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	603b      	str	r3, [r7, #0]
}
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
 80083b4:	e7fd      	b.n	80083b2 <vPortEnterCritical+0x4a>
	}
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	2000000c 	.word	0x2000000c
 80083c8:	e000ed04 	.word	0xe000ed04

080083cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083d2:	4b12      	ldr	r3, [pc, #72]	@ (800841c <vPortExitCritical+0x50>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <vPortExitCritical+0x26>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	607b      	str	r3, [r7, #4]
}
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
 80083f0:	e7fd      	b.n	80083ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083f2:	4b0a      	ldr	r3, [pc, #40]	@ (800841c <vPortExitCritical+0x50>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	4a08      	ldr	r2, [pc, #32]	@ (800841c <vPortExitCritical+0x50>)
 80083fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083fc:	4b07      	ldr	r3, [pc, #28]	@ (800841c <vPortExitCritical+0x50>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d105      	bne.n	8008410 <vPortExitCritical+0x44>
 8008404:	2300      	movs	r3, #0
 8008406:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800840e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	2000000c 	.word	0x2000000c

08008420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008420:	f3ef 8009 	mrs	r0, PSP
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	4b15      	ldr	r3, [pc, #84]	@ (8008480 <pxCurrentTCBConst>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	f01e 0f10 	tst.w	lr, #16
 8008430:	bf08      	it	eq
 8008432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843a:	6010      	str	r0, [r2, #0]
 800843c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008440:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008444:	f380 8811 	msr	BASEPRI, r0
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f001 fcb2 	bl	8009db8 <vTaskSwitchContext>
 8008454:	f04f 0000 	mov.w	r0, #0
 8008458:	f380 8811 	msr	BASEPRI, r0
 800845c:	bc09      	pop	{r0, r3}
 800845e:	6819      	ldr	r1, [r3, #0]
 8008460:	6808      	ldr	r0, [r1, #0]
 8008462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008466:	f01e 0f10 	tst.w	lr, #16
 800846a:	bf08      	it	eq
 800846c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008470:	f380 8809 	msr	PSP, r0
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	f3af 8000 	nop.w

08008480 <pxCurrentTCBConst>:
 8008480:	200046d0 	.word	0x200046d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop

08008488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	607b      	str	r3, [r7, #4]
}
 80084a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084a2:	f001 fbcf 	bl	8009c44 <xTaskIncrementTick>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084ac:	4b06      	ldr	r3, [pc, #24]	@ (80084c8 <xPortSysTickHandler+0x40>)
 80084ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	2300      	movs	r3, #0
 80084b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	f383 8811 	msr	BASEPRI, r3
}
 80084be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084c0:	bf00      	nop
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	e000ed04 	.word	0xe000ed04

080084cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084cc:	b480      	push	{r7}
 80084ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008500 <vPortSetupTimerInterrupt+0x34>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008504 <vPortSetupTimerInterrupt+0x38>)
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008508 <vPortSetupTimerInterrupt+0x3c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a0a      	ldr	r2, [pc, #40]	@ (800850c <vPortSetupTimerInterrupt+0x40>)
 80084e2:	fba2 2303 	umull	r2, r3, r2, r3
 80084e6:	099b      	lsrs	r3, r3, #6
 80084e8:	4a09      	ldr	r2, [pc, #36]	@ (8008510 <vPortSetupTimerInterrupt+0x44>)
 80084ea:	3b01      	subs	r3, #1
 80084ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ee:	4b04      	ldr	r3, [pc, #16]	@ (8008500 <vPortSetupTimerInterrupt+0x34>)
 80084f0:	2207      	movs	r2, #7
 80084f2:	601a      	str	r2, [r3, #0]
}
 80084f4:	bf00      	nop
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	e000e010 	.word	0xe000e010
 8008504:	e000e018 	.word	0xe000e018
 8008508:	20000000 	.word	0x20000000
 800850c:	10624dd3 	.word	0x10624dd3
 8008510:	e000e014 	.word	0xe000e014

08008514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008514:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008524 <vPortEnableVFP+0x10>
 8008518:	6801      	ldr	r1, [r0, #0]
 800851a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800851e:	6001      	str	r1, [r0, #0]
 8008520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008522:	bf00      	nop
 8008524:	e000ed88 	.word	0xe000ed88

08008528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800852e:	f3ef 8305 	mrs	r3, IPSR
 8008532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2b0f      	cmp	r3, #15
 8008538:	d915      	bls.n	8008566 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800853a:	4a18      	ldr	r2, [pc, #96]	@ (800859c <vPortValidateInterruptPriority+0x74>)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4413      	add	r3, r2
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008544:	4b16      	ldr	r3, [pc, #88]	@ (80085a0 <vPortValidateInterruptPriority+0x78>)
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	7afa      	ldrb	r2, [r7, #11]
 800854a:	429a      	cmp	r2, r3
 800854c:	d20b      	bcs.n	8008566 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	607b      	str	r3, [r7, #4]
}
 8008560:	bf00      	nop
 8008562:	bf00      	nop
 8008564:	e7fd      	b.n	8008562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008566:	4b0f      	ldr	r3, [pc, #60]	@ (80085a4 <vPortValidateInterruptPriority+0x7c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800856e:	4b0e      	ldr	r3, [pc, #56]	@ (80085a8 <vPortValidateInterruptPriority+0x80>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d90b      	bls.n	800858e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	603b      	str	r3, [r7, #0]
}
 8008588:	bf00      	nop
 800858a:	bf00      	nop
 800858c:	e7fd      	b.n	800858a <vPortValidateInterruptPriority+0x62>
	}
 800858e:	bf00      	nop
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	e000e3f0 	.word	0xe000e3f0
 80085a0:	20004688 	.word	0x20004688
 80085a4:	e000ed0c 	.word	0xe000ed0c
 80085a8:	2000468c 	.word	0x2000468c

080085ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10b      	bne.n	80085d8 <xQueueGenericReset+0x2c>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	60bb      	str	r3, [r7, #8]
}
 80085d2:	bf00      	nop
 80085d4:	bf00      	nop
 80085d6:	e7fd      	b.n	80085d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085d8:	f7ff fec6 	bl	8008368 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e4:	68f9      	ldr	r1, [r7, #12]
 80085e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085e8:	fb01 f303 	mul.w	r3, r1, r3
 80085ec:	441a      	add	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008608:	3b01      	subs	r3, #1
 800860a:	68f9      	ldr	r1, [r7, #12]
 800860c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800860e:	fb01 f303 	mul.w	r3, r1, r3
 8008612:	441a      	add	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	22ff      	movs	r2, #255	@ 0xff
 800861c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	22ff      	movs	r2, #255	@ 0xff
 8008624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d114      	bne.n	8008658 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d01a      	beq.n	800866c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3310      	adds	r3, #16
 800863a:	4618      	mov	r0, r3
 800863c:	f001 fc74 	bl	8009f28 <xTaskRemoveFromEventList>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d012      	beq.n	800866c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008646:	4b0d      	ldr	r3, [pc, #52]	@ (800867c <xQueueGenericReset+0xd0>)
 8008648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	e009      	b.n	800866c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3310      	adds	r3, #16
 800865c:	4618      	mov	r0, r3
 800865e:	f7ff fc9f 	bl	8007fa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3324      	adds	r3, #36	@ 0x24
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff fc9a 	bl	8007fa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800866c:	f7ff feae 	bl	80083cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008670:	2301      	movs	r3, #1
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	e000ed04 	.word	0xe000ed04

08008680 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08e      	sub	sp, #56	@ 0x38
 8008684:	af02      	add	r7, sp, #8
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10b      	bne.n	80086ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80086a6:	bf00      	nop
 80086a8:	bf00      	nop
 80086aa:	e7fd      	b.n	80086a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10b      	bne.n	80086ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop
 80086c8:	e7fd      	b.n	80086c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <xQueueGenericCreateStatic+0x56>
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <xQueueGenericCreateStatic+0x5a>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <xQueueGenericCreateStatic+0x5c>
 80086da:	2300      	movs	r3, #0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10b      	bne.n	80086f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	623b      	str	r3, [r7, #32]
}
 80086f2:	bf00      	nop
 80086f4:	bf00      	nop
 80086f6:	e7fd      	b.n	80086f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d102      	bne.n	8008704 <xQueueGenericCreateStatic+0x84>
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <xQueueGenericCreateStatic+0x88>
 8008704:	2301      	movs	r3, #1
 8008706:	e000      	b.n	800870a <xQueueGenericCreateStatic+0x8a>
 8008708:	2300      	movs	r3, #0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10b      	bne.n	8008726 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	61fb      	str	r3, [r7, #28]
}
 8008720:	bf00      	nop
 8008722:	bf00      	nop
 8008724:	e7fd      	b.n	8008722 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008726:	2350      	movs	r3, #80	@ 0x50
 8008728:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2b50      	cmp	r3, #80	@ 0x50
 800872e:	d00b      	beq.n	8008748 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	61bb      	str	r3, [r7, #24]
}
 8008742:	bf00      	nop
 8008744:	bf00      	nop
 8008746:	e7fd      	b.n	8008744 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008748:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800874e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00d      	beq.n	8008770 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800875c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	4613      	mov	r3, r2
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	68b9      	ldr	r1, [r7, #8]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 f840 	bl	80087f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008772:	4618      	mov	r0, r3
 8008774:	3730      	adds	r7, #48	@ 0x30
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800877a:	b580      	push	{r7, lr}
 800877c:	b08a      	sub	sp, #40	@ 0x28
 800877e:	af02      	add	r7, sp, #8
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	4613      	mov	r3, r2
 8008786:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10b      	bne.n	80087a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	613b      	str	r3, [r7, #16]
}
 80087a0:	bf00      	nop
 80087a2:	bf00      	nop
 80087a4:	e7fd      	b.n	80087a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	fb02 f303 	mul.w	r3, r2, r3
 80087ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	3350      	adds	r3, #80	@ 0x50
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff fa05 	bl	8007bc4 <pvPortMalloc>
 80087ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d011      	beq.n	80087e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	3350      	adds	r3, #80	@ 0x50
 80087ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087d4:	79fa      	ldrb	r2, [r7, #7]
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	4613      	mov	r3, r2
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	68b9      	ldr	r1, [r7, #8]
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 f805 	bl	80087f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087e6:	69bb      	ldr	r3, [r7, #24]
	}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3720      	adds	r7, #32
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d103      	bne.n	800880c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	e002      	b.n	8008812 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800881e:	2101      	movs	r1, #1
 8008820:	69b8      	ldr	r0, [r7, #24]
 8008822:	f7ff fec3 	bl	80085ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	78fa      	ldrb	r2, [r7, #3]
 800882a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008836:	b580      	push	{r7, lr}
 8008838:	b08a      	sub	sp, #40	@ 0x28
 800883a:	af02      	add	r7, sp, #8
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	60b9      	str	r1, [r7, #8]
 8008840:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10b      	bne.n	8008860 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	61bb      	str	r3, [r7, #24]
}
 800885a:	bf00      	nop
 800885c:	bf00      	nop
 800885e:	e7fd      	b.n	800885c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	429a      	cmp	r2, r3
 8008866:	d90b      	bls.n	8008880 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	617b      	str	r3, [r7, #20]
}
 800887a:	bf00      	nop
 800887c:	bf00      	nop
 800887e:	e7fd      	b.n	800887c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008880:	2302      	movs	r3, #2
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	2100      	movs	r1, #0
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f7ff fef8 	bl	8008680 <xQueueGenericCreateStatic>
 8008890:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800889e:	69fb      	ldr	r3, [r7, #28]
	}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3720      	adds	r7, #32
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10b      	bne.n	80088d0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80088b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088bc:	f383 8811 	msr	BASEPRI, r3
 80088c0:	f3bf 8f6f 	isb	sy
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	613b      	str	r3, [r7, #16]
}
 80088ca:	bf00      	nop
 80088cc:	bf00      	nop
 80088ce:	e7fd      	b.n	80088cc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d90b      	bls.n	80088f0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	60fb      	str	r3, [r7, #12]
}
 80088ea:	bf00      	nop
 80088ec:	bf00      	nop
 80088ee:	e7fd      	b.n	80088ec <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80088f0:	2202      	movs	r2, #2
 80088f2:	2100      	movs	r1, #0
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff ff40 	bl	800877a <xQueueGenericCreate>
 80088fa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d002      	beq.n	8008908 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008908:	697b      	ldr	r3, [r7, #20]
	}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08e      	sub	sp, #56	@ 0x38
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
 8008920:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008922:	2300      	movs	r3, #0
 8008924:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800892a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10b      	bne.n	8008948 <xQueueGenericSend+0x34>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008942:	bf00      	nop
 8008944:	bf00      	nop
 8008946:	e7fd      	b.n	8008944 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d103      	bne.n	8008956 <xQueueGenericSend+0x42>
 800894e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <xQueueGenericSend+0x46>
 8008956:	2301      	movs	r3, #1
 8008958:	e000      	b.n	800895c <xQueueGenericSend+0x48>
 800895a:	2300      	movs	r3, #0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10b      	bne.n	8008978 <xQueueGenericSend+0x64>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008972:	bf00      	nop
 8008974:	bf00      	nop
 8008976:	e7fd      	b.n	8008974 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	2b02      	cmp	r3, #2
 800897c:	d103      	bne.n	8008986 <xQueueGenericSend+0x72>
 800897e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008982:	2b01      	cmp	r3, #1
 8008984:	d101      	bne.n	800898a <xQueueGenericSend+0x76>
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <xQueueGenericSend+0x78>
 800898a:	2300      	movs	r3, #0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10b      	bne.n	80089a8 <xQueueGenericSend+0x94>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	623b      	str	r3, [r7, #32]
}
 80089a2:	bf00      	nop
 80089a4:	bf00      	nop
 80089a6:	e7fd      	b.n	80089a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089a8:	f001 fc84 	bl	800a2b4 <xTaskGetSchedulerState>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d102      	bne.n	80089b8 <xQueueGenericSend+0xa4>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <xQueueGenericSend+0xa8>
 80089b8:	2301      	movs	r3, #1
 80089ba:	e000      	b.n	80089be <xQueueGenericSend+0xaa>
 80089bc:	2300      	movs	r3, #0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10b      	bne.n	80089da <xQueueGenericSend+0xc6>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	61fb      	str	r3, [r7, #28]
}
 80089d4:	bf00      	nop
 80089d6:	bf00      	nop
 80089d8:	e7fd      	b.n	80089d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089da:	f7ff fcc5 	bl	8008368 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d302      	bcc.n	80089f0 <xQueueGenericSend+0xdc>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d129      	bne.n	8008a44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	68b9      	ldr	r1, [r7, #8]
 80089f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089f6:	f000 fc6d 	bl	80092d4 <prvCopyDataToQueue>
 80089fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d010      	beq.n	8008a26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	3324      	adds	r3, #36	@ 0x24
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 fa8d 	bl	8009f28 <xTaskRemoveFromEventList>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d013      	beq.n	8008a3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a14:	4b3f      	ldr	r3, [pc, #252]	@ (8008b14 <xQueueGenericSend+0x200>)
 8008a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	e00a      	b.n	8008a3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d007      	beq.n	8008a3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a2c:	4b39      	ldr	r3, [pc, #228]	@ (8008b14 <xQueueGenericSend+0x200>)
 8008a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a3c:	f7ff fcc6 	bl	80083cc <vPortExitCritical>
				return pdPASS;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e063      	b.n	8008b0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d103      	bne.n	8008a52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a4a:	f7ff fcbf 	bl	80083cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e05c      	b.n	8008b0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d106      	bne.n	8008a66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a58:	f107 0314 	add.w	r3, r7, #20
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f001 fac7 	bl	8009ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a62:	2301      	movs	r3, #1
 8008a64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a66:	f7ff fcb1 	bl	80083cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a6a:	f001 f82f 	bl	8009acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a6e:	f7ff fc7b 	bl	8008368 <vPortEnterCritical>
 8008a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a78:	b25b      	sxtb	r3, r3
 8008a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7e:	d103      	bne.n	8008a88 <xQueueGenericSend+0x174>
 8008a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a8e:	b25b      	sxtb	r3, r3
 8008a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a94:	d103      	bne.n	8008a9e <xQueueGenericSend+0x18a>
 8008a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a9e:	f7ff fc95 	bl	80083cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008aa2:	1d3a      	adds	r2, r7, #4
 8008aa4:	f107 0314 	add.w	r3, r7, #20
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f001 fab6 	bl	800a01c <xTaskCheckForTimeOut>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d124      	bne.n	8008b00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ab6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ab8:	f000 fd04 	bl	80094c4 <prvIsQueueFull>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d018      	beq.n	8008af4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac4:	3310      	adds	r3, #16
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f001 f9da 	bl	8009e84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ad2:	f000 fc8f 	bl	80093f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ad6:	f001 f807 	bl	8009ae8 <xTaskResumeAll>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f47f af7c 	bne.w	80089da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8008b14 <xQueueGenericSend+0x200>)
 8008ae4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	e772      	b.n	80089da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008af4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008af6:	f000 fc7d 	bl	80093f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008afa:	f000 fff5 	bl	8009ae8 <xTaskResumeAll>
 8008afe:	e76c      	b.n	80089da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b02:	f000 fc77 	bl	80093f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b06:	f000 ffef 	bl	8009ae8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3738      	adds	r7, #56	@ 0x38
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	e000ed04 	.word	0xe000ed04

08008b18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b090      	sub	sp, #64	@ 0x40
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10b      	bne.n	8008b48 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b42:	bf00      	nop
 8008b44:	bf00      	nop
 8008b46:	e7fd      	b.n	8008b44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d103      	bne.n	8008b56 <xQueueGenericSendFromISR+0x3e>
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <xQueueGenericSendFromISR+0x42>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e000      	b.n	8008b5c <xQueueGenericSendFromISR+0x44>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10b      	bne.n	8008b78 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b72:	bf00      	nop
 8008b74:	bf00      	nop
 8008b76:	e7fd      	b.n	8008b74 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d103      	bne.n	8008b86 <xQueueGenericSendFromISR+0x6e>
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d101      	bne.n	8008b8a <xQueueGenericSendFromISR+0x72>
 8008b86:	2301      	movs	r3, #1
 8008b88:	e000      	b.n	8008b8c <xQueueGenericSendFromISR+0x74>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10b      	bne.n	8008ba8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	623b      	str	r3, [r7, #32]
}
 8008ba2:	bf00      	nop
 8008ba4:	bf00      	nop
 8008ba6:	e7fd      	b.n	8008ba4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ba8:	f7ff fcbe 	bl	8008528 <vPortValidateInterruptPriority>
	__asm volatile
 8008bac:	f3ef 8211 	mrs	r2, BASEPRI
 8008bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	61fa      	str	r2, [r7, #28]
 8008bc2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008bc4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bc6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d302      	bcc.n	8008bda <xQueueGenericSendFromISR+0xc2>
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d12f      	bne.n	8008c3a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008be0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	68b9      	ldr	r1, [r7, #8]
 8008bee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008bf0:	f000 fb70 	bl	80092d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bf4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfc:	d112      	bne.n	8008c24 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d016      	beq.n	8008c34 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	3324      	adds	r3, #36	@ 0x24
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f001 f98c 	bl	8009f28 <xTaskRemoveFromEventList>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00e      	beq.n	8008c34 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00b      	beq.n	8008c34 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	e007      	b.n	8008c34 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008c28:	3301      	adds	r3, #1
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	b25a      	sxtb	r2, r3
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008c34:	2301      	movs	r3, #1
 8008c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008c38:	e001      	b.n	8008c3e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c40:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f383 8811 	msr	BASEPRI, r3
}
 8008c48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3740      	adds	r7, #64	@ 0x40
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08e      	sub	sp, #56	@ 0x38
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10b      	bne.n	8008c80 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	623b      	str	r3, [r7, #32]
}
 8008c7a:	bf00      	nop
 8008c7c:	bf00      	nop
 8008c7e:	e7fd      	b.n	8008c7c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00b      	beq.n	8008ca0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	61fb      	str	r3, [r7, #28]
}
 8008c9a:	bf00      	nop
 8008c9c:	bf00      	nop
 8008c9e:	e7fd      	b.n	8008c9c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d103      	bne.n	8008cb0 <xQueueGiveFromISR+0x5c>
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <xQueueGiveFromISR+0x60>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e000      	b.n	8008cb6 <xQueueGiveFromISR+0x62>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10b      	bne.n	8008cd2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	61bb      	str	r3, [r7, #24]
}
 8008ccc:	bf00      	nop
 8008cce:	bf00      	nop
 8008cd0:	e7fd      	b.n	8008cce <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cd2:	f7ff fc29 	bl	8008528 <vPortValidateInterruptPriority>
	__asm volatile
 8008cd6:	f3ef 8211 	mrs	r2, BASEPRI
 8008cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	617a      	str	r2, [r7, #20]
 8008cec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008cee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d22b      	bcs.n	8008d5a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0e:	1c5a      	adds	r2, r3, #1
 8008d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d12:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1c:	d112      	bne.n	8008d44 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d016      	beq.n	8008d54 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d28:	3324      	adds	r3, #36	@ 0x24
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f001 f8fc 	bl	8009f28 <xTaskRemoveFromEventList>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00e      	beq.n	8008d54 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00b      	beq.n	8008d54 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	e007      	b.n	8008d54 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d48:	3301      	adds	r3, #1
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	b25a      	sxtb	r2, r3
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008d54:	2301      	movs	r3, #1
 8008d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d58:	e001      	b.n	8008d5e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d60:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f383 8811 	msr	BASEPRI, r3
}
 8008d68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3738      	adds	r7, #56	@ 0x38
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08c      	sub	sp, #48	@ 0x30
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d80:	2300      	movs	r3, #0
 8008d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10b      	bne.n	8008da6 <xQueueReceive+0x32>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	623b      	str	r3, [r7, #32]
}
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	e7fd      	b.n	8008da2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d103      	bne.n	8008db4 <xQueueReceive+0x40>
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <xQueueReceive+0x44>
 8008db4:	2301      	movs	r3, #1
 8008db6:	e000      	b.n	8008dba <xQueueReceive+0x46>
 8008db8:	2300      	movs	r3, #0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10b      	bne.n	8008dd6 <xQueueReceive+0x62>
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	61fb      	str	r3, [r7, #28]
}
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	e7fd      	b.n	8008dd2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dd6:	f001 fa6d 	bl	800a2b4 <xTaskGetSchedulerState>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d102      	bne.n	8008de6 <xQueueReceive+0x72>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <xQueueReceive+0x76>
 8008de6:	2301      	movs	r3, #1
 8008de8:	e000      	b.n	8008dec <xQueueReceive+0x78>
 8008dea:	2300      	movs	r3, #0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10b      	bne.n	8008e08 <xQueueReceive+0x94>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	61bb      	str	r3, [r7, #24]
}
 8008e02:	bf00      	nop
 8008e04:	bf00      	nop
 8008e06:	e7fd      	b.n	8008e04 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e08:	f7ff faae 	bl	8008368 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e10:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d01f      	beq.n	8008e58 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e18:	68b9      	ldr	r1, [r7, #8]
 8008e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e1c:	f000 fac4 	bl	80093a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e22:	1e5a      	subs	r2, r3, #1
 8008e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e26:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00f      	beq.n	8008e50 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e32:	3310      	adds	r3, #16
 8008e34:	4618      	mov	r0, r3
 8008e36:	f001 f877 	bl	8009f28 <xTaskRemoveFromEventList>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d007      	beq.n	8008e50 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e40:	4b3c      	ldr	r3, [pc, #240]	@ (8008f34 <xQueueReceive+0x1c0>)
 8008e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e50:	f7ff fabc 	bl	80083cc <vPortExitCritical>
				return pdPASS;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e069      	b.n	8008f2c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d103      	bne.n	8008e66 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e5e:	f7ff fab5 	bl	80083cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e62:	2300      	movs	r3, #0
 8008e64:	e062      	b.n	8008f2c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d106      	bne.n	8008e7a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e6c:	f107 0310 	add.w	r3, r7, #16
 8008e70:	4618      	mov	r0, r3
 8008e72:	f001 f8bd 	bl	8009ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e76:	2301      	movs	r3, #1
 8008e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e7a:	f7ff faa7 	bl	80083cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e7e:	f000 fe25 	bl	8009acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e82:	f7ff fa71 	bl	8008368 <vPortEnterCritical>
 8008e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e8c:	b25b      	sxtb	r3, r3
 8008e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e92:	d103      	bne.n	8008e9c <xQueueReceive+0x128>
 8008e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ea2:	b25b      	sxtb	r3, r3
 8008ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea8:	d103      	bne.n	8008eb2 <xQueueReceive+0x13e>
 8008eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008eb2:	f7ff fa8b 	bl	80083cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008eb6:	1d3a      	adds	r2, r7, #4
 8008eb8:	f107 0310 	add.w	r3, r7, #16
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f001 f8ac 	bl	800a01c <xTaskCheckForTimeOut>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d123      	bne.n	8008f12 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008eca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ecc:	f000 fae4 	bl	8009498 <prvIsQueueEmpty>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d017      	beq.n	8008f06 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed8:	3324      	adds	r3, #36	@ 0x24
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	4611      	mov	r1, r2
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 ffd0 	bl	8009e84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ee6:	f000 fa85 	bl	80093f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008eea:	f000 fdfd 	bl	8009ae8 <xTaskResumeAll>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d189      	bne.n	8008e08 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8008f34 <xQueueReceive+0x1c0>)
 8008ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	e780      	b.n	8008e08 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f08:	f000 fa74 	bl	80093f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f0c:	f000 fdec 	bl	8009ae8 <xTaskResumeAll>
 8008f10:	e77a      	b.n	8008e08 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f14:	f000 fa6e 	bl	80093f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f18:	f000 fde6 	bl	8009ae8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f1e:	f000 fabb 	bl	8009498 <prvIsQueueEmpty>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f43f af6f 	beq.w	8008e08 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3730      	adds	r7, #48	@ 0x30
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	e000ed04 	.word	0xe000ed04

08008f38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08e      	sub	sp, #56	@ 0x38
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f42:	2300      	movs	r3, #0
 8008f44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10b      	bne.n	8008f6c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	623b      	str	r3, [r7, #32]
}
 8008f66:	bf00      	nop
 8008f68:	bf00      	nop
 8008f6a:	e7fd      	b.n	8008f68 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	61fb      	str	r3, [r7, #28]
}
 8008f86:	bf00      	nop
 8008f88:	bf00      	nop
 8008f8a:	e7fd      	b.n	8008f88 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f8c:	f001 f992 	bl	800a2b4 <xTaskGetSchedulerState>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d102      	bne.n	8008f9c <xQueueSemaphoreTake+0x64>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d101      	bne.n	8008fa0 <xQueueSemaphoreTake+0x68>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e000      	b.n	8008fa2 <xQueueSemaphoreTake+0x6a>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10b      	bne.n	8008fbe <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	61bb      	str	r3, [r7, #24]
}
 8008fb8:	bf00      	nop
 8008fba:	bf00      	nop
 8008fbc:	e7fd      	b.n	8008fba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fbe:	f7ff f9d3 	bl	8008368 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d024      	beq.n	8009018 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd0:	1e5a      	subs	r2, r3, #1
 8008fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d104      	bne.n	8008fe8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008fde:	f001 fae3 	bl	800a5a8 <pvTaskIncrementMutexHeldCount>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00f      	beq.n	8009010 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff2:	3310      	adds	r3, #16
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 ff97 	bl	8009f28 <xTaskRemoveFromEventList>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d007      	beq.n	8009010 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009000:	4b54      	ldr	r3, [pc, #336]	@ (8009154 <xQueueSemaphoreTake+0x21c>)
 8009002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009010:	f7ff f9dc 	bl	80083cc <vPortExitCritical>
				return pdPASS;
 8009014:	2301      	movs	r3, #1
 8009016:	e098      	b.n	800914a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d112      	bne.n	8009044 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800901e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00b      	beq.n	800903c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	617b      	str	r3, [r7, #20]
}
 8009036:	bf00      	nop
 8009038:	bf00      	nop
 800903a:	e7fd      	b.n	8009038 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800903c:	f7ff f9c6 	bl	80083cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009040:	2300      	movs	r3, #0
 8009042:	e082      	b.n	800914a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009046:	2b00      	cmp	r3, #0
 8009048:	d106      	bne.n	8009058 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800904a:	f107 030c 	add.w	r3, r7, #12
 800904e:	4618      	mov	r0, r3
 8009050:	f000 ffce 	bl	8009ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009054:	2301      	movs	r3, #1
 8009056:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009058:	f7ff f9b8 	bl	80083cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800905c:	f000 fd36 	bl	8009acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009060:	f7ff f982 	bl	8008368 <vPortEnterCritical>
 8009064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009066:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800906a:	b25b      	sxtb	r3, r3
 800906c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009070:	d103      	bne.n	800907a <xQueueSemaphoreTake+0x142>
 8009072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800907a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800907c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009080:	b25b      	sxtb	r3, r3
 8009082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009086:	d103      	bne.n	8009090 <xQueueSemaphoreTake+0x158>
 8009088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009090:	f7ff f99c 	bl	80083cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009094:	463a      	mov	r2, r7
 8009096:	f107 030c 	add.w	r3, r7, #12
 800909a:	4611      	mov	r1, r2
 800909c:	4618      	mov	r0, r3
 800909e:	f000 ffbd 	bl	800a01c <xTaskCheckForTimeOut>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d132      	bne.n	800910e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090aa:	f000 f9f5 	bl	8009498 <prvIsQueueEmpty>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d026      	beq.n	8009102 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d109      	bne.n	80090d0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80090bc:	f7ff f954 	bl	8008368 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 f913 	bl	800a2f0 <xTaskPriorityInherit>
 80090ca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80090cc:	f7ff f97e 	bl	80083cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80090d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d2:	3324      	adds	r3, #36	@ 0x24
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	4611      	mov	r1, r2
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 fed3 	bl	8009e84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090e0:	f000 f988 	bl	80093f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090e4:	f000 fd00 	bl	8009ae8 <xTaskResumeAll>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f47f af67 	bne.w	8008fbe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80090f0:	4b18      	ldr	r3, [pc, #96]	@ (8009154 <xQueueSemaphoreTake+0x21c>)
 80090f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	e75d      	b.n	8008fbe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009102:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009104:	f000 f976 	bl	80093f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009108:	f000 fcee 	bl	8009ae8 <xTaskResumeAll>
 800910c:	e757      	b.n	8008fbe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800910e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009110:	f000 f970 	bl	80093f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009114:	f000 fce8 	bl	8009ae8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009118:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800911a:	f000 f9bd 	bl	8009498 <prvIsQueueEmpty>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	f43f af4c 	beq.w	8008fbe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00d      	beq.n	8009148 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800912c:	f7ff f91c 	bl	8008368 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009130:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009132:	f000 f8b7 	bl	80092a4 <prvGetDisinheritPriorityAfterTimeout>
 8009136:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800913e:	4618      	mov	r0, r3
 8009140:	f001 f9ae 	bl	800a4a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009144:	f7ff f942 	bl	80083cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009148:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800914a:	4618      	mov	r0, r3
 800914c:	3738      	adds	r7, #56	@ 0x38
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	e000ed04 	.word	0xe000ed04

08009158 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08e      	sub	sp, #56	@ 0x38
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10b      	bne.n	8009186 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	623b      	str	r3, [r7, #32]
}
 8009180:	bf00      	nop
 8009182:	bf00      	nop
 8009184:	e7fd      	b.n	8009182 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d103      	bne.n	8009194 <xQueueReceiveFromISR+0x3c>
 800918c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <xQueueReceiveFromISR+0x40>
 8009194:	2301      	movs	r3, #1
 8009196:	e000      	b.n	800919a <xQueueReceiveFromISR+0x42>
 8009198:	2300      	movs	r3, #0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10b      	bne.n	80091b6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	61fb      	str	r3, [r7, #28]
}
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	e7fd      	b.n	80091b2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091b6:	f7ff f9b7 	bl	8008528 <vPortValidateInterruptPriority>
	__asm volatile
 80091ba:	f3ef 8211 	mrs	r2, BASEPRI
 80091be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	61ba      	str	r2, [r7, #24]
 80091d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80091d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d02f      	beq.n	8009242 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091ec:	68b9      	ldr	r1, [r7, #8]
 80091ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091f0:	f000 f8da 	bl	80093a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f6:	1e5a      	subs	r2, r3, #1
 80091f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80091fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009204:	d112      	bne.n	800922c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d016      	beq.n	800923c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800920e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009210:	3310      	adds	r3, #16
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fe88 	bl	8009f28 <xTaskRemoveFromEventList>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00e      	beq.n	800923c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00b      	beq.n	800923c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	e007      	b.n	800923c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800922c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009230:	3301      	adds	r3, #1
 8009232:	b2db      	uxtb	r3, r3
 8009234:	b25a      	sxtb	r2, r3
 8009236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800923c:	2301      	movs	r3, #1
 800923e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009240:	e001      	b.n	8009246 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009242:	2300      	movs	r3, #0
 8009244:	637b      	str	r3, [r7, #52]	@ 0x34
 8009246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009248:	613b      	str	r3, [r7, #16]
	__asm volatile
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	f383 8811 	msr	BASEPRI, r3
}
 8009250:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009254:	4618      	mov	r0, r3
 8009256:	3738      	adds	r7, #56	@ 0x38
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10b      	bne.n	8009286 <vQueueDelete+0x2a>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	60bb      	str	r3, [r7, #8]
}
 8009280:	bf00      	nop
 8009282:	bf00      	nop
 8009284:	e7fd      	b.n	8009282 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 f95e 	bl	8009548 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009292:	2b00      	cmp	r3, #0
 8009294:	d102      	bne.n	800929c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f7fe fd62 	bl	8007d60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800929c:	bf00      	nop
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d006      	beq.n	80092c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80092be:	60fb      	str	r3, [r7, #12]
 80092c0:	e001      	b.n	80092c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80092c2:	2300      	movs	r3, #0
 80092c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80092c6:	68fb      	ldr	r3, [r7, #12]
	}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80092e0:	2300      	movs	r3, #0
 80092e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10d      	bne.n	800930e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d14d      	bne.n	8009396 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	4618      	mov	r0, r3
 8009300:	f001 f85e 	bl	800a3c0 <xTaskPriorityDisinherit>
 8009304:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	609a      	str	r2, [r3, #8]
 800930c:	e043      	b.n	8009396 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d119      	bne.n	8009348 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6858      	ldr	r0, [r3, #4]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800931c:	461a      	mov	r2, r3
 800931e:	68b9      	ldr	r1, [r7, #8]
 8009320:	f004 fa0a 	bl	800d738 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932c:	441a      	add	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	429a      	cmp	r2, r3
 800933c:	d32b      	bcc.n	8009396 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	605a      	str	r2, [r3, #4]
 8009346:	e026      	b.n	8009396 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	68d8      	ldr	r0, [r3, #12]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009350:	461a      	mov	r2, r3
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	f004 f9f0 	bl	800d738 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	68da      	ldr	r2, [r3, #12]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009360:	425b      	negs	r3, r3
 8009362:	441a      	add	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	429a      	cmp	r2, r3
 8009372:	d207      	bcs.n	8009384 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	689a      	ldr	r2, [r3, #8]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937c:	425b      	negs	r3, r3
 800937e:	441a      	add	r2, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b02      	cmp	r3, #2
 8009388:	d105      	bne.n	8009396 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	3b01      	subs	r3, #1
 8009394:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	1c5a      	adds	r2, r3, #1
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800939e:	697b      	ldr	r3, [r7, #20]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3718      	adds	r7, #24
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d018      	beq.n	80093ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68da      	ldr	r2, [r3, #12]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c2:	441a      	add	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68da      	ldr	r2, [r3, #12]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d303      	bcc.n	80093dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68d9      	ldr	r1, [r3, #12]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093e4:	461a      	mov	r2, r3
 80093e6:	6838      	ldr	r0, [r7, #0]
 80093e8:	f004 f9a6 	bl	800d738 <memcpy>
	}
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093fc:	f7fe ffb4 	bl	8008368 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009406:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009408:	e011      	b.n	800942e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800940e:	2b00      	cmp	r3, #0
 8009410:	d012      	beq.n	8009438 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3324      	adds	r3, #36	@ 0x24
 8009416:	4618      	mov	r0, r3
 8009418:	f000 fd86 	bl	8009f28 <xTaskRemoveFromEventList>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009422:	f000 fe5f 	bl	800a0e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009426:	7bfb      	ldrb	r3, [r7, #15]
 8009428:	3b01      	subs	r3, #1
 800942a:	b2db      	uxtb	r3, r3
 800942c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800942e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009432:	2b00      	cmp	r3, #0
 8009434:	dce9      	bgt.n	800940a <prvUnlockQueue+0x16>
 8009436:	e000      	b.n	800943a <prvUnlockQueue+0x46>
					break;
 8009438:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	22ff      	movs	r2, #255	@ 0xff
 800943e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009442:	f7fe ffc3 	bl	80083cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009446:	f7fe ff8f 	bl	8008368 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009450:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009452:	e011      	b.n	8009478 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d012      	beq.n	8009482 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	3310      	adds	r3, #16
 8009460:	4618      	mov	r0, r3
 8009462:	f000 fd61 	bl	8009f28 <xTaskRemoveFromEventList>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800946c:	f000 fe3a 	bl	800a0e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009470:	7bbb      	ldrb	r3, [r7, #14]
 8009472:	3b01      	subs	r3, #1
 8009474:	b2db      	uxtb	r3, r3
 8009476:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800947c:	2b00      	cmp	r3, #0
 800947e:	dce9      	bgt.n	8009454 <prvUnlockQueue+0x60>
 8009480:	e000      	b.n	8009484 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009482:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	22ff      	movs	r2, #255	@ 0xff
 8009488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800948c:	f7fe ff9e 	bl	80083cc <vPortExitCritical>
}
 8009490:	bf00      	nop
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094a0:	f7fe ff62 	bl	8008368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80094ac:	2301      	movs	r3, #1
 80094ae:	60fb      	str	r3, [r7, #12]
 80094b0:	e001      	b.n	80094b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80094b2:	2300      	movs	r3, #0
 80094b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094b6:	f7fe ff89 	bl	80083cc <vPortExitCritical>

	return xReturn;
 80094ba:	68fb      	ldr	r3, [r7, #12]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094cc:	f7fe ff4c 	bl	8008368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094d8:	429a      	cmp	r2, r3
 80094da:	d102      	bne.n	80094e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094dc:	2301      	movs	r3, #1
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	e001      	b.n	80094e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094e6:	f7fe ff71 	bl	80083cc <vPortExitCritical>

	return xReturn;
 80094ea:	68fb      	ldr	r3, [r7, #12]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094fe:	2300      	movs	r3, #0
 8009500:	60fb      	str	r3, [r7, #12]
 8009502:	e014      	b.n	800952e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009504:	4a0f      	ldr	r2, [pc, #60]	@ (8009544 <vQueueAddToRegistry+0x50>)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10b      	bne.n	8009528 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009510:	490c      	ldr	r1, [pc, #48]	@ (8009544 <vQueueAddToRegistry+0x50>)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	683a      	ldr	r2, [r7, #0]
 8009516:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800951a:	4a0a      	ldr	r2, [pc, #40]	@ (8009544 <vQueueAddToRegistry+0x50>)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	00db      	lsls	r3, r3, #3
 8009520:	4413      	add	r3, r2
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009526:	e006      	b.n	8009536 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3301      	adds	r3, #1
 800952c:	60fb      	str	r3, [r7, #12]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2b07      	cmp	r3, #7
 8009532:	d9e7      	bls.n	8009504 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009534:	bf00      	nop
 8009536:	bf00      	nop
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	20004690 	.word	0x20004690

08009548 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009550:	2300      	movs	r3, #0
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	e016      	b.n	8009584 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009556:	4a10      	ldr	r2, [pc, #64]	@ (8009598 <vQueueUnregisterQueue+0x50>)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	4413      	add	r3, r2
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	429a      	cmp	r2, r3
 8009564:	d10b      	bne.n	800957e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009566:	4a0c      	ldr	r2, [pc, #48]	@ (8009598 <vQueueUnregisterQueue+0x50>)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2100      	movs	r1, #0
 800956c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009570:	4a09      	ldr	r2, [pc, #36]	@ (8009598 <vQueueUnregisterQueue+0x50>)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	00db      	lsls	r3, r3, #3
 8009576:	4413      	add	r3, r2
 8009578:	2200      	movs	r2, #0
 800957a:	605a      	str	r2, [r3, #4]
				break;
 800957c:	e006      	b.n	800958c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	3301      	adds	r3, #1
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b07      	cmp	r3, #7
 8009588:	d9e5      	bls.n	8009556 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800958a:	bf00      	nop
 800958c:	bf00      	nop
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	20004690 	.word	0x20004690

0800959c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80095ac:	f7fe fedc 	bl	8008368 <vPortEnterCritical>
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095b6:	b25b      	sxtb	r3, r3
 80095b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095bc:	d103      	bne.n	80095c6 <vQueueWaitForMessageRestricted+0x2a>
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095cc:	b25b      	sxtb	r3, r3
 80095ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d2:	d103      	bne.n	80095dc <vQueueWaitForMessageRestricted+0x40>
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095dc:	f7fe fef6 	bl	80083cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d106      	bne.n	80095f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	3324      	adds	r3, #36	@ 0x24
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	68b9      	ldr	r1, [r7, #8]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 fc6d 	bl	8009ed0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80095f6:	6978      	ldr	r0, [r7, #20]
 80095f8:	f7ff fefc 	bl	80093f4 <prvUnlockQueue>
	}
 80095fc:	bf00      	nop
 80095fe:	3718      	adds	r7, #24
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08e      	sub	sp, #56	@ 0x38
 8009608:	af04      	add	r7, sp, #16
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10b      	bne.n	8009630 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	623b      	str	r3, [r7, #32]
}
 800962a:	bf00      	nop
 800962c:	bf00      	nop
 800962e:	e7fd      	b.n	800962c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10b      	bne.n	800964e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	61fb      	str	r3, [r7, #28]
}
 8009648:	bf00      	nop
 800964a:	bf00      	nop
 800964c:	e7fd      	b.n	800964a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800964e:	23a8      	movs	r3, #168	@ 0xa8
 8009650:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2ba8      	cmp	r3, #168	@ 0xa8
 8009656:	d00b      	beq.n	8009670 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	61bb      	str	r3, [r7, #24]
}
 800966a:	bf00      	nop
 800966c:	bf00      	nop
 800966e:	e7fd      	b.n	800966c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009670:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009674:	2b00      	cmp	r3, #0
 8009676:	d01e      	beq.n	80096b6 <xTaskCreateStatic+0xb2>
 8009678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800967a:	2b00      	cmp	r3, #0
 800967c:	d01b      	beq.n	80096b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800967e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009680:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009686:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968a:	2202      	movs	r2, #2
 800968c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009690:	2300      	movs	r3, #0
 8009692:	9303      	str	r3, [sp, #12]
 8009694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009696:	9302      	str	r3, [sp, #8]
 8009698:	f107 0314 	add.w	r3, r7, #20
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	68b9      	ldr	r1, [r7, #8]
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 f851 	bl	8009750 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80096b0:	f000 f8f6 	bl	80098a0 <prvAddNewTaskToReadyList>
 80096b4:	e001      	b.n	80096ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80096b6:	2300      	movs	r3, #0
 80096b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80096ba:	697b      	ldr	r3, [r7, #20]
	}
 80096bc:	4618      	mov	r0, r3
 80096be:	3728      	adds	r7, #40	@ 0x28
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08c      	sub	sp, #48	@ 0x30
 80096c8:	af04      	add	r7, sp, #16
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	4613      	mov	r3, r2
 80096d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80096d4:	88fb      	ldrh	r3, [r7, #6]
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe fa73 	bl	8007bc4 <pvPortMalloc>
 80096de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00e      	beq.n	8009704 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80096e6:	20a8      	movs	r0, #168	@ 0xa8
 80096e8:	f7fe fa6c 	bl	8007bc4 <pvPortMalloc>
 80096ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d003      	beq.n	80096fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80096fa:	e005      	b.n	8009708 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80096fc:	6978      	ldr	r0, [r7, #20]
 80096fe:	f7fe fb2f 	bl	8007d60 <vPortFree>
 8009702:	e001      	b.n	8009708 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009704:	2300      	movs	r3, #0
 8009706:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d017      	beq.n	800973e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009716:	88fa      	ldrh	r2, [r7, #6]
 8009718:	2300      	movs	r3, #0
 800971a:	9303      	str	r3, [sp, #12]
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	9302      	str	r3, [sp, #8]
 8009720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	68b9      	ldr	r1, [r7, #8]
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 f80f 	bl	8009750 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009732:	69f8      	ldr	r0, [r7, #28]
 8009734:	f000 f8b4 	bl	80098a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009738:	2301      	movs	r3, #1
 800973a:	61bb      	str	r3, [r7, #24]
 800973c:	e002      	b.n	8009744 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800973e:	f04f 33ff 	mov.w	r3, #4294967295
 8009742:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009744:	69bb      	ldr	r3, [r7, #24]
	}
 8009746:	4618      	mov	r0, r3
 8009748:	3720      	adds	r7, #32
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
	...

08009750 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b088      	sub	sp, #32
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
 800975c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800975e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009760:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	461a      	mov	r2, r3
 8009768:	21a5      	movs	r1, #165	@ 0xa5
 800976a:	f003 ff61 	bl	800d630 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800976e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009770:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009778:	3b01      	subs	r3, #1
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	f023 0307 	bic.w	r3, r3, #7
 8009786:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00b      	beq.n	80097aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	617b      	str	r3, [r7, #20]
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	e7fd      	b.n	80097a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d01f      	beq.n	80097f0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097b0:	2300      	movs	r3, #0
 80097b2:	61fb      	str	r3, [r7, #28]
 80097b4:	e012      	b.n	80097dc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	4413      	add	r3, r2
 80097bc:	7819      	ldrb	r1, [r3, #0]
 80097be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	4413      	add	r3, r2
 80097c4:	3334      	adds	r3, #52	@ 0x34
 80097c6:	460a      	mov	r2, r1
 80097c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d006      	beq.n	80097e4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	3301      	adds	r3, #1
 80097da:	61fb      	str	r3, [r7, #28]
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	2b0f      	cmp	r3, #15
 80097e0:	d9e9      	bls.n	80097b6 <prvInitialiseNewTask+0x66>
 80097e2:	e000      	b.n	80097e6 <prvInitialiseNewTask+0x96>
			{
				break;
 80097e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80097ee:	e003      	b.n	80097f8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fa:	2b37      	cmp	r3, #55	@ 0x37
 80097fc:	d901      	bls.n	8009802 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097fe:	2337      	movs	r3, #55	@ 0x37
 8009800:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009806:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800980c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800980e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009810:	2200      	movs	r2, #0
 8009812:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009816:	3304      	adds	r3, #4
 8009818:	4618      	mov	r0, r3
 800981a:	f7fe fbe1 	bl	8007fe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800981e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009820:	3318      	adds	r3, #24
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe fbdc 	bl	8007fe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800982c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800982e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009830:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009836:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800983c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800983e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009840:	2200      	movs	r2, #0
 8009842:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009848:	2200      	movs	r2, #0
 800984a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800984e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009850:	3354      	adds	r3, #84	@ 0x54
 8009852:	224c      	movs	r2, #76	@ 0x4c
 8009854:	2100      	movs	r1, #0
 8009856:	4618      	mov	r0, r3
 8009858:	f003 feea 	bl	800d630 <memset>
 800985c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985e:	4a0d      	ldr	r2, [pc, #52]	@ (8009894 <prvInitialiseNewTask+0x144>)
 8009860:	659a      	str	r2, [r3, #88]	@ 0x58
 8009862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009864:	4a0c      	ldr	r2, [pc, #48]	@ (8009898 <prvInitialiseNewTask+0x148>)
 8009866:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986a:	4a0c      	ldr	r2, [pc, #48]	@ (800989c <prvInitialiseNewTask+0x14c>)
 800986c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	68f9      	ldr	r1, [r7, #12]
 8009872:	69b8      	ldr	r0, [r7, #24]
 8009874:	f7fe fc48 	bl	8008108 <pxPortInitialiseStack>
 8009878:	4602      	mov	r2, r0
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800987e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009880:	2b00      	cmp	r3, #0
 8009882:	d002      	beq.n	800988a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009888:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800988a:	bf00      	nop
 800988c:	3720      	adds	r7, #32
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	200060e0 	.word	0x200060e0
 8009898:	20006148 	.word	0x20006148
 800989c:	200061b0 	.word	0x200061b0

080098a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80098a8:	f7fe fd5e 	bl	8008368 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80098ac:	4b2d      	ldr	r3, [pc, #180]	@ (8009964 <prvAddNewTaskToReadyList+0xc4>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3301      	adds	r3, #1
 80098b2:	4a2c      	ldr	r2, [pc, #176]	@ (8009964 <prvAddNewTaskToReadyList+0xc4>)
 80098b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80098b6:	4b2c      	ldr	r3, [pc, #176]	@ (8009968 <prvAddNewTaskToReadyList+0xc8>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d109      	bne.n	80098d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80098be:	4a2a      	ldr	r2, [pc, #168]	@ (8009968 <prvAddNewTaskToReadyList+0xc8>)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80098c4:	4b27      	ldr	r3, [pc, #156]	@ (8009964 <prvAddNewTaskToReadyList+0xc4>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d110      	bne.n	80098ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80098cc:	f000 fc2e 	bl	800a12c <prvInitialiseTaskLists>
 80098d0:	e00d      	b.n	80098ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80098d2:	4b26      	ldr	r3, [pc, #152]	@ (800996c <prvAddNewTaskToReadyList+0xcc>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d109      	bne.n	80098ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80098da:	4b23      	ldr	r3, [pc, #140]	@ (8009968 <prvAddNewTaskToReadyList+0xc8>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d802      	bhi.n	80098ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80098e8:	4a1f      	ldr	r2, [pc, #124]	@ (8009968 <prvAddNewTaskToReadyList+0xc8>)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80098ee:	4b20      	ldr	r3, [pc, #128]	@ (8009970 <prvAddNewTaskToReadyList+0xd0>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3301      	adds	r3, #1
 80098f4:	4a1e      	ldr	r2, [pc, #120]	@ (8009970 <prvAddNewTaskToReadyList+0xd0>)
 80098f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80098f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009970 <prvAddNewTaskToReadyList+0xd0>)
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009904:	4b1b      	ldr	r3, [pc, #108]	@ (8009974 <prvAddNewTaskToReadyList+0xd4>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	429a      	cmp	r2, r3
 800990a:	d903      	bls.n	8009914 <prvAddNewTaskToReadyList+0x74>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009910:	4a18      	ldr	r2, [pc, #96]	@ (8009974 <prvAddNewTaskToReadyList+0xd4>)
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009918:	4613      	mov	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4a15      	ldr	r2, [pc, #84]	@ (8009978 <prvAddNewTaskToReadyList+0xd8>)
 8009922:	441a      	add	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3304      	adds	r3, #4
 8009928:	4619      	mov	r1, r3
 800992a:	4610      	mov	r0, r2
 800992c:	f7fe fb65 	bl	8007ffa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009930:	f7fe fd4c 	bl	80083cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009934:	4b0d      	ldr	r3, [pc, #52]	@ (800996c <prvAddNewTaskToReadyList+0xcc>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00e      	beq.n	800995a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800993c:	4b0a      	ldr	r3, [pc, #40]	@ (8009968 <prvAddNewTaskToReadyList+0xc8>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009946:	429a      	cmp	r2, r3
 8009948:	d207      	bcs.n	800995a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800994a:	4b0c      	ldr	r3, [pc, #48]	@ (800997c <prvAddNewTaskToReadyList+0xdc>)
 800994c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800995a:	bf00      	nop
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20004ba4 	.word	0x20004ba4
 8009968:	200046d0 	.word	0x200046d0
 800996c:	20004bb0 	.word	0x20004bb0
 8009970:	20004bc0 	.word	0x20004bc0
 8009974:	20004bac 	.word	0x20004bac
 8009978:	200046d4 	.word	0x200046d4
 800997c:	e000ed04 	.word	0xe000ed04

08009980 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009988:	2300      	movs	r3, #0
 800998a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d018      	beq.n	80099c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009992:	4b14      	ldr	r3, [pc, #80]	@ (80099e4 <vTaskDelay+0x64>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00b      	beq.n	80099b2 <vTaskDelay+0x32>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	60bb      	str	r3, [r7, #8]
}
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	e7fd      	b.n	80099ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80099b2:	f000 f88b 	bl	8009acc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80099b6:	2100      	movs	r1, #0
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fe09 	bl	800a5d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80099be:	f000 f893 	bl	8009ae8 <xTaskResumeAll>
 80099c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d107      	bne.n	80099da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80099ca:	4b07      	ldr	r3, [pc, #28]	@ (80099e8 <vTaskDelay+0x68>)
 80099cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099d0:	601a      	str	r2, [r3, #0]
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099da:	bf00      	nop
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	20004bcc 	.word	0x20004bcc
 80099e8:	e000ed04 	.word	0xe000ed04

080099ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b08a      	sub	sp, #40	@ 0x28
 80099f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80099f6:	2300      	movs	r3, #0
 80099f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80099fa:	463a      	mov	r2, r7
 80099fc:	1d39      	adds	r1, r7, #4
 80099fe:	f107 0308 	add.w	r3, r7, #8
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe f8aa 	bl	8007b5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	9202      	str	r2, [sp, #8]
 8009a10:	9301      	str	r3, [sp, #4]
 8009a12:	2300      	movs	r3, #0
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	2300      	movs	r3, #0
 8009a18:	460a      	mov	r2, r1
 8009a1a:	4924      	ldr	r1, [pc, #144]	@ (8009aac <vTaskStartScheduler+0xc0>)
 8009a1c:	4824      	ldr	r0, [pc, #144]	@ (8009ab0 <vTaskStartScheduler+0xc4>)
 8009a1e:	f7ff fdf1 	bl	8009604 <xTaskCreateStatic>
 8009a22:	4603      	mov	r3, r0
 8009a24:	4a23      	ldr	r2, [pc, #140]	@ (8009ab4 <vTaskStartScheduler+0xc8>)
 8009a26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009a28:	4b22      	ldr	r3, [pc, #136]	@ (8009ab4 <vTaskStartScheduler+0xc8>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009a30:	2301      	movs	r3, #1
 8009a32:	617b      	str	r3, [r7, #20]
 8009a34:	e001      	b.n	8009a3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009a36:	2300      	movs	r3, #0
 8009a38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d102      	bne.n	8009a46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009a40:	f000 fe1a 	bl	800a678 <xTimerCreateTimerTask>
 8009a44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d11b      	bne.n	8009a84 <vTaskStartScheduler+0x98>
	__asm volatile
 8009a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a50:	f383 8811 	msr	BASEPRI, r3
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	613b      	str	r3, [r7, #16]
}
 8009a5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a60:	4b15      	ldr	r3, [pc, #84]	@ (8009ab8 <vTaskStartScheduler+0xcc>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3354      	adds	r3, #84	@ 0x54
 8009a66:	4a15      	ldr	r2, [pc, #84]	@ (8009abc <vTaskStartScheduler+0xd0>)
 8009a68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a6a:	4b15      	ldr	r3, [pc, #84]	@ (8009ac0 <vTaskStartScheduler+0xd4>)
 8009a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a72:	4b14      	ldr	r3, [pc, #80]	@ (8009ac4 <vTaskStartScheduler+0xd8>)
 8009a74:	2201      	movs	r2, #1
 8009a76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a78:	4b13      	ldr	r3, [pc, #76]	@ (8009ac8 <vTaskStartScheduler+0xdc>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a7e:	f7fe fbcf 	bl	8008220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a82:	e00f      	b.n	8009aa4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8a:	d10b      	bne.n	8009aa4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	60fb      	str	r3, [r7, #12]
}
 8009a9e:	bf00      	nop
 8009aa0:	bf00      	nop
 8009aa2:	e7fd      	b.n	8009aa0 <vTaskStartScheduler+0xb4>
}
 8009aa4:	bf00      	nop
 8009aa6:	3718      	adds	r7, #24
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	0800d880 	.word	0x0800d880
 8009ab0:	0800a0fd 	.word	0x0800a0fd
 8009ab4:	20004bc8 	.word	0x20004bc8
 8009ab8:	200046d0 	.word	0x200046d0
 8009abc:	20000100 	.word	0x20000100
 8009ac0:	20004bc4 	.word	0x20004bc4
 8009ac4:	20004bb0 	.word	0x20004bb0
 8009ac8:	20004ba8 	.word	0x20004ba8

08009acc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009acc:	b480      	push	{r7}
 8009ace:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ad0:	4b04      	ldr	r3, [pc, #16]	@ (8009ae4 <vTaskSuspendAll+0x18>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	4a03      	ldr	r2, [pc, #12]	@ (8009ae4 <vTaskSuspendAll+0x18>)
 8009ad8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ada:	bf00      	nop
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	20004bcc 	.word	0x20004bcc

08009ae8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009af2:	2300      	movs	r3, #0
 8009af4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009af6:	4b42      	ldr	r3, [pc, #264]	@ (8009c00 <xTaskResumeAll+0x118>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10b      	bne.n	8009b16 <xTaskResumeAll+0x2e>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	603b      	str	r3, [r7, #0]
}
 8009b10:	bf00      	nop
 8009b12:	bf00      	nop
 8009b14:	e7fd      	b.n	8009b12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b16:	f7fe fc27 	bl	8008368 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b1a:	4b39      	ldr	r3, [pc, #228]	@ (8009c00 <xTaskResumeAll+0x118>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	4a37      	ldr	r2, [pc, #220]	@ (8009c00 <xTaskResumeAll+0x118>)
 8009b22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b24:	4b36      	ldr	r3, [pc, #216]	@ (8009c00 <xTaskResumeAll+0x118>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d162      	bne.n	8009bf2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b2c:	4b35      	ldr	r3, [pc, #212]	@ (8009c04 <xTaskResumeAll+0x11c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d05e      	beq.n	8009bf2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b34:	e02f      	b.n	8009b96 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b36:	4b34      	ldr	r3, [pc, #208]	@ (8009c08 <xTaskResumeAll+0x120>)
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	3318      	adds	r3, #24
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fe fab6 	bl	80080b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fe fab1 	bl	80080b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b56:	4b2d      	ldr	r3, [pc, #180]	@ (8009c0c <xTaskResumeAll+0x124>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d903      	bls.n	8009b66 <xTaskResumeAll+0x7e>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b62:	4a2a      	ldr	r2, [pc, #168]	@ (8009c0c <xTaskResumeAll+0x124>)
 8009b64:	6013      	str	r3, [r2, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4413      	add	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4a27      	ldr	r2, [pc, #156]	@ (8009c10 <xTaskResumeAll+0x128>)
 8009b74:	441a      	add	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	3304      	adds	r3, #4
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	4610      	mov	r0, r2
 8009b7e:	f7fe fa3c 	bl	8007ffa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b86:	4b23      	ldr	r3, [pc, #140]	@ (8009c14 <xTaskResumeAll+0x12c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d302      	bcc.n	8009b96 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009b90:	4b21      	ldr	r3, [pc, #132]	@ (8009c18 <xTaskResumeAll+0x130>)
 8009b92:	2201      	movs	r2, #1
 8009b94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b96:	4b1c      	ldr	r3, [pc, #112]	@ (8009c08 <xTaskResumeAll+0x120>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1cb      	bne.n	8009b36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ba4:	f000 fb66 	bl	800a274 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8009c1c <xTaskResumeAll+0x134>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d010      	beq.n	8009bd6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009bb4:	f000 f846 	bl	8009c44 <xTaskIncrementTick>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009bbe:	4b16      	ldr	r3, [pc, #88]	@ (8009c18 <xTaskResumeAll+0x130>)
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1f1      	bne.n	8009bb4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009bd0:	4b12      	ldr	r3, [pc, #72]	@ (8009c1c <xTaskResumeAll+0x134>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009bd6:	4b10      	ldr	r3, [pc, #64]	@ (8009c18 <xTaskResumeAll+0x130>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d009      	beq.n	8009bf2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009bde:	2301      	movs	r3, #1
 8009be0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009be2:	4b0f      	ldr	r3, [pc, #60]	@ (8009c20 <xTaskResumeAll+0x138>)
 8009be4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009be8:	601a      	str	r2, [r3, #0]
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bf2:	f7fe fbeb 	bl	80083cc <vPortExitCritical>

	return xAlreadyYielded;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	20004bcc 	.word	0x20004bcc
 8009c04:	20004ba4 	.word	0x20004ba4
 8009c08:	20004b64 	.word	0x20004b64
 8009c0c:	20004bac 	.word	0x20004bac
 8009c10:	200046d4 	.word	0x200046d4
 8009c14:	200046d0 	.word	0x200046d0
 8009c18:	20004bb8 	.word	0x20004bb8
 8009c1c:	20004bb4 	.word	0x20004bb4
 8009c20:	e000ed04 	.word	0xe000ed04

08009c24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009c2a:	4b05      	ldr	r3, [pc, #20]	@ (8009c40 <xTaskGetTickCount+0x1c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c30:	687b      	ldr	r3, [r7, #4]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	20004ba8 	.word	0x20004ba8

08009c44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c4e:	4b4f      	ldr	r3, [pc, #316]	@ (8009d8c <xTaskIncrementTick+0x148>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f040 8090 	bne.w	8009d78 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c58:	4b4d      	ldr	r3, [pc, #308]	@ (8009d90 <xTaskIncrementTick+0x14c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c60:	4a4b      	ldr	r2, [pc, #300]	@ (8009d90 <xTaskIncrementTick+0x14c>)
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d121      	bne.n	8009cb0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c6c:	4b49      	ldr	r3, [pc, #292]	@ (8009d94 <xTaskIncrementTick+0x150>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00b      	beq.n	8009c8e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	603b      	str	r3, [r7, #0]
}
 8009c88:	bf00      	nop
 8009c8a:	bf00      	nop
 8009c8c:	e7fd      	b.n	8009c8a <xTaskIncrementTick+0x46>
 8009c8e:	4b41      	ldr	r3, [pc, #260]	@ (8009d94 <xTaskIncrementTick+0x150>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	4b40      	ldr	r3, [pc, #256]	@ (8009d98 <xTaskIncrementTick+0x154>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a3e      	ldr	r2, [pc, #248]	@ (8009d94 <xTaskIncrementTick+0x150>)
 8009c9a:	6013      	str	r3, [r2, #0]
 8009c9c:	4a3e      	ldr	r2, [pc, #248]	@ (8009d98 <xTaskIncrementTick+0x154>)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6013      	str	r3, [r2, #0]
 8009ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8009d9c <xTaskIncrementTick+0x158>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	4a3c      	ldr	r2, [pc, #240]	@ (8009d9c <xTaskIncrementTick+0x158>)
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	f000 fae2 	bl	800a274 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009cb0:	4b3b      	ldr	r3, [pc, #236]	@ (8009da0 <xTaskIncrementTick+0x15c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	693a      	ldr	r2, [r7, #16]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d349      	bcc.n	8009d4e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cba:	4b36      	ldr	r3, [pc, #216]	@ (8009d94 <xTaskIncrementTick+0x150>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d104      	bne.n	8009cce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cc4:	4b36      	ldr	r3, [pc, #216]	@ (8009da0 <xTaskIncrementTick+0x15c>)
 8009cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cca:	601a      	str	r2, [r3, #0]
					break;
 8009ccc:	e03f      	b.n	8009d4e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cce:	4b31      	ldr	r3, [pc, #196]	@ (8009d94 <xTaskIncrementTick+0x150>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d203      	bcs.n	8009cee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ce6:	4a2e      	ldr	r2, [pc, #184]	@ (8009da0 <xTaskIncrementTick+0x15c>)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009cec:	e02f      	b.n	8009d4e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe f9de 	bl	80080b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d004      	beq.n	8009d0a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	3318      	adds	r3, #24
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7fe f9d5 	bl	80080b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d0e:	4b25      	ldr	r3, [pc, #148]	@ (8009da4 <xTaskIncrementTick+0x160>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d903      	bls.n	8009d1e <xTaskIncrementTick+0xda>
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d1a:	4a22      	ldr	r2, [pc, #136]	@ (8009da4 <xTaskIncrementTick+0x160>)
 8009d1c:	6013      	str	r3, [r2, #0]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d22:	4613      	mov	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8009da8 <xTaskIncrementTick+0x164>)
 8009d2c:	441a      	add	r2, r3
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	3304      	adds	r3, #4
 8009d32:	4619      	mov	r1, r3
 8009d34:	4610      	mov	r0, r2
 8009d36:	f7fe f960 	bl	8007ffa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8009dac <xTaskIncrementTick+0x168>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d3b8      	bcc.n	8009cba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d4c:	e7b5      	b.n	8009cba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d4e:	4b17      	ldr	r3, [pc, #92]	@ (8009dac <xTaskIncrementTick+0x168>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d54:	4914      	ldr	r1, [pc, #80]	@ (8009da8 <xTaskIncrementTick+0x164>)
 8009d56:	4613      	mov	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	440b      	add	r3, r1
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d901      	bls.n	8009d6a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009d66:	2301      	movs	r3, #1
 8009d68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009d6a:	4b11      	ldr	r3, [pc, #68]	@ (8009db0 <xTaskIncrementTick+0x16c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d007      	beq.n	8009d82 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009d72:	2301      	movs	r3, #1
 8009d74:	617b      	str	r3, [r7, #20]
 8009d76:	e004      	b.n	8009d82 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009d78:	4b0e      	ldr	r3, [pc, #56]	@ (8009db4 <xTaskIncrementTick+0x170>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8009db4 <xTaskIncrementTick+0x170>)
 8009d80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009d82:	697b      	ldr	r3, [r7, #20]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	20004bcc 	.word	0x20004bcc
 8009d90:	20004ba8 	.word	0x20004ba8
 8009d94:	20004b5c 	.word	0x20004b5c
 8009d98:	20004b60 	.word	0x20004b60
 8009d9c:	20004bbc 	.word	0x20004bbc
 8009da0:	20004bc4 	.word	0x20004bc4
 8009da4:	20004bac 	.word	0x20004bac
 8009da8:	200046d4 	.word	0x200046d4
 8009dac:	200046d0 	.word	0x200046d0
 8009db0:	20004bb8 	.word	0x20004bb8
 8009db4:	20004bb4 	.word	0x20004bb4

08009db8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8009e6c <vTaskSwitchContext+0xb4>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8009e70 <vTaskSwitchContext+0xb8>)
 8009dc8:	2201      	movs	r2, #1
 8009dca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009dcc:	e047      	b.n	8009e5e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009dce:	4b28      	ldr	r3, [pc, #160]	@ (8009e70 <vTaskSwitchContext+0xb8>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dd4:	4b27      	ldr	r3, [pc, #156]	@ (8009e74 <vTaskSwitchContext+0xbc>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	60fb      	str	r3, [r7, #12]
 8009dda:	e011      	b.n	8009e00 <vTaskSwitchContext+0x48>
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10b      	bne.n	8009dfa <vTaskSwitchContext+0x42>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	607b      	str	r3, [r7, #4]
}
 8009df4:	bf00      	nop
 8009df6:	bf00      	nop
 8009df8:	e7fd      	b.n	8009df6 <vTaskSwitchContext+0x3e>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	491d      	ldr	r1, [pc, #116]	@ (8009e78 <vTaskSwitchContext+0xc0>)
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	440b      	add	r3, r1
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0e3      	beq.n	8009ddc <vTaskSwitchContext+0x24>
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	4613      	mov	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4a16      	ldr	r2, [pc, #88]	@ (8009e78 <vTaskSwitchContext+0xc0>)
 8009e20:	4413      	add	r3, r2
 8009e22:	60bb      	str	r3, [r7, #8]
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	685a      	ldr	r2, [r3, #4]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	605a      	str	r2, [r3, #4]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	3308      	adds	r3, #8
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d104      	bne.n	8009e44 <vTaskSwitchContext+0x8c>
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	605a      	str	r2, [r3, #4]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8009e7c <vTaskSwitchContext+0xc4>)
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	4a09      	ldr	r2, [pc, #36]	@ (8009e74 <vTaskSwitchContext+0xbc>)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e54:	4b09      	ldr	r3, [pc, #36]	@ (8009e7c <vTaskSwitchContext+0xc4>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3354      	adds	r3, #84	@ 0x54
 8009e5a:	4a09      	ldr	r2, [pc, #36]	@ (8009e80 <vTaskSwitchContext+0xc8>)
 8009e5c:	6013      	str	r3, [r2, #0]
}
 8009e5e:	bf00      	nop
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	20004bcc 	.word	0x20004bcc
 8009e70:	20004bb8 	.word	0x20004bb8
 8009e74:	20004bac 	.word	0x20004bac
 8009e78:	200046d4 	.word	0x200046d4
 8009e7c:	200046d0 	.word	0x200046d0
 8009e80:	20000100 	.word	0x20000100

08009e84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10b      	bne.n	8009eac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	60fb      	str	r3, [r7, #12]
}
 8009ea6:	bf00      	nop
 8009ea8:	bf00      	nop
 8009eaa:	e7fd      	b.n	8009ea8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009eac:	4b07      	ldr	r3, [pc, #28]	@ (8009ecc <vTaskPlaceOnEventList+0x48>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	3318      	adds	r3, #24
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f7fe f8c4 	bl	8008042 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009eba:	2101      	movs	r1, #1
 8009ebc:	6838      	ldr	r0, [r7, #0]
 8009ebe:	f000 fb87 	bl	800a5d0 <prvAddCurrentTaskToDelayedList>
}
 8009ec2:	bf00      	nop
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	200046d0 	.word	0x200046d0

08009ed0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10b      	bne.n	8009efa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	617b      	str	r3, [r7, #20]
}
 8009ef4:	bf00      	nop
 8009ef6:	bf00      	nop
 8009ef8:	e7fd      	b.n	8009ef6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009efa:	4b0a      	ldr	r3, [pc, #40]	@ (8009f24 <vTaskPlaceOnEventListRestricted+0x54>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3318      	adds	r3, #24
 8009f00:	4619      	mov	r1, r3
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f7fe f879 	bl	8007ffa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d002      	beq.n	8009f14 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009f14:	6879      	ldr	r1, [r7, #4]
 8009f16:	68b8      	ldr	r0, [r7, #8]
 8009f18:	f000 fb5a 	bl	800a5d0 <prvAddCurrentTaskToDelayedList>
	}
 8009f1c:	bf00      	nop
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	200046d0 	.word	0x200046d0

08009f28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10b      	bne.n	8009f56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	60fb      	str	r3, [r7, #12]
}
 8009f50:	bf00      	nop
 8009f52:	bf00      	nop
 8009f54:	e7fd      	b.n	8009f52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	3318      	adds	r3, #24
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fe f8aa 	bl	80080b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f60:	4b1d      	ldr	r3, [pc, #116]	@ (8009fd8 <xTaskRemoveFromEventList+0xb0>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d11d      	bne.n	8009fa4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7fe f8a1 	bl	80080b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f76:	4b19      	ldr	r3, [pc, #100]	@ (8009fdc <xTaskRemoveFromEventList+0xb4>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d903      	bls.n	8009f86 <xTaskRemoveFromEventList+0x5e>
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f82:	4a16      	ldr	r2, [pc, #88]	@ (8009fdc <xTaskRemoveFromEventList+0xb4>)
 8009f84:	6013      	str	r3, [r2, #0]
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4a13      	ldr	r2, [pc, #76]	@ (8009fe0 <xTaskRemoveFromEventList+0xb8>)
 8009f94:	441a      	add	r2, r3
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	3304      	adds	r3, #4
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	f7fe f82c 	bl	8007ffa <vListInsertEnd>
 8009fa2:	e005      	b.n	8009fb0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	3318      	adds	r3, #24
 8009fa8:	4619      	mov	r1, r3
 8009faa:	480e      	ldr	r0, [pc, #56]	@ (8009fe4 <xTaskRemoveFromEventList+0xbc>)
 8009fac:	f7fe f825 	bl	8007ffa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8009fe8 <xTaskRemoveFromEventList+0xc0>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d905      	bls.n	8009fca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8009fec <xTaskRemoveFromEventList+0xc4>)
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	601a      	str	r2, [r3, #0]
 8009fc8:	e001      	b.n	8009fce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009fce:	697b      	ldr	r3, [r7, #20]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3718      	adds	r7, #24
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	20004bcc 	.word	0x20004bcc
 8009fdc:	20004bac 	.word	0x20004bac
 8009fe0:	200046d4 	.word	0x200046d4
 8009fe4:	20004b64 	.word	0x20004b64
 8009fe8:	200046d0 	.word	0x200046d0
 8009fec:	20004bb8 	.word	0x20004bb8

08009ff0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ff8:	4b06      	ldr	r3, [pc, #24]	@ (800a014 <vTaskInternalSetTimeOutState+0x24>)
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a000:	4b05      	ldr	r3, [pc, #20]	@ (800a018 <vTaskInternalSetTimeOutState+0x28>)
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	605a      	str	r2, [r3, #4]
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	20004bbc 	.word	0x20004bbc
 800a018:	20004ba8 	.word	0x20004ba8

0800a01c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b088      	sub	sp, #32
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10b      	bne.n	800a044 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	613b      	str	r3, [r7, #16]
}
 800a03e:	bf00      	nop
 800a040:	bf00      	nop
 800a042:	e7fd      	b.n	800a040 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10b      	bne.n	800a062 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	60fb      	str	r3, [r7, #12]
}
 800a05c:	bf00      	nop
 800a05e:	bf00      	nop
 800a060:	e7fd      	b.n	800a05e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a062:	f7fe f981 	bl	8008368 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a066:	4b1d      	ldr	r3, [pc, #116]	@ (800a0dc <xTaskCheckForTimeOut+0xc0>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07e:	d102      	bne.n	800a086 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a080:	2300      	movs	r3, #0
 800a082:	61fb      	str	r3, [r7, #28]
 800a084:	e023      	b.n	800a0ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	4b15      	ldr	r3, [pc, #84]	@ (800a0e0 <xTaskCheckForTimeOut+0xc4>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d007      	beq.n	800a0a2 <xTaskCheckForTimeOut+0x86>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d302      	bcc.n	800a0a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a09c:	2301      	movs	r3, #1
 800a09e:	61fb      	str	r3, [r7, #28]
 800a0a0:	e015      	b.n	800a0ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d20b      	bcs.n	800a0c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	1ad2      	subs	r2, r2, r3
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7ff ff99 	bl	8009ff0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	61fb      	str	r3, [r7, #28]
 800a0c2:	e004      	b.n	800a0ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0ce:	f7fe f97d 	bl	80083cc <vPortExitCritical>

	return xReturn;
 800a0d2:	69fb      	ldr	r3, [r7, #28]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3720      	adds	r7, #32
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20004ba8 	.word	0x20004ba8
 800a0e0:	20004bbc 	.word	0x20004bbc

0800a0e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a0e8:	4b03      	ldr	r3, [pc, #12]	@ (800a0f8 <vTaskMissedYield+0x14>)
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	601a      	str	r2, [r3, #0]
}
 800a0ee:	bf00      	nop
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr
 800a0f8:	20004bb8 	.word	0x20004bb8

0800a0fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a104:	f000 f852 	bl	800a1ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a108:	4b06      	ldr	r3, [pc, #24]	@ (800a124 <prvIdleTask+0x28>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d9f9      	bls.n	800a104 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a110:	4b05      	ldr	r3, [pc, #20]	@ (800a128 <prvIdleTask+0x2c>)
 800a112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a116:	601a      	str	r2, [r3, #0]
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a120:	e7f0      	b.n	800a104 <prvIdleTask+0x8>
 800a122:	bf00      	nop
 800a124:	200046d4 	.word	0x200046d4
 800a128:	e000ed04 	.word	0xe000ed04

0800a12c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a132:	2300      	movs	r3, #0
 800a134:	607b      	str	r3, [r7, #4]
 800a136:	e00c      	b.n	800a152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	4613      	mov	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4a12      	ldr	r2, [pc, #72]	@ (800a18c <prvInitialiseTaskLists+0x60>)
 800a144:	4413      	add	r3, r2
 800a146:	4618      	mov	r0, r3
 800a148:	f7fd ff2a 	bl	8007fa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3301      	adds	r3, #1
 800a150:	607b      	str	r3, [r7, #4]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b37      	cmp	r3, #55	@ 0x37
 800a156:	d9ef      	bls.n	800a138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a158:	480d      	ldr	r0, [pc, #52]	@ (800a190 <prvInitialiseTaskLists+0x64>)
 800a15a:	f7fd ff21 	bl	8007fa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a15e:	480d      	ldr	r0, [pc, #52]	@ (800a194 <prvInitialiseTaskLists+0x68>)
 800a160:	f7fd ff1e 	bl	8007fa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a164:	480c      	ldr	r0, [pc, #48]	@ (800a198 <prvInitialiseTaskLists+0x6c>)
 800a166:	f7fd ff1b 	bl	8007fa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a16a:	480c      	ldr	r0, [pc, #48]	@ (800a19c <prvInitialiseTaskLists+0x70>)
 800a16c:	f7fd ff18 	bl	8007fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a170:	480b      	ldr	r0, [pc, #44]	@ (800a1a0 <prvInitialiseTaskLists+0x74>)
 800a172:	f7fd ff15 	bl	8007fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a176:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a4 <prvInitialiseTaskLists+0x78>)
 800a178:	4a05      	ldr	r2, [pc, #20]	@ (800a190 <prvInitialiseTaskLists+0x64>)
 800a17a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a17c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a8 <prvInitialiseTaskLists+0x7c>)
 800a17e:	4a05      	ldr	r2, [pc, #20]	@ (800a194 <prvInitialiseTaskLists+0x68>)
 800a180:	601a      	str	r2, [r3, #0]
}
 800a182:	bf00      	nop
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	200046d4 	.word	0x200046d4
 800a190:	20004b34 	.word	0x20004b34
 800a194:	20004b48 	.word	0x20004b48
 800a198:	20004b64 	.word	0x20004b64
 800a19c:	20004b78 	.word	0x20004b78
 800a1a0:	20004b90 	.word	0x20004b90
 800a1a4:	20004b5c 	.word	0x20004b5c
 800a1a8:	20004b60 	.word	0x20004b60

0800a1ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1b2:	e019      	b.n	800a1e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a1b4:	f7fe f8d8 	bl	8008368 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1b8:	4b10      	ldr	r3, [pc, #64]	@ (800a1fc <prvCheckTasksWaitingTermination+0x50>)
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fd ff75 	bl	80080b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a1ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a200 <prvCheckTasksWaitingTermination+0x54>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	4a0b      	ldr	r2, [pc, #44]	@ (800a200 <prvCheckTasksWaitingTermination+0x54>)
 800a1d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a1d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a204 <prvCheckTasksWaitingTermination+0x58>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	4a0a      	ldr	r2, [pc, #40]	@ (800a204 <prvCheckTasksWaitingTermination+0x58>)
 800a1dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a1de:	f7fe f8f5 	bl	80083cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f810 	bl	800a208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1e8:	4b06      	ldr	r3, [pc, #24]	@ (800a204 <prvCheckTasksWaitingTermination+0x58>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1e1      	bne.n	800a1b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1f0:	bf00      	nop
 800a1f2:	bf00      	nop
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20004b78 	.word	0x20004b78
 800a200:	20004ba4 	.word	0x20004ba4
 800a204:	20004b8c 	.word	0x20004b8c

0800a208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3354      	adds	r3, #84	@ 0x54
 800a214:	4618      	mov	r0, r3
 800a216:	f003 fa13 	bl	800d640 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a220:	2b00      	cmp	r3, #0
 800a222:	d108      	bne.n	800a236 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fd fd99 	bl	8007d60 <vPortFree>
				vPortFree( pxTCB );
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7fd fd96 	bl	8007d60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a234:	e019      	b.n	800a26a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d103      	bne.n	800a248 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f7fd fd8d 	bl	8007d60 <vPortFree>
	}
 800a246:	e010      	b.n	800a26a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d00b      	beq.n	800a26a <prvDeleteTCB+0x62>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	60fb      	str	r3, [r7, #12]
}
 800a264:	bf00      	nop
 800a266:	bf00      	nop
 800a268:	e7fd      	b.n	800a266 <prvDeleteTCB+0x5e>
	}
 800a26a:	bf00      	nop
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a27a:	4b0c      	ldr	r3, [pc, #48]	@ (800a2ac <prvResetNextTaskUnblockTime+0x38>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d104      	bne.n	800a28e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a284:	4b0a      	ldr	r3, [pc, #40]	@ (800a2b0 <prvResetNextTaskUnblockTime+0x3c>)
 800a286:	f04f 32ff 	mov.w	r2, #4294967295
 800a28a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a28c:	e008      	b.n	800a2a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a28e:	4b07      	ldr	r3, [pc, #28]	@ (800a2ac <prvResetNextTaskUnblockTime+0x38>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	4a04      	ldr	r2, [pc, #16]	@ (800a2b0 <prvResetNextTaskUnblockTime+0x3c>)
 800a29e:	6013      	str	r3, [r2, #0]
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	20004b5c 	.word	0x20004b5c
 800a2b0:	20004bc4 	.word	0x20004bc4

0800a2b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a2ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a2e8 <xTaskGetSchedulerState+0x34>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d102      	bne.n	800a2c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	607b      	str	r3, [r7, #4]
 800a2c6:	e008      	b.n	800a2da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2c8:	4b08      	ldr	r3, [pc, #32]	@ (800a2ec <xTaskGetSchedulerState+0x38>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d102      	bne.n	800a2d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	607b      	str	r3, [r7, #4]
 800a2d4:	e001      	b.n	800a2da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a2da:	687b      	ldr	r3, [r7, #4]
	}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	20004bb0 	.word	0x20004bb0
 800a2ec:	20004bcc 	.word	0x20004bcc

0800a2f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d051      	beq.n	800a3aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a30a:	4b2a      	ldr	r3, [pc, #168]	@ (800a3b4 <xTaskPriorityInherit+0xc4>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a310:	429a      	cmp	r2, r3
 800a312:	d241      	bcs.n	800a398 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	db06      	blt.n	800a32a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a31c:	4b25      	ldr	r3, [pc, #148]	@ (800a3b4 <xTaskPriorityInherit+0xc4>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a322:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	6959      	ldr	r1, [r3, #20]
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a332:	4613      	mov	r3, r2
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	4413      	add	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4a1f      	ldr	r2, [pc, #124]	@ (800a3b8 <xTaskPriorityInherit+0xc8>)
 800a33c:	4413      	add	r3, r2
 800a33e:	4299      	cmp	r1, r3
 800a340:	d122      	bne.n	800a388 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	3304      	adds	r3, #4
 800a346:	4618      	mov	r0, r3
 800a348:	f7fd feb4 	bl	80080b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a34c:	4b19      	ldr	r3, [pc, #100]	@ (800a3b4 <xTaskPriorityInherit+0xc4>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a35a:	4b18      	ldr	r3, [pc, #96]	@ (800a3bc <xTaskPriorityInherit+0xcc>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d903      	bls.n	800a36a <xTaskPriorityInherit+0x7a>
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a366:	4a15      	ldr	r2, [pc, #84]	@ (800a3bc <xTaskPriorityInherit+0xcc>)
 800a368:	6013      	str	r3, [r2, #0]
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a36e:	4613      	mov	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	4413      	add	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	4a10      	ldr	r2, [pc, #64]	@ (800a3b8 <xTaskPriorityInherit+0xc8>)
 800a378:	441a      	add	r2, r3
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f7fd fe3a 	bl	8007ffa <vListInsertEnd>
 800a386:	e004      	b.n	800a392 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a388:	4b0a      	ldr	r3, [pc, #40]	@ (800a3b4 <xTaskPriorityInherit+0xc4>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a392:	2301      	movs	r3, #1
 800a394:	60fb      	str	r3, [r7, #12]
 800a396:	e008      	b.n	800a3aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a39c:	4b05      	ldr	r3, [pc, #20]	@ (800a3b4 <xTaskPriorityInherit+0xc4>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d201      	bcs.n	800a3aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
	}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3710      	adds	r7, #16
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	200046d0 	.word	0x200046d0
 800a3b8:	200046d4 	.word	0x200046d4
 800a3bc:	20004bac 	.word	0x20004bac

0800a3c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d058      	beq.n	800a488 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3d6:	4b2f      	ldr	r3, [pc, #188]	@ (800a494 <xTaskPriorityDisinherit+0xd4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d00b      	beq.n	800a3f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e4:	f383 8811 	msr	BASEPRI, r3
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	60fb      	str	r3, [r7, #12]
}
 800a3f2:	bf00      	nop
 800a3f4:	bf00      	nop
 800a3f6:	e7fd      	b.n	800a3f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10b      	bne.n	800a418 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	60bb      	str	r3, [r7, #8]
}
 800a412:	bf00      	nop
 800a414:	bf00      	nop
 800a416:	e7fd      	b.n	800a414 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a41c:	1e5a      	subs	r2, r3, #1
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d02c      	beq.n	800a488 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a432:	2b00      	cmp	r3, #0
 800a434:	d128      	bne.n	800a488 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	3304      	adds	r3, #4
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fd fe3a 	bl	80080b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a458:	4b0f      	ldr	r3, [pc, #60]	@ (800a498 <xTaskPriorityDisinherit+0xd8>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d903      	bls.n	800a468 <xTaskPriorityDisinherit+0xa8>
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a464:	4a0c      	ldr	r2, [pc, #48]	@ (800a498 <xTaskPriorityDisinherit+0xd8>)
 800a466:	6013      	str	r3, [r2, #0]
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a46c:	4613      	mov	r3, r2
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	4413      	add	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4a09      	ldr	r2, [pc, #36]	@ (800a49c <xTaskPriorityDisinherit+0xdc>)
 800a476:	441a      	add	r2, r3
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	3304      	adds	r3, #4
 800a47c:	4619      	mov	r1, r3
 800a47e:	4610      	mov	r0, r2
 800a480:	f7fd fdbb 	bl	8007ffa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a484:	2301      	movs	r3, #1
 800a486:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a488:	697b      	ldr	r3, [r7, #20]
	}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3718      	adds	r7, #24
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	200046d0 	.word	0x200046d0
 800a498:	20004bac 	.word	0x20004bac
 800a49c:	200046d4 	.word	0x200046d4

0800a4a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b088      	sub	sp, #32
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d06c      	beq.n	800a592 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10b      	bne.n	800a4d8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	60fb      	str	r3, [r7, #12]
}
 800a4d2:	bf00      	nop
 800a4d4:	bf00      	nop
 800a4d6:	e7fd      	b.n	800a4d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4dc:	683a      	ldr	r2, [r7, #0]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d902      	bls.n	800a4e8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	61fb      	str	r3, [r7, #28]
 800a4e6:	e002      	b.n	800a4ee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f2:	69fa      	ldr	r2, [r7, #28]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d04c      	beq.n	800a592 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d147      	bne.n	800a592 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a502:	4b26      	ldr	r3, [pc, #152]	@ (800a59c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	69ba      	ldr	r2, [r7, #24]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d10b      	bne.n	800a524 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	60bb      	str	r3, [r7, #8]
}
 800a51e:	bf00      	nop
 800a520:	bf00      	nop
 800a522:	e7fd      	b.n	800a520 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a528:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	69fa      	ldr	r2, [r7, #28]
 800a52e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	2b00      	cmp	r3, #0
 800a536:	db04      	blt.n	800a542 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	6959      	ldr	r1, [r3, #20]
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	4613      	mov	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4a13      	ldr	r2, [pc, #76]	@ (800a5a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a552:	4413      	add	r3, r2
 800a554:	4299      	cmp	r1, r3
 800a556:	d11c      	bne.n	800a592 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	3304      	adds	r3, #4
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fd fda9 	bl	80080b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a566:	4b0f      	ldr	r3, [pc, #60]	@ (800a5a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d903      	bls.n	800a576 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a572:	4a0c      	ldr	r2, [pc, #48]	@ (800a5a4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a574:	6013      	str	r3, [r2, #0]
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a57a:	4613      	mov	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4a07      	ldr	r2, [pc, #28]	@ (800a5a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a584:	441a      	add	r2, r3
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	3304      	adds	r3, #4
 800a58a:	4619      	mov	r1, r3
 800a58c:	4610      	mov	r0, r2
 800a58e:	f7fd fd34 	bl	8007ffa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a592:	bf00      	nop
 800a594:	3720      	adds	r7, #32
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	200046d0 	.word	0x200046d0
 800a5a0:	200046d4 	.word	0x200046d4
 800a5a4:	20004bac 	.word	0x20004bac

0800a5a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a5a8:	b480      	push	{r7}
 800a5aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a5ac:	4b07      	ldr	r3, [pc, #28]	@ (800a5cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d004      	beq.n	800a5be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a5b4:	4b05      	ldr	r3, [pc, #20]	@ (800a5cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a5ba:	3201      	adds	r2, #1
 800a5bc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a5be:	4b03      	ldr	r3, [pc, #12]	@ (800a5cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
	}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	200046d0 	.word	0x200046d0

0800a5d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a5da:	4b21      	ldr	r3, [pc, #132]	@ (800a660 <prvAddCurrentTaskToDelayedList+0x90>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5e0:	4b20      	ldr	r3, [pc, #128]	@ (800a664 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3304      	adds	r3, #4
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fd fd64 	bl	80080b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f2:	d10a      	bne.n	800a60a <prvAddCurrentTaskToDelayedList+0x3a>
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d007      	beq.n	800a60a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5fa:	4b1a      	ldr	r3, [pc, #104]	@ (800a664 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	3304      	adds	r3, #4
 800a600:	4619      	mov	r1, r3
 800a602:	4819      	ldr	r0, [pc, #100]	@ (800a668 <prvAddCurrentTaskToDelayedList+0x98>)
 800a604:	f7fd fcf9 	bl	8007ffa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a608:	e026      	b.n	800a658 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4413      	add	r3, r2
 800a610:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a612:	4b14      	ldr	r3, [pc, #80]	@ (800a664 <prvAddCurrentTaskToDelayedList+0x94>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d209      	bcs.n	800a636 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a622:	4b12      	ldr	r3, [pc, #72]	@ (800a66c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	4b0f      	ldr	r3, [pc, #60]	@ (800a664 <prvAddCurrentTaskToDelayedList+0x94>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3304      	adds	r3, #4
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f7fd fd07 	bl	8008042 <vListInsert>
}
 800a634:	e010      	b.n	800a658 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a636:	4b0e      	ldr	r3, [pc, #56]	@ (800a670 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	4b0a      	ldr	r3, [pc, #40]	@ (800a664 <prvAddCurrentTaskToDelayedList+0x94>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	3304      	adds	r3, #4
 800a640:	4619      	mov	r1, r3
 800a642:	4610      	mov	r0, r2
 800a644:	f7fd fcfd 	bl	8008042 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a648:	4b0a      	ldr	r3, [pc, #40]	@ (800a674 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d202      	bcs.n	800a658 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a652:	4a08      	ldr	r2, [pc, #32]	@ (800a674 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	6013      	str	r3, [r2, #0]
}
 800a658:	bf00      	nop
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	20004ba8 	.word	0x20004ba8
 800a664:	200046d0 	.word	0x200046d0
 800a668:	20004b90 	.word	0x20004b90
 800a66c:	20004b60 	.word	0x20004b60
 800a670:	20004b5c 	.word	0x20004b5c
 800a674:	20004bc4 	.word	0x20004bc4

0800a678 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08a      	sub	sp, #40	@ 0x28
 800a67c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a67e:	2300      	movs	r3, #0
 800a680:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a682:	f000 fb13 	bl	800acac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a686:	4b1d      	ldr	r3, [pc, #116]	@ (800a6fc <xTimerCreateTimerTask+0x84>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d021      	beq.n	800a6d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a68e:	2300      	movs	r3, #0
 800a690:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a692:	2300      	movs	r3, #0
 800a694:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a696:	1d3a      	adds	r2, r7, #4
 800a698:	f107 0108 	add.w	r1, r7, #8
 800a69c:	f107 030c 	add.w	r3, r7, #12
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fd fa75 	bl	8007b90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a6a6:	6879      	ldr	r1, [r7, #4]
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	9202      	str	r2, [sp, #8]
 800a6ae:	9301      	str	r3, [sp, #4]
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	460a      	mov	r2, r1
 800a6b8:	4911      	ldr	r1, [pc, #68]	@ (800a700 <xTimerCreateTimerTask+0x88>)
 800a6ba:	4812      	ldr	r0, [pc, #72]	@ (800a704 <xTimerCreateTimerTask+0x8c>)
 800a6bc:	f7fe ffa2 	bl	8009604 <xTaskCreateStatic>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	4a11      	ldr	r2, [pc, #68]	@ (800a708 <xTimerCreateTimerTask+0x90>)
 800a6c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a6c6:	4b10      	ldr	r3, [pc, #64]	@ (800a708 <xTimerCreateTimerTask+0x90>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10b      	bne.n	800a6f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	613b      	str	r3, [r7, #16]
}
 800a6ea:	bf00      	nop
 800a6ec:	bf00      	nop
 800a6ee:	e7fd      	b.n	800a6ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a6f0:	697b      	ldr	r3, [r7, #20]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3718      	adds	r7, #24
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20004c00 	.word	0x20004c00
 800a700:	0800d888 	.word	0x0800d888
 800a704:	0800a845 	.word	0x0800a845
 800a708:	20004c04 	.word	0x20004c04

0800a70c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08a      	sub	sp, #40	@ 0x28
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
 800a718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a71a:	2300      	movs	r3, #0
 800a71c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10b      	bne.n	800a73c <xTimerGenericCommand+0x30>
	__asm volatile
 800a724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a728:	f383 8811 	msr	BASEPRI, r3
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	623b      	str	r3, [r7, #32]
}
 800a736:	bf00      	nop
 800a738:	bf00      	nop
 800a73a:	e7fd      	b.n	800a738 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a73c:	4b19      	ldr	r3, [pc, #100]	@ (800a7a4 <xTimerGenericCommand+0x98>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d02a      	beq.n	800a79a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	2b05      	cmp	r3, #5
 800a754:	dc18      	bgt.n	800a788 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a756:	f7ff fdad 	bl	800a2b4 <xTaskGetSchedulerState>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d109      	bne.n	800a774 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a760:	4b10      	ldr	r3, [pc, #64]	@ (800a7a4 <xTimerGenericCommand+0x98>)
 800a762:	6818      	ldr	r0, [r3, #0]
 800a764:	f107 0110 	add.w	r1, r7, #16
 800a768:	2300      	movs	r3, #0
 800a76a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a76c:	f7fe f8d2 	bl	8008914 <xQueueGenericSend>
 800a770:	6278      	str	r0, [r7, #36]	@ 0x24
 800a772:	e012      	b.n	800a79a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a774:	4b0b      	ldr	r3, [pc, #44]	@ (800a7a4 <xTimerGenericCommand+0x98>)
 800a776:	6818      	ldr	r0, [r3, #0]
 800a778:	f107 0110 	add.w	r1, r7, #16
 800a77c:	2300      	movs	r3, #0
 800a77e:	2200      	movs	r2, #0
 800a780:	f7fe f8c8 	bl	8008914 <xQueueGenericSend>
 800a784:	6278      	str	r0, [r7, #36]	@ 0x24
 800a786:	e008      	b.n	800a79a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a788:	4b06      	ldr	r3, [pc, #24]	@ (800a7a4 <xTimerGenericCommand+0x98>)
 800a78a:	6818      	ldr	r0, [r3, #0]
 800a78c:	f107 0110 	add.w	r1, r7, #16
 800a790:	2300      	movs	r3, #0
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	f7fe f9c0 	bl	8008b18 <xQueueGenericSendFromISR>
 800a798:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3728      	adds	r7, #40	@ 0x28
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	20004c00 	.word	0x20004c00

0800a7a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7b2:	4b23      	ldr	r3, [pc, #140]	@ (800a840 <prvProcessExpiredTimer+0x98>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7fd fc77 	bl	80080b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7cc:	f003 0304 	and.w	r3, r3, #4
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d023      	beq.n	800a81c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	699a      	ldr	r2, [r3, #24]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	18d1      	adds	r1, r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	683a      	ldr	r2, [r7, #0]
 800a7e0:	6978      	ldr	r0, [r7, #20]
 800a7e2:	f000 f8d5 	bl	800a990 <prvInsertTimerInActiveList>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d020      	beq.n	800a82e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	6978      	ldr	r0, [r7, #20]
 800a7f8:	f7ff ff88 	bl	800a70c <xTimerGenericCommand>
 800a7fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d114      	bne.n	800a82e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a808:	f383 8811 	msr	BASEPRI, r3
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	60fb      	str	r3, [r7, #12]
}
 800a816:	bf00      	nop
 800a818:	bf00      	nop
 800a81a:	e7fd      	b.n	800a818 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a822:	f023 0301 	bic.w	r3, r3, #1
 800a826:	b2da      	uxtb	r2, r3
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	6a1b      	ldr	r3, [r3, #32]
 800a832:	6978      	ldr	r0, [r7, #20]
 800a834:	4798      	blx	r3
}
 800a836:	bf00      	nop
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	20004bf8 	.word	0x20004bf8

0800a844 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a84c:	f107 0308 	add.w	r3, r7, #8
 800a850:	4618      	mov	r0, r3
 800a852:	f000 f859 	bl	800a908 <prvGetNextExpireTime>
 800a856:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	4619      	mov	r1, r3
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f000 f805 	bl	800a86c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a862:	f000 f8d7 	bl	800aa14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a866:	bf00      	nop
 800a868:	e7f0      	b.n	800a84c <prvTimerTask+0x8>
	...

0800a86c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a876:	f7ff f929 	bl	8009acc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a87a:	f107 0308 	add.w	r3, r7, #8
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 f866 	bl	800a950 <prvSampleTimeNow>
 800a884:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d130      	bne.n	800a8ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10a      	bne.n	800a8a8 <prvProcessTimerOrBlockTask+0x3c>
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	429a      	cmp	r2, r3
 800a898:	d806      	bhi.n	800a8a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a89a:	f7ff f925 	bl	8009ae8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a89e:	68f9      	ldr	r1, [r7, #12]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f7ff ff81 	bl	800a7a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a8a6:	e024      	b.n	800a8f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d008      	beq.n	800a8c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a8ae:	4b13      	ldr	r3, [pc, #76]	@ (800a8fc <prvProcessTimerOrBlockTask+0x90>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d101      	bne.n	800a8bc <prvProcessTimerOrBlockTask+0x50>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e000      	b.n	800a8be <prvProcessTimerOrBlockTask+0x52>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a8c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a900 <prvProcessTimerOrBlockTask+0x94>)
 800a8c2:	6818      	ldr	r0, [r3, #0]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	f7fe fe65 	bl	800959c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a8d2:	f7ff f909 	bl	8009ae8 <xTaskResumeAll>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10a      	bne.n	800a8f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a8dc:	4b09      	ldr	r3, [pc, #36]	@ (800a904 <prvProcessTimerOrBlockTask+0x98>)
 800a8de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	f3bf 8f6f 	isb	sy
}
 800a8ec:	e001      	b.n	800a8f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a8ee:	f7ff f8fb 	bl	8009ae8 <xTaskResumeAll>
}
 800a8f2:	bf00      	nop
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	20004bfc 	.word	0x20004bfc
 800a900:	20004c00 	.word	0x20004c00
 800a904:	e000ed04 	.word	0xe000ed04

0800a908 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a910:	4b0e      	ldr	r3, [pc, #56]	@ (800a94c <prvGetNextExpireTime+0x44>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <prvGetNextExpireTime+0x16>
 800a91a:	2201      	movs	r2, #1
 800a91c:	e000      	b.n	800a920 <prvGetNextExpireTime+0x18>
 800a91e:	2200      	movs	r2, #0
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d105      	bne.n	800a938 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a92c:	4b07      	ldr	r3, [pc, #28]	@ (800a94c <prvGetNextExpireTime+0x44>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	60fb      	str	r3, [r7, #12]
 800a936:	e001      	b.n	800a93c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a93c:	68fb      	ldr	r3, [r7, #12]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	20004bf8 	.word	0x20004bf8

0800a950 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a958:	f7ff f964 	bl	8009c24 <xTaskGetTickCount>
 800a95c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a95e:	4b0b      	ldr	r3, [pc, #44]	@ (800a98c <prvSampleTimeNow+0x3c>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	429a      	cmp	r2, r3
 800a966:	d205      	bcs.n	800a974 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a968:	f000 f93a 	bl	800abe0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	e002      	b.n	800a97a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a97a:	4a04      	ldr	r2, [pc, #16]	@ (800a98c <prvSampleTimeNow+0x3c>)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a980:	68fb      	ldr	r3, [r7, #12]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	20004c08 	.word	0x20004c08

0800a990 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
 800a99c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a9ae:	68ba      	ldr	r2, [r7, #8]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d812      	bhi.n	800a9dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	1ad2      	subs	r2, r2, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d302      	bcc.n	800a9ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	617b      	str	r3, [r7, #20]
 800a9c8:	e01b      	b.n	800aa02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a9ca:	4b10      	ldr	r3, [pc, #64]	@ (800aa0c <prvInsertTimerInActiveList+0x7c>)
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4610      	mov	r0, r2
 800a9d6:	f7fd fb34 	bl	8008042 <vListInsert>
 800a9da:	e012      	b.n	800aa02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d206      	bcs.n	800a9f2 <prvInsertTimerInActiveList+0x62>
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d302      	bcc.n	800a9f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	617b      	str	r3, [r7, #20]
 800a9f0:	e007      	b.n	800aa02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9f2:	4b07      	ldr	r3, [pc, #28]	@ (800aa10 <prvInsertTimerInActiveList+0x80>)
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	f7fd fb20 	bl	8008042 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aa02:	697b      	ldr	r3, [r7, #20]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3718      	adds	r7, #24
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	20004bfc 	.word	0x20004bfc
 800aa10:	20004bf8 	.word	0x20004bf8

0800aa14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b08e      	sub	sp, #56	@ 0x38
 800aa18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa1a:	e0ce      	b.n	800abba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	da19      	bge.n	800aa56 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa22:	1d3b      	adds	r3, r7, #4
 800aa24:	3304      	adds	r3, #4
 800aa26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aa28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10b      	bne.n	800aa46 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	61fb      	str	r3, [r7, #28]
}
 800aa40:	bf00      	nop
 800aa42:	bf00      	nop
 800aa44:	e7fd      	b.n	800aa42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa4c:	6850      	ldr	r0, [r2, #4]
 800aa4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa50:	6892      	ldr	r2, [r2, #8]
 800aa52:	4611      	mov	r1, r2
 800aa54:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f2c0 80ae 	blt.w	800abba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d004      	beq.n	800aa74 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa6c:	3304      	adds	r3, #4
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fd fb20 	bl	80080b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa74:	463b      	mov	r3, r7
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7ff ff6a 	bl	800a950 <prvSampleTimeNow>
 800aa7c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2b09      	cmp	r3, #9
 800aa82:	f200 8097 	bhi.w	800abb4 <prvProcessReceivedCommands+0x1a0>
 800aa86:	a201      	add	r2, pc, #4	@ (adr r2, 800aa8c <prvProcessReceivedCommands+0x78>)
 800aa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8c:	0800aab5 	.word	0x0800aab5
 800aa90:	0800aab5 	.word	0x0800aab5
 800aa94:	0800aab5 	.word	0x0800aab5
 800aa98:	0800ab2b 	.word	0x0800ab2b
 800aa9c:	0800ab3f 	.word	0x0800ab3f
 800aaa0:	0800ab8b 	.word	0x0800ab8b
 800aaa4:	0800aab5 	.word	0x0800aab5
 800aaa8:	0800aab5 	.word	0x0800aab5
 800aaac:	0800ab2b 	.word	0x0800ab2b
 800aab0:	0800ab3f 	.word	0x0800ab3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aaba:	f043 0301 	orr.w	r3, r3, #1
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaca:	699b      	ldr	r3, [r3, #24]
 800aacc:	18d1      	adds	r1, r2, r3
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aad4:	f7ff ff5c 	bl	800a990 <prvInsertTimerInActiveList>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d06c      	beq.n	800abb8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aae4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aaec:	f003 0304 	and.w	r3, r3, #4
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d061      	beq.n	800abb8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf8:	699b      	ldr	r3, [r3, #24]
 800aafa:	441a      	add	r2, r3
 800aafc:	2300      	movs	r3, #0
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	2300      	movs	r3, #0
 800ab02:	2100      	movs	r1, #0
 800ab04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab06:	f7ff fe01 	bl	800a70c <xTimerGenericCommand>
 800ab0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ab0c:	6a3b      	ldr	r3, [r7, #32]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d152      	bne.n	800abb8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	61bb      	str	r3, [r7, #24]
}
 800ab24:	bf00      	nop
 800ab26:	bf00      	nop
 800ab28:	e7fd      	b.n	800ab26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab30:	f023 0301 	bic.w	r3, r3, #1
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ab3c:	e03d      	b.n	800abba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab44:	f043 0301 	orr.w	r3, r3, #1
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab58:	699b      	ldr	r3, [r3, #24]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10b      	bne.n	800ab76 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	617b      	str	r3, [r7, #20]
}
 800ab70:	bf00      	nop
 800ab72:	bf00      	nop
 800ab74:	e7fd      	b.n	800ab72 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab78:	699a      	ldr	r2, [r3, #24]
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7c:	18d1      	adds	r1, r2, r3
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab84:	f7ff ff04 	bl	800a990 <prvInsertTimerInActiveList>
					break;
 800ab88:	e017      	b.n	800abba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab90:	f003 0302 	and.w	r3, r3, #2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d103      	bne.n	800aba0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ab98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab9a:	f7fd f8e1 	bl	8007d60 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab9e:	e00c      	b.n	800abba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aba6:	f023 0301 	bic.w	r3, r3, #1
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800abb2:	e002      	b.n	800abba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800abb4:	bf00      	nop
 800abb6:	e000      	b.n	800abba <prvProcessReceivedCommands+0x1a6>
					break;
 800abb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abba:	4b08      	ldr	r3, [pc, #32]	@ (800abdc <prvProcessReceivedCommands+0x1c8>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	1d39      	adds	r1, r7, #4
 800abc0:	2200      	movs	r2, #0
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fe f8d6 	bl	8008d74 <xQueueReceive>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f47f af26 	bne.w	800aa1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800abd0:	bf00      	nop
 800abd2:	bf00      	nop
 800abd4:	3730      	adds	r7, #48	@ 0x30
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	20004c00 	.word	0x20004c00

0800abe0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b088      	sub	sp, #32
 800abe4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abe6:	e049      	b.n	800ac7c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abe8:	4b2e      	ldr	r3, [pc, #184]	@ (800aca4 <prvSwitchTimerLists+0xc4>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abf2:	4b2c      	ldr	r3, [pc, #176]	@ (800aca4 <prvSwitchTimerLists+0xc4>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3304      	adds	r3, #4
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fd fa57 	bl	80080b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac14:	f003 0304 	and.w	r3, r3, #4
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d02f      	beq.n	800ac7c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	699b      	ldr	r3, [r3, #24]
 800ac20:	693a      	ldr	r2, [r7, #16]
 800ac22:	4413      	add	r3, r2
 800ac24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ac26:	68ba      	ldr	r2, [r7, #8]
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d90e      	bls.n	800ac4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac3a:	4b1a      	ldr	r3, [pc, #104]	@ (800aca4 <prvSwitchTimerLists+0xc4>)
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3304      	adds	r3, #4
 800ac42:	4619      	mov	r1, r3
 800ac44:	4610      	mov	r0, r2
 800ac46:	f7fd f9fc 	bl	8008042 <vListInsert>
 800ac4a:	e017      	b.n	800ac7c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	2300      	movs	r3, #0
 800ac52:	693a      	ldr	r2, [r7, #16]
 800ac54:	2100      	movs	r1, #0
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f7ff fd58 	bl	800a70c <xTimerGenericCommand>
 800ac5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10b      	bne.n	800ac7c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ac64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac68:	f383 8811 	msr	BASEPRI, r3
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	603b      	str	r3, [r7, #0]
}
 800ac76:	bf00      	nop
 800ac78:	bf00      	nop
 800ac7a:	e7fd      	b.n	800ac78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac7c:	4b09      	ldr	r3, [pc, #36]	@ (800aca4 <prvSwitchTimerLists+0xc4>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1b0      	bne.n	800abe8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac86:	4b07      	ldr	r3, [pc, #28]	@ (800aca4 <prvSwitchTimerLists+0xc4>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac8c:	4b06      	ldr	r3, [pc, #24]	@ (800aca8 <prvSwitchTimerLists+0xc8>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a04      	ldr	r2, [pc, #16]	@ (800aca4 <prvSwitchTimerLists+0xc4>)
 800ac92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac94:	4a04      	ldr	r2, [pc, #16]	@ (800aca8 <prvSwitchTimerLists+0xc8>)
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	6013      	str	r3, [r2, #0]
}
 800ac9a:	bf00      	nop
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	20004bf8 	.word	0x20004bf8
 800aca8:	20004bfc 	.word	0x20004bfc

0800acac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800acb2:	f7fd fb59 	bl	8008368 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800acb6:	4b15      	ldr	r3, [pc, #84]	@ (800ad0c <prvCheckForValidListAndQueue+0x60>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d120      	bne.n	800ad00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800acbe:	4814      	ldr	r0, [pc, #80]	@ (800ad10 <prvCheckForValidListAndQueue+0x64>)
 800acc0:	f7fd f96e 	bl	8007fa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800acc4:	4813      	ldr	r0, [pc, #76]	@ (800ad14 <prvCheckForValidListAndQueue+0x68>)
 800acc6:	f7fd f96b 	bl	8007fa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800acca:	4b13      	ldr	r3, [pc, #76]	@ (800ad18 <prvCheckForValidListAndQueue+0x6c>)
 800accc:	4a10      	ldr	r2, [pc, #64]	@ (800ad10 <prvCheckForValidListAndQueue+0x64>)
 800acce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800acd0:	4b12      	ldr	r3, [pc, #72]	@ (800ad1c <prvCheckForValidListAndQueue+0x70>)
 800acd2:	4a10      	ldr	r2, [pc, #64]	@ (800ad14 <prvCheckForValidListAndQueue+0x68>)
 800acd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800acd6:	2300      	movs	r3, #0
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	4b11      	ldr	r3, [pc, #68]	@ (800ad20 <prvCheckForValidListAndQueue+0x74>)
 800acdc:	4a11      	ldr	r2, [pc, #68]	@ (800ad24 <prvCheckForValidListAndQueue+0x78>)
 800acde:	2110      	movs	r1, #16
 800ace0:	200a      	movs	r0, #10
 800ace2:	f7fd fccd 	bl	8008680 <xQueueGenericCreateStatic>
 800ace6:	4603      	mov	r3, r0
 800ace8:	4a08      	ldr	r2, [pc, #32]	@ (800ad0c <prvCheckForValidListAndQueue+0x60>)
 800acea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800acec:	4b07      	ldr	r3, [pc, #28]	@ (800ad0c <prvCheckForValidListAndQueue+0x60>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d005      	beq.n	800ad00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800acf4:	4b05      	ldr	r3, [pc, #20]	@ (800ad0c <prvCheckForValidListAndQueue+0x60>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	490b      	ldr	r1, [pc, #44]	@ (800ad28 <prvCheckForValidListAndQueue+0x7c>)
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fe fbfa 	bl	80094f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad00:	f7fd fb64 	bl	80083cc <vPortExitCritical>
}
 800ad04:	bf00      	nop
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20004c00 	.word	0x20004c00
 800ad10:	20004bd0 	.word	0x20004bd0
 800ad14:	20004be4 	.word	0x20004be4
 800ad18:	20004bf8 	.word	0x20004bf8
 800ad1c:	20004bfc 	.word	0x20004bfc
 800ad20:	20004cac 	.word	0x20004cac
 800ad24:	20004c0c 	.word	0x20004c0c
 800ad28:	0800d890 	.word	0x0800d890

0800ad2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	460b      	mov	r3, r1
 800ad36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ad38:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ad3c:	f002 fc34 	bl	800d5a8 <USBD_static_malloc>
 800ad40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d109      	bne.n	800ad5c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	32b0      	adds	r2, #176	@ 0xb0
 800ad52:	2100      	movs	r1, #0
 800ad54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ad58:	2302      	movs	r3, #2
 800ad5a:	e0d4      	b.n	800af06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ad5c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ad60:	2100      	movs	r1, #0
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f002 fc64 	bl	800d630 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	32b0      	adds	r2, #176	@ 0xb0
 800ad72:	68f9      	ldr	r1, [r7, #12]
 800ad74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	32b0      	adds	r2, #176	@ 0xb0
 800ad82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	7c1b      	ldrb	r3, [r3, #16]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d138      	bne.n	800ae06 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad94:	4b5e      	ldr	r3, [pc, #376]	@ (800af10 <USBD_CDC_Init+0x1e4>)
 800ad96:	7819      	ldrb	r1, [r3, #0]
 800ad98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad9c:	2202      	movs	r2, #2
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f002 fadf 	bl	800d362 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ada4:	4b5a      	ldr	r3, [pc, #360]	@ (800af10 <USBD_CDC_Init+0x1e4>)
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	f003 020f 	and.w	r2, r3, #15
 800adac:	6879      	ldr	r1, [r7, #4]
 800adae:	4613      	mov	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	440b      	add	r3, r1
 800adb8:	3324      	adds	r3, #36	@ 0x24
 800adba:	2201      	movs	r2, #1
 800adbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800adbe:	4b55      	ldr	r3, [pc, #340]	@ (800af14 <USBD_CDC_Init+0x1e8>)
 800adc0:	7819      	ldrb	r1, [r3, #0]
 800adc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800adc6:	2202      	movs	r2, #2
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f002 faca 	bl	800d362 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800adce:	4b51      	ldr	r3, [pc, #324]	@ (800af14 <USBD_CDC_Init+0x1e8>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	f003 020f 	and.w	r2, r3, #15
 800add6:	6879      	ldr	r1, [r7, #4]
 800add8:	4613      	mov	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4413      	add	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	440b      	add	r3, r1
 800ade2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ade6:	2201      	movs	r2, #1
 800ade8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800adea:	4b4b      	ldr	r3, [pc, #300]	@ (800af18 <USBD_CDC_Init+0x1ec>)
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	f003 020f 	and.w	r2, r3, #15
 800adf2:	6879      	ldr	r1, [r7, #4]
 800adf4:	4613      	mov	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	440b      	add	r3, r1
 800adfe:	3326      	adds	r3, #38	@ 0x26
 800ae00:	2210      	movs	r2, #16
 800ae02:	801a      	strh	r2, [r3, #0]
 800ae04:	e035      	b.n	800ae72 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ae06:	4b42      	ldr	r3, [pc, #264]	@ (800af10 <USBD_CDC_Init+0x1e4>)
 800ae08:	7819      	ldrb	r1, [r3, #0]
 800ae0a:	2340      	movs	r3, #64	@ 0x40
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f002 faa7 	bl	800d362 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ae14:	4b3e      	ldr	r3, [pc, #248]	@ (800af10 <USBD_CDC_Init+0x1e4>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	f003 020f 	and.w	r2, r3, #15
 800ae1c:	6879      	ldr	r1, [r7, #4]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	440b      	add	r3, r1
 800ae28:	3324      	adds	r3, #36	@ 0x24
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ae2e:	4b39      	ldr	r3, [pc, #228]	@ (800af14 <USBD_CDC_Init+0x1e8>)
 800ae30:	7819      	ldrb	r1, [r3, #0]
 800ae32:	2340      	movs	r3, #64	@ 0x40
 800ae34:	2202      	movs	r2, #2
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f002 fa93 	bl	800d362 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ae3c:	4b35      	ldr	r3, [pc, #212]	@ (800af14 <USBD_CDC_Init+0x1e8>)
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	f003 020f 	and.w	r2, r3, #15
 800ae44:	6879      	ldr	r1, [r7, #4]
 800ae46:	4613      	mov	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4413      	add	r3, r2
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	440b      	add	r3, r1
 800ae50:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae54:	2201      	movs	r2, #1
 800ae56:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ae58:	4b2f      	ldr	r3, [pc, #188]	@ (800af18 <USBD_CDC_Init+0x1ec>)
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	f003 020f 	and.w	r2, r3, #15
 800ae60:	6879      	ldr	r1, [r7, #4]
 800ae62:	4613      	mov	r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	4413      	add	r3, r2
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	440b      	add	r3, r1
 800ae6c:	3326      	adds	r3, #38	@ 0x26
 800ae6e:	2210      	movs	r2, #16
 800ae70:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae72:	4b29      	ldr	r3, [pc, #164]	@ (800af18 <USBD_CDC_Init+0x1ec>)
 800ae74:	7819      	ldrb	r1, [r3, #0]
 800ae76:	2308      	movs	r3, #8
 800ae78:	2203      	movs	r2, #3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f002 fa71 	bl	800d362 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ae80:	4b25      	ldr	r3, [pc, #148]	@ (800af18 <USBD_CDC_Init+0x1ec>)
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	f003 020f 	and.w	r2, r3, #15
 800ae88:	6879      	ldr	r1, [r7, #4]
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	440b      	add	r3, r1
 800ae94:	3324      	adds	r3, #36	@ 0x24
 800ae96:	2201      	movs	r2, #1
 800ae98:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	33b0      	adds	r3, #176	@ 0xb0
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4413      	add	r3, r2
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d101      	bne.n	800aed4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800aed0:	2302      	movs	r3, #2
 800aed2:	e018      	b.n	800af06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	7c1b      	ldrb	r3, [r3, #16]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10a      	bne.n	800aef2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aedc:	4b0d      	ldr	r3, [pc, #52]	@ (800af14 <USBD_CDC_Init+0x1e8>)
 800aede:	7819      	ldrb	r1, [r3, #0]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aee6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f002 fb28 	bl	800d540 <USBD_LL_PrepareReceive>
 800aef0:	e008      	b.n	800af04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aef2:	4b08      	ldr	r3, [pc, #32]	@ (800af14 <USBD_CDC_Init+0x1e8>)
 800aef4:	7819      	ldrb	r1, [r3, #0]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aefc:	2340      	movs	r3, #64	@ 0x40
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f002 fb1e 	bl	800d540 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	20000097 	.word	0x20000097
 800af14:	20000098 	.word	0x20000098
 800af18:	20000099 	.word	0x20000099

0800af1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	460b      	mov	r3, r1
 800af26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800af28:	4b3a      	ldr	r3, [pc, #232]	@ (800b014 <USBD_CDC_DeInit+0xf8>)
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f002 fa3d 	bl	800d3ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800af34:	4b37      	ldr	r3, [pc, #220]	@ (800b014 <USBD_CDC_DeInit+0xf8>)
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	f003 020f 	and.w	r2, r3, #15
 800af3c:	6879      	ldr	r1, [r7, #4]
 800af3e:	4613      	mov	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4413      	add	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	440b      	add	r3, r1
 800af48:	3324      	adds	r3, #36	@ 0x24
 800af4a:	2200      	movs	r2, #0
 800af4c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800af4e:	4b32      	ldr	r3, [pc, #200]	@ (800b018 <USBD_CDC_DeInit+0xfc>)
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	4619      	mov	r1, r3
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f002 fa2a 	bl	800d3ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800af5a:	4b2f      	ldr	r3, [pc, #188]	@ (800b018 <USBD_CDC_DeInit+0xfc>)
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	f003 020f 	and.w	r2, r3, #15
 800af62:	6879      	ldr	r1, [r7, #4]
 800af64:	4613      	mov	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4413      	add	r3, r2
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	440b      	add	r3, r1
 800af6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800af72:	2200      	movs	r2, #0
 800af74:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800af76:	4b29      	ldr	r3, [pc, #164]	@ (800b01c <USBD_CDC_DeInit+0x100>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	4619      	mov	r1, r3
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f002 fa16 	bl	800d3ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800af82:	4b26      	ldr	r3, [pc, #152]	@ (800b01c <USBD_CDC_DeInit+0x100>)
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	f003 020f 	and.w	r2, r3, #15
 800af8a:	6879      	ldr	r1, [r7, #4]
 800af8c:	4613      	mov	r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	440b      	add	r3, r1
 800af96:	3324      	adds	r3, #36	@ 0x24
 800af98:	2200      	movs	r2, #0
 800af9a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800af9c:	4b1f      	ldr	r3, [pc, #124]	@ (800b01c <USBD_CDC_DeInit+0x100>)
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	f003 020f 	and.w	r2, r3, #15
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	4613      	mov	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4413      	add	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	440b      	add	r3, r1
 800afb0:	3326      	adds	r3, #38	@ 0x26
 800afb2:	2200      	movs	r2, #0
 800afb4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	32b0      	adds	r2, #176	@ 0xb0
 800afc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d01f      	beq.n	800b008 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	33b0      	adds	r3, #176	@ 0xb0
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	32b0      	adds	r2, #176	@ 0xb0
 800afe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afea:	4618      	mov	r0, r3
 800afec:	f002 faea 	bl	800d5c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	32b0      	adds	r2, #176	@ 0xb0
 800affa:	2100      	movs	r1, #0
 800affc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	20000097 	.word	0x20000097
 800b018:	20000098 	.word	0x20000098
 800b01c:	20000099 	.word	0x20000099

0800b020 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	32b0      	adds	r2, #176	@ 0xb0
 800b034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b038:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b03a:	2300      	movs	r3, #0
 800b03c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b03e:	2300      	movs	r3, #0
 800b040:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b042:	2300      	movs	r3, #0
 800b044:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b04c:	2303      	movs	r3, #3
 800b04e:	e0bf      	b.n	800b1d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d050      	beq.n	800b0fe <USBD_CDC_Setup+0xde>
 800b05c:	2b20      	cmp	r3, #32
 800b05e:	f040 80af 	bne.w	800b1c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	88db      	ldrh	r3, [r3, #6]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d03a      	beq.n	800b0e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	b25b      	sxtb	r3, r3
 800b070:	2b00      	cmp	r3, #0
 800b072:	da1b      	bge.n	800b0ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	33b0      	adds	r3, #176	@ 0xb0
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	4413      	add	r3, r2
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	683a      	ldr	r2, [r7, #0]
 800b088:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b08a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	88d2      	ldrh	r2, [r2, #6]
 800b090:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	88db      	ldrh	r3, [r3, #6]
 800b096:	2b07      	cmp	r3, #7
 800b098:	bf28      	it	cs
 800b09a:	2307      	movcs	r3, #7
 800b09c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	89fa      	ldrh	r2, [r7, #14]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 fd53 	bl	800cb50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b0aa:	e090      	b.n	800b1ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	785a      	ldrb	r2, [r3, #1]
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	88db      	ldrh	r3, [r3, #6]
 800b0ba:	2b3f      	cmp	r3, #63	@ 0x3f
 800b0bc:	d803      	bhi.n	800b0c6 <USBD_CDC_Setup+0xa6>
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	88db      	ldrh	r3, [r3, #6]
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	e000      	b.n	800b0c8 <USBD_CDC_Setup+0xa8>
 800b0c6:	2240      	movs	r2, #64	@ 0x40
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b0ce:	6939      	ldr	r1, [r7, #16]
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f001 fd65 	bl	800cba8 <USBD_CtlPrepareRx>
      break;
 800b0de:	e076      	b.n	800b1ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	33b0      	adds	r3, #176	@ 0xb0
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	7850      	ldrb	r0, [r2, #1]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	4798      	blx	r3
      break;
 800b0fc:	e067      	b.n	800b1ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	785b      	ldrb	r3, [r3, #1]
 800b102:	2b0b      	cmp	r3, #11
 800b104:	d851      	bhi.n	800b1aa <USBD_CDC_Setup+0x18a>
 800b106:	a201      	add	r2, pc, #4	@ (adr r2, 800b10c <USBD_CDC_Setup+0xec>)
 800b108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10c:	0800b13d 	.word	0x0800b13d
 800b110:	0800b1b9 	.word	0x0800b1b9
 800b114:	0800b1ab 	.word	0x0800b1ab
 800b118:	0800b1ab 	.word	0x0800b1ab
 800b11c:	0800b1ab 	.word	0x0800b1ab
 800b120:	0800b1ab 	.word	0x0800b1ab
 800b124:	0800b1ab 	.word	0x0800b1ab
 800b128:	0800b1ab 	.word	0x0800b1ab
 800b12c:	0800b1ab 	.word	0x0800b1ab
 800b130:	0800b1ab 	.word	0x0800b1ab
 800b134:	0800b167 	.word	0x0800b167
 800b138:	0800b191 	.word	0x0800b191
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b142:	b2db      	uxtb	r3, r3
 800b144:	2b03      	cmp	r3, #3
 800b146:	d107      	bne.n	800b158 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b148:	f107 030a 	add.w	r3, r7, #10
 800b14c:	2202      	movs	r2, #2
 800b14e:	4619      	mov	r1, r3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f001 fcfd 	bl	800cb50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b156:	e032      	b.n	800b1be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b158:	6839      	ldr	r1, [r7, #0]
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f001 fc7b 	bl	800ca56 <USBD_CtlError>
            ret = USBD_FAIL;
 800b160:	2303      	movs	r3, #3
 800b162:	75fb      	strb	r3, [r7, #23]
          break;
 800b164:	e02b      	b.n	800b1be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b03      	cmp	r3, #3
 800b170:	d107      	bne.n	800b182 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b172:	f107 030d 	add.w	r3, r7, #13
 800b176:	2201      	movs	r2, #1
 800b178:	4619      	mov	r1, r3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f001 fce8 	bl	800cb50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b180:	e01d      	b.n	800b1be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f001 fc66 	bl	800ca56 <USBD_CtlError>
            ret = USBD_FAIL;
 800b18a:	2303      	movs	r3, #3
 800b18c:	75fb      	strb	r3, [r7, #23]
          break;
 800b18e:	e016      	b.n	800b1be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b196:	b2db      	uxtb	r3, r3
 800b198:	2b03      	cmp	r3, #3
 800b19a:	d00f      	beq.n	800b1bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b19c:	6839      	ldr	r1, [r7, #0]
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f001 fc59 	bl	800ca56 <USBD_CtlError>
            ret = USBD_FAIL;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b1a8:	e008      	b.n	800b1bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b1aa:	6839      	ldr	r1, [r7, #0]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f001 fc52 	bl	800ca56 <USBD_CtlError>
          ret = USBD_FAIL;
 800b1b2:	2303      	movs	r3, #3
 800b1b4:	75fb      	strb	r3, [r7, #23]
          break;
 800b1b6:	e002      	b.n	800b1be <USBD_CDC_Setup+0x19e>
          break;
 800b1b8:	bf00      	nop
 800b1ba:	e008      	b.n	800b1ce <USBD_CDC_Setup+0x1ae>
          break;
 800b1bc:	bf00      	nop
      }
      break;
 800b1be:	e006      	b.n	800b1ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b1c0:	6839      	ldr	r1, [r7, #0]
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f001 fc47 	bl	800ca56 <USBD_CtlError>
      ret = USBD_FAIL;
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b1cc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b1ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	32b0      	adds	r2, #176	@ 0xb0
 800b1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d101      	bne.n	800b202 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b1fe:	2303      	movs	r3, #3
 800b200:	e065      	b.n	800b2ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	32b0      	adds	r2, #176	@ 0xb0
 800b20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b210:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b212:	78fb      	ldrb	r3, [r7, #3]
 800b214:	f003 020f 	and.w	r2, r3, #15
 800b218:	6879      	ldr	r1, [r7, #4]
 800b21a:	4613      	mov	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4413      	add	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	440b      	add	r3, r1
 800b224:	3318      	adds	r3, #24
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d02f      	beq.n	800b28c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b22c:	78fb      	ldrb	r3, [r7, #3]
 800b22e:	f003 020f 	and.w	r2, r3, #15
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	4613      	mov	r3, r2
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	4413      	add	r3, r2
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	440b      	add	r3, r1
 800b23e:	3318      	adds	r3, #24
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	78fb      	ldrb	r3, [r7, #3]
 800b244:	f003 010f 	and.w	r1, r3, #15
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	460b      	mov	r3, r1
 800b24c:	00db      	lsls	r3, r3, #3
 800b24e:	440b      	add	r3, r1
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	4403      	add	r3, r0
 800b254:	331c      	adds	r3, #28
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	fbb2 f1f3 	udiv	r1, r2, r3
 800b25c:	fb01 f303 	mul.w	r3, r1, r3
 800b260:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b262:	2b00      	cmp	r3, #0
 800b264:	d112      	bne.n	800b28c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b266:	78fb      	ldrb	r3, [r7, #3]
 800b268:	f003 020f 	and.w	r2, r3, #15
 800b26c:	6879      	ldr	r1, [r7, #4]
 800b26e:	4613      	mov	r3, r2
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4413      	add	r3, r2
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	440b      	add	r3, r1
 800b278:	3318      	adds	r3, #24
 800b27a:	2200      	movs	r2, #0
 800b27c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b27e:	78f9      	ldrb	r1, [r7, #3]
 800b280:	2300      	movs	r3, #0
 800b282:	2200      	movs	r2, #0
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f002 f93a 	bl	800d4fe <USBD_LL_Transmit>
 800b28a:	e01f      	b.n	800b2cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	2200      	movs	r2, #0
 800b290:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	33b0      	adds	r3, #176	@ 0xb0
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4413      	add	r3, r2
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d010      	beq.n	800b2cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	33b0      	adds	r3, #176	@ 0xb0
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4413      	add	r3, r2
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b2c8:	78fa      	ldrb	r2, [r7, #3]
 800b2ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b084      	sub	sp, #16
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	460b      	mov	r3, r1
 800b2e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	32b0      	adds	r2, #176	@ 0xb0
 800b2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	32b0      	adds	r2, #176	@ 0xb0
 800b2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d101      	bne.n	800b308 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b304:	2303      	movs	r3, #3
 800b306:	e01a      	b.n	800b33e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b308:	78fb      	ldrb	r3, [r7, #3]
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f002 f938 	bl	800d582 <USBD_LL_GetRxDataSize>
 800b312:	4602      	mov	r2, r0
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	33b0      	adds	r3, #176	@ 0xb0
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4413      	add	r3, r2
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b338:	4611      	mov	r1, r2
 800b33a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b084      	sub	sp, #16
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	32b0      	adds	r2, #176	@ 0xb0
 800b358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d101      	bne.n	800b368 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b364:	2303      	movs	r3, #3
 800b366:	e024      	b.n	800b3b2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	33b0      	adds	r3, #176	@ 0xb0
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4413      	add	r3, r2
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d019      	beq.n	800b3b0 <USBD_CDC_EP0_RxReady+0x6a>
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b382:	2bff      	cmp	r3, #255	@ 0xff
 800b384:	d014      	beq.n	800b3b0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	33b0      	adds	r3, #176	@ 0xb0
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b39e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b3a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	22ff      	movs	r2, #255	@ 0xff
 800b3ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
	...

0800b3bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3c4:	2182      	movs	r1, #130	@ 0x82
 800b3c6:	4818      	ldr	r0, [pc, #96]	@ (800b428 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b3c8:	f000 fd0f 	bl	800bdea <USBD_GetEpDesc>
 800b3cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3ce:	2101      	movs	r1, #1
 800b3d0:	4815      	ldr	r0, [pc, #84]	@ (800b428 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b3d2:	f000 fd0a 	bl	800bdea <USBD_GetEpDesc>
 800b3d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b3d8:	2181      	movs	r1, #129	@ 0x81
 800b3da:	4813      	ldr	r0, [pc, #76]	@ (800b428 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b3dc:	f000 fd05 	bl	800bdea <USBD_GetEpDesc>
 800b3e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d002      	beq.n	800b3ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	2210      	movs	r2, #16
 800b3ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d006      	beq.n	800b402 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3fc:	711a      	strb	r2, [r3, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d006      	beq.n	800b416 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b410:	711a      	strb	r2, [r3, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2243      	movs	r2, #67	@ 0x43
 800b41a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b41c:	4b02      	ldr	r3, [pc, #8]	@ (800b428 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3718      	adds	r7, #24
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	20000054 	.word	0x20000054

0800b42c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b434:	2182      	movs	r1, #130	@ 0x82
 800b436:	4818      	ldr	r0, [pc, #96]	@ (800b498 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b438:	f000 fcd7 	bl	800bdea <USBD_GetEpDesc>
 800b43c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b43e:	2101      	movs	r1, #1
 800b440:	4815      	ldr	r0, [pc, #84]	@ (800b498 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b442:	f000 fcd2 	bl	800bdea <USBD_GetEpDesc>
 800b446:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b448:	2181      	movs	r1, #129	@ 0x81
 800b44a:	4813      	ldr	r0, [pc, #76]	@ (800b498 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b44c:	f000 fccd 	bl	800bdea <USBD_GetEpDesc>
 800b450:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	2210      	movs	r2, #16
 800b45c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d006      	beq.n	800b472 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	2200      	movs	r2, #0
 800b468:	711a      	strb	r2, [r3, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f042 0202 	orr.w	r2, r2, #2
 800b470:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d006      	beq.n	800b486 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2200      	movs	r2, #0
 800b47c:	711a      	strb	r2, [r3, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	f042 0202 	orr.w	r2, r2, #2
 800b484:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2243      	movs	r2, #67	@ 0x43
 800b48a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b48c:	4b02      	ldr	r3, [pc, #8]	@ (800b498 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3718      	adds	r7, #24
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	20000054 	.word	0x20000054

0800b49c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b4a4:	2182      	movs	r1, #130	@ 0x82
 800b4a6:	4818      	ldr	r0, [pc, #96]	@ (800b508 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b4a8:	f000 fc9f 	bl	800bdea <USBD_GetEpDesc>
 800b4ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b4ae:	2101      	movs	r1, #1
 800b4b0:	4815      	ldr	r0, [pc, #84]	@ (800b508 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b4b2:	f000 fc9a 	bl	800bdea <USBD_GetEpDesc>
 800b4b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b4b8:	2181      	movs	r1, #129	@ 0x81
 800b4ba:	4813      	ldr	r0, [pc, #76]	@ (800b508 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b4bc:	f000 fc95 	bl	800bdea <USBD_GetEpDesc>
 800b4c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	2210      	movs	r2, #16
 800b4cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d006      	beq.n	800b4e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4dc:	711a      	strb	r2, [r3, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d006      	beq.n	800b4f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4f0:	711a      	strb	r2, [r3, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2243      	movs	r2, #67	@ 0x43
 800b4fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b4fc:	4b02      	ldr	r3, [pc, #8]	@ (800b508 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3718      	adds	r7, #24
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	20000054 	.word	0x20000054

0800b50c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	220a      	movs	r2, #10
 800b518:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b51a:	4b03      	ldr	r3, [pc, #12]	@ (800b528 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr
 800b528:	20000010 	.word	0x20000010

0800b52c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d101      	bne.n	800b540 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b53c:	2303      	movs	r3, #3
 800b53e:	e009      	b.n	800b554 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	33b0      	adds	r3, #176	@ 0xb0
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4413      	add	r3, r2
 800b54e:	683a      	ldr	r2, [r7, #0]
 800b550:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	32b0      	adds	r2, #176	@ 0xb0
 800b576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d101      	bne.n	800b586 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b582:	2303      	movs	r3, #3
 800b584:	e008      	b.n	800b598 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b596:	2300      	movs	r3, #0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	371c      	adds	r7, #28
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	32b0      	adds	r2, #176	@ 0xb0
 800b5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d101      	bne.n	800b5c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b5c4:	2303      	movs	r3, #3
 800b5c6:	e004      	b.n	800b5d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3714      	adds	r7, #20
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
	...

0800b5e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	32b0      	adds	r2, #176	@ 0xb0
 800b5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	32b0      	adds	r2, #176	@ 0xb0
 800b602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d101      	bne.n	800b60e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b60a:	2303      	movs	r3, #3
 800b60c:	e018      	b.n	800b640 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	7c1b      	ldrb	r3, [r3, #16]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10a      	bne.n	800b62c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b616:	4b0c      	ldr	r3, [pc, #48]	@ (800b648 <USBD_CDC_ReceivePacket+0x68>)
 800b618:	7819      	ldrb	r1, [r3, #0]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b620:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f001 ff8b 	bl	800d540 <USBD_LL_PrepareReceive>
 800b62a:	e008      	b.n	800b63e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b62c:	4b06      	ldr	r3, [pc, #24]	@ (800b648 <USBD_CDC_ReceivePacket+0x68>)
 800b62e:	7819      	ldrb	r1, [r3, #0]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b636:	2340      	movs	r3, #64	@ 0x40
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f001 ff81 	bl	800d540 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	20000098 	.word	0x20000098

0800b64c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b086      	sub	sp, #24
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	4613      	mov	r3, r2
 800b658:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d101      	bne.n	800b664 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b660:	2303      	movs	r3, #3
 800b662:	e01f      	b.n	800b6a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2200      	movs	r2, #0
 800b668:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d003      	beq.n	800b68a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	79fa      	ldrb	r2, [r7, #7]
 800b696:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f001 fdfb 	bl	800d294 <USBD_LL_Init>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3718      	adds	r7, #24
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d101      	bne.n	800b6c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b6c0:	2303      	movs	r3, #3
 800b6c2:	e025      	b.n	800b710 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	32ae      	adds	r2, #174	@ 0xae
 800b6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00f      	beq.n	800b700 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	32ae      	adds	r2, #174	@ 0xae
 800b6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f0:	f107 020e 	add.w	r2, r7, #14
 800b6f4:	4610      	mov	r0, r2
 800b6f6:	4798      	blx	r3
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b706:	1c5a      	adds	r2, r3, #1
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f001 fe03 	bl	800d32c <USBD_LL_Start>
 800b726:	4603      	mov	r3, r0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3708      	adds	r7, #8
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b738:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	460b      	mov	r3, r1
 800b750:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b752:	2300      	movs	r3, #0
 800b754:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d009      	beq.n	800b774 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	78fa      	ldrb	r2, [r7, #3]
 800b76a:	4611      	mov	r1, r2
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	4798      	blx	r3
 800b770:	4603      	mov	r3, r0
 800b772:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b774:	7bfb      	ldrb	r3, [r7, #15]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	460b      	mov	r3, r1
 800b788:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	78fa      	ldrb	r2, [r7, #3]
 800b798:	4611      	mov	r1, r2
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	4798      	blx	r3
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b7a4:	2303      	movs	r3, #3
 800b7a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b084      	sub	sp, #16
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
 800b7ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f001 f90c 	bl	800c9e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b7d8:	461a      	mov	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7e6:	f003 031f 	and.w	r3, r3, #31
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d01a      	beq.n	800b824 <USBD_LL_SetupStage+0x72>
 800b7ee:	2b02      	cmp	r3, #2
 800b7f0:	d822      	bhi.n	800b838 <USBD_LL_SetupStage+0x86>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d002      	beq.n	800b7fc <USBD_LL_SetupStage+0x4a>
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d00a      	beq.n	800b810 <USBD_LL_SetupStage+0x5e>
 800b7fa:	e01d      	b.n	800b838 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b802:	4619      	mov	r1, r3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 fb63 	bl	800bed0 <USBD_StdDevReq>
 800b80a:	4603      	mov	r3, r0
 800b80c:	73fb      	strb	r3, [r7, #15]
      break;
 800b80e:	e020      	b.n	800b852 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b816:	4619      	mov	r1, r3
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fbcb 	bl	800bfb4 <USBD_StdItfReq>
 800b81e:	4603      	mov	r3, r0
 800b820:	73fb      	strb	r3, [r7, #15]
      break;
 800b822:	e016      	b.n	800b852 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fc2d 	bl	800c08c <USBD_StdEPReq>
 800b832:	4603      	mov	r3, r0
 800b834:	73fb      	strb	r3, [r7, #15]
      break;
 800b836:	e00c      	b.n	800b852 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b83e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b842:	b2db      	uxtb	r3, r3
 800b844:	4619      	mov	r1, r3
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f001 fdd0 	bl	800d3ec <USBD_LL_StallEP>
 800b84c:	4603      	mov	r3, r0
 800b84e:	73fb      	strb	r3, [r7, #15]
      break;
 800b850:	bf00      	nop
  }

  return ret;
 800b852:	7bfb      	ldrb	r3, [r7, #15]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	460b      	mov	r3, r1
 800b866:	607a      	str	r2, [r7, #4]
 800b868:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b86a:	2300      	movs	r3, #0
 800b86c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b86e:	7afb      	ldrb	r3, [r7, #11]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d16e      	bne.n	800b952 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b87a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b882:	2b03      	cmp	r3, #3
 800b884:	f040 8098 	bne.w	800b9b8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	689a      	ldr	r2, [r3, #8]
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	429a      	cmp	r2, r3
 800b892:	d913      	bls.n	800b8bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	689a      	ldr	r2, [r3, #8]
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	1ad2      	subs	r2, r2, r3
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	68da      	ldr	r2, [r3, #12]
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	bf28      	it	cs
 800b8ae:	4613      	movcs	r3, r2
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	6879      	ldr	r1, [r7, #4]
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f001 f994 	bl	800cbe2 <USBD_CtlContinueRx>
 800b8ba:	e07d      	b.n	800b9b8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b8c2:	f003 031f 	and.w	r3, r3, #31
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	d014      	beq.n	800b8f4 <USBD_LL_DataOutStage+0x98>
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d81d      	bhi.n	800b90a <USBD_LL_DataOutStage+0xae>
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d002      	beq.n	800b8d8 <USBD_LL_DataOutStage+0x7c>
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d003      	beq.n	800b8de <USBD_LL_DataOutStage+0x82>
 800b8d6:	e018      	b.n	800b90a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	75bb      	strb	r3, [r7, #22]
            break;
 800b8dc:	e018      	b.n	800b910 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f000 fa64 	bl	800bdb6 <USBD_CoreFindIF>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	75bb      	strb	r3, [r7, #22]
            break;
 800b8f2:	e00d      	b.n	800b910 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f000 fa66 	bl	800bdd0 <USBD_CoreFindEP>
 800b904:	4603      	mov	r3, r0
 800b906:	75bb      	strb	r3, [r7, #22]
            break;
 800b908:	e002      	b.n	800b910 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b90a:	2300      	movs	r3, #0
 800b90c:	75bb      	strb	r3, [r7, #22]
            break;
 800b90e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b910:	7dbb      	ldrb	r3, [r7, #22]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d119      	bne.n	800b94a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	2b03      	cmp	r3, #3
 800b920:	d113      	bne.n	800b94a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b922:	7dba      	ldrb	r2, [r7, #22]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	32ae      	adds	r2, #174	@ 0xae
 800b928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d00b      	beq.n	800b94a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b932:	7dba      	ldrb	r2, [r7, #22]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b93a:	7dba      	ldrb	r2, [r7, #22]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	32ae      	adds	r2, #174	@ 0xae
 800b940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	f001 f95a 	bl	800cc04 <USBD_CtlSendStatus>
 800b950:	e032      	b.n	800b9b8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b952:	7afb      	ldrb	r3, [r7, #11]
 800b954:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	4619      	mov	r1, r3
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f000 fa37 	bl	800bdd0 <USBD_CoreFindEP>
 800b962:	4603      	mov	r3, r0
 800b964:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b966:	7dbb      	ldrb	r3, [r7, #22]
 800b968:	2bff      	cmp	r3, #255	@ 0xff
 800b96a:	d025      	beq.n	800b9b8 <USBD_LL_DataOutStage+0x15c>
 800b96c:	7dbb      	ldrb	r3, [r7, #22]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d122      	bne.n	800b9b8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	2b03      	cmp	r3, #3
 800b97c:	d117      	bne.n	800b9ae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b97e:	7dba      	ldrb	r2, [r7, #22]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	32ae      	adds	r2, #174	@ 0xae
 800b984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00f      	beq.n	800b9ae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b98e:	7dba      	ldrb	r2, [r7, #22]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b996:	7dba      	ldrb	r2, [r7, #22]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	32ae      	adds	r2, #174	@ 0xae
 800b99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a0:	699b      	ldr	r3, [r3, #24]
 800b9a2:	7afa      	ldrb	r2, [r7, #11]
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	4798      	blx	r3
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b9ae:	7dfb      	ldrb	r3, [r7, #23]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d001      	beq.n	800b9b8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b9b4:	7dfb      	ldrb	r3, [r7, #23]
 800b9b6:	e000      	b.n	800b9ba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b086      	sub	sp, #24
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	60f8      	str	r0, [r7, #12]
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	607a      	str	r2, [r7, #4]
 800b9ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b9d0:	7afb      	ldrb	r3, [r7, #11]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d16f      	bne.n	800bab6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	3314      	adds	r3, #20
 800b9da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d15a      	bne.n	800ba9c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	689a      	ldr	r2, [r3, #8]
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d914      	bls.n	800ba1c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	689a      	ldr	r2, [r3, #8]
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	1ad2      	subs	r2, r2, r3
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	461a      	mov	r2, r3
 800ba06:	6879      	ldr	r1, [r7, #4]
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f001 f8bc 	bl	800cb86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba0e:	2300      	movs	r3, #0
 800ba10:	2200      	movs	r2, #0
 800ba12:	2100      	movs	r1, #0
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f001 fd93 	bl	800d540 <USBD_LL_PrepareReceive>
 800ba1a:	e03f      	b.n	800ba9c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	68da      	ldr	r2, [r3, #12]
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d11c      	bne.n	800ba62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	685a      	ldr	r2, [r3, #4]
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d316      	bcc.n	800ba62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d20f      	bcs.n	800ba62 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ba42:	2200      	movs	r2, #0
 800ba44:	2100      	movs	r1, #0
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f001 f89d 	bl	800cb86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba54:	2300      	movs	r3, #0
 800ba56:	2200      	movs	r2, #0
 800ba58:	2100      	movs	r1, #0
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f001 fd70 	bl	800d540 <USBD_LL_PrepareReceive>
 800ba60:	e01c      	b.n	800ba9c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b03      	cmp	r3, #3
 800ba6c:	d10f      	bne.n	800ba8e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d009      	beq.n	800ba8e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba8e:	2180      	movs	r1, #128	@ 0x80
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f001 fcab 	bl	800d3ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f001 f8c7 	bl	800cc2a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d03a      	beq.n	800bb1c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f7ff fe42 	bl	800b730 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2200      	movs	r2, #0
 800bab0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bab4:	e032      	b.n	800bb1c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bab6:	7afb      	ldrb	r3, [r7, #11]
 800bab8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800babc:	b2db      	uxtb	r3, r3
 800babe:	4619      	mov	r1, r3
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f000 f985 	bl	800bdd0 <USBD_CoreFindEP>
 800bac6:	4603      	mov	r3, r0
 800bac8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	2bff      	cmp	r3, #255	@ 0xff
 800bace:	d025      	beq.n	800bb1c <USBD_LL_DataInStage+0x15a>
 800bad0:	7dfb      	ldrb	r3, [r7, #23]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d122      	bne.n	800bb1c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800badc:	b2db      	uxtb	r3, r3
 800bade:	2b03      	cmp	r3, #3
 800bae0:	d11c      	bne.n	800bb1c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bae2:	7dfa      	ldrb	r2, [r7, #23]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	32ae      	adds	r2, #174	@ 0xae
 800bae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baec:	695b      	ldr	r3, [r3, #20]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d014      	beq.n	800bb1c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800baf2:	7dfa      	ldrb	r2, [r7, #23]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bafa:	7dfa      	ldrb	r2, [r7, #23]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	32ae      	adds	r2, #174	@ 0xae
 800bb00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	7afa      	ldrb	r2, [r7, #11]
 800bb08:	4611      	mov	r1, r2
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	4798      	blx	r3
 800bb0e:	4603      	mov	r3, r0
 800bb10:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bb12:	7dbb      	ldrb	r3, [r7, #22]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bb18:	7dbb      	ldrb	r3, [r7, #22]
 800bb1a:	e000      	b.n	800bb1e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b084      	sub	sp, #16
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2201      	movs	r2, #1
 800bb36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d014      	beq.n	800bb8c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00e      	beq.n	800bb8c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	6852      	ldr	r2, [r2, #4]
 800bb7a:	b2d2      	uxtb	r2, r2
 800bb7c:	4611      	mov	r1, r2
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	4798      	blx	r3
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d001      	beq.n	800bb8c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb8c:	2340      	movs	r3, #64	@ 0x40
 800bb8e:	2200      	movs	r2, #0
 800bb90:	2100      	movs	r1, #0
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f001 fbe5 	bl	800d362 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2240      	movs	r2, #64	@ 0x40
 800bba4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bba8:	2340      	movs	r3, #64	@ 0x40
 800bbaa:	2200      	movs	r2, #0
 800bbac:	2180      	movs	r1, #128	@ 0x80
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f001 fbd7 	bl	800d362 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2240      	movs	r2, #64	@ 0x40
 800bbbe:	621a      	str	r2, [r3, #32]

  return ret;
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bbca:	b480      	push	{r7}
 800bbcc:	b083      	sub	sp, #12
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	78fa      	ldrb	r2, [r7, #3]
 800bbda:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr

0800bbea <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bbea:	b480      	push	{r7}
 800bbec:	b083      	sub	sp, #12
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	2b04      	cmp	r3, #4
 800bbfc:	d006      	beq.n	800bc0c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2204      	movs	r2, #4
 800bc10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc22:	b480      	push	{r7}
 800bc24:	b083      	sub	sp, #12
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b04      	cmp	r3, #4
 800bc34:	d106      	bne.n	800bc44 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b082      	sub	sp, #8
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	2b03      	cmp	r3, #3
 800bc64:	d110      	bne.n	800bc88 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00b      	beq.n	800bc88 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc76:	69db      	ldr	r3, [r3, #28]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d005      	beq.n	800bc88 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc82:	69db      	ldr	r3, [r3, #28]
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b082      	sub	sp, #8
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	32ae      	adds	r2, #174	@ 0xae
 800bca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d101      	bne.n	800bcb4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	e01c      	b.n	800bcee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	2b03      	cmp	r3, #3
 800bcbe:	d115      	bne.n	800bcec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	32ae      	adds	r2, #174	@ 0xae
 800bcca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00b      	beq.n	800bcec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	32ae      	adds	r2, #174	@ 0xae
 800bcde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce2:	6a1b      	ldr	r3, [r3, #32]
 800bce4:	78fa      	ldrb	r2, [r7, #3]
 800bce6:	4611      	mov	r1, r2
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b082      	sub	sp, #8
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
 800bcfe:	460b      	mov	r3, r1
 800bd00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	32ae      	adds	r2, #174	@ 0xae
 800bd0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d101      	bne.n	800bd18 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bd14:	2303      	movs	r3, #3
 800bd16:	e01c      	b.n	800bd52 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	2b03      	cmp	r3, #3
 800bd22:	d115      	bne.n	800bd50 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	32ae      	adds	r2, #174	@ 0xae
 800bd2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00b      	beq.n	800bd50 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	32ae      	adds	r2, #174	@ 0xae
 800bd42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd48:	78fa      	ldrb	r2, [r7, #3]
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b083      	sub	sp, #12
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00e      	beq.n	800bdac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	6852      	ldr	r2, [r2, #4]
 800bd9a:	b2d2      	uxtb	r2, r2
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	4798      	blx	r3
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d001      	beq.n	800bdac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bda8:	2303      	movs	r3, #3
 800bdaa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	b083      	sub	sp, #12
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bdc2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	460b      	mov	r3, r1
 800bdda:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bddc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	370c      	adds	r7, #12
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr

0800bdea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b086      	sub	sp, #24
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bdfe:	2300      	movs	r3, #0
 800be00:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	885b      	ldrh	r3, [r3, #2]
 800be06:	b29b      	uxth	r3, r3
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	7812      	ldrb	r2, [r2, #0]
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d91f      	bls.n	800be50 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800be16:	e013      	b.n	800be40 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800be18:	f107 030a 	add.w	r3, r7, #10
 800be1c:	4619      	mov	r1, r3
 800be1e:	6978      	ldr	r0, [r7, #20]
 800be20:	f000 f81b 	bl	800be5a <USBD_GetNextDesc>
 800be24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	785b      	ldrb	r3, [r3, #1]
 800be2a:	2b05      	cmp	r3, #5
 800be2c:	d108      	bne.n	800be40 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	789b      	ldrb	r3, [r3, #2]
 800be36:	78fa      	ldrb	r2, [r7, #3]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d008      	beq.n	800be4e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800be3c:	2300      	movs	r3, #0
 800be3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	885b      	ldrh	r3, [r3, #2]
 800be44:	b29a      	uxth	r2, r3
 800be46:	897b      	ldrh	r3, [r7, #10]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d8e5      	bhi.n	800be18 <USBD_GetEpDesc+0x2e>
 800be4c:	e000      	b.n	800be50 <USBD_GetEpDesc+0x66>
          break;
 800be4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800be50:	693b      	ldr	r3, [r7, #16]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3718      	adds	r7, #24
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800be5a:	b480      	push	{r7}
 800be5c:	b085      	sub	sp, #20
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	881b      	ldrh	r3, [r3, #0]
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	7812      	ldrb	r2, [r2, #0]
 800be70:	4413      	add	r3, r2
 800be72:	b29a      	uxth	r2, r3
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	461a      	mov	r2, r3
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4413      	add	r3, r2
 800be82:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800be84:	68fb      	ldr	r3, [r7, #12]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3714      	adds	r7, #20
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr

0800be92 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be92:	b480      	push	{r7}
 800be94:	b087      	sub	sp, #28
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	3301      	adds	r3, #1
 800bea8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800beb0:	8a3b      	ldrh	r3, [r7, #16]
 800beb2:	021b      	lsls	r3, r3, #8
 800beb4:	b21a      	sxth	r2, r3
 800beb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800beba:	4313      	orrs	r3, r2
 800bebc:	b21b      	sxth	r3, r3
 800bebe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bec0:	89fb      	ldrh	r3, [r7, #14]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	371c      	adds	r7, #28
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
	...

0800bed0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beda:	2300      	movs	r3, #0
 800bedc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bee6:	2b40      	cmp	r3, #64	@ 0x40
 800bee8:	d005      	beq.n	800bef6 <USBD_StdDevReq+0x26>
 800beea:	2b40      	cmp	r3, #64	@ 0x40
 800beec:	d857      	bhi.n	800bf9e <USBD_StdDevReq+0xce>
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00f      	beq.n	800bf12 <USBD_StdDevReq+0x42>
 800bef2:	2b20      	cmp	r3, #32
 800bef4:	d153      	bne.n	800bf9e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	32ae      	adds	r2, #174	@ 0xae
 800bf00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	6839      	ldr	r1, [r7, #0]
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	4798      	blx	r3
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73fb      	strb	r3, [r7, #15]
      break;
 800bf10:	e04a      	b.n	800bfa8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	785b      	ldrb	r3, [r3, #1]
 800bf16:	2b09      	cmp	r3, #9
 800bf18:	d83b      	bhi.n	800bf92 <USBD_StdDevReq+0xc2>
 800bf1a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf20 <USBD_StdDevReq+0x50>)
 800bf1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf20:	0800bf75 	.word	0x0800bf75
 800bf24:	0800bf89 	.word	0x0800bf89
 800bf28:	0800bf93 	.word	0x0800bf93
 800bf2c:	0800bf7f 	.word	0x0800bf7f
 800bf30:	0800bf93 	.word	0x0800bf93
 800bf34:	0800bf53 	.word	0x0800bf53
 800bf38:	0800bf49 	.word	0x0800bf49
 800bf3c:	0800bf93 	.word	0x0800bf93
 800bf40:	0800bf6b 	.word	0x0800bf6b
 800bf44:	0800bf5d 	.word	0x0800bf5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 fa3c 	bl	800c3c8 <USBD_GetDescriptor>
          break;
 800bf50:	e024      	b.n	800bf9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bf52:	6839      	ldr	r1, [r7, #0]
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 fba1 	bl	800c69c <USBD_SetAddress>
          break;
 800bf5a:	e01f      	b.n	800bf9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 fbe0 	bl	800c724 <USBD_SetConfig>
 800bf64:	4603      	mov	r3, r0
 800bf66:	73fb      	strb	r3, [r7, #15]
          break;
 800bf68:	e018      	b.n	800bf9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bf6a:	6839      	ldr	r1, [r7, #0]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fc83 	bl	800c878 <USBD_GetConfig>
          break;
 800bf72:	e013      	b.n	800bf9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf74:	6839      	ldr	r1, [r7, #0]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fcb4 	bl	800c8e4 <USBD_GetStatus>
          break;
 800bf7c:	e00e      	b.n	800bf9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fce3 	bl	800c94c <USBD_SetFeature>
          break;
 800bf86:	e009      	b.n	800bf9c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fd07 	bl	800c99e <USBD_ClrFeature>
          break;
 800bf90:	e004      	b.n	800bf9c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bf92:	6839      	ldr	r1, [r7, #0]
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fd5e 	bl	800ca56 <USBD_CtlError>
          break;
 800bf9a:	bf00      	nop
      }
      break;
 800bf9c:	e004      	b.n	800bfa8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bf9e:	6839      	ldr	r1, [r7, #0]
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fd58 	bl	800ca56 <USBD_CtlError>
      break;
 800bfa6:	bf00      	nop
  }

  return ret;
 800bfa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3710      	adds	r7, #16
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop

0800bfb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bfca:	2b40      	cmp	r3, #64	@ 0x40
 800bfcc:	d005      	beq.n	800bfda <USBD_StdItfReq+0x26>
 800bfce:	2b40      	cmp	r3, #64	@ 0x40
 800bfd0:	d852      	bhi.n	800c078 <USBD_StdItfReq+0xc4>
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d001      	beq.n	800bfda <USBD_StdItfReq+0x26>
 800bfd6:	2b20      	cmp	r3, #32
 800bfd8:	d14e      	bne.n	800c078 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d840      	bhi.n	800c06a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	889b      	ldrh	r3, [r3, #4]
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d836      	bhi.n	800c060 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	889b      	ldrh	r3, [r3, #4]
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	4619      	mov	r1, r3
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7ff fedb 	bl	800bdb6 <USBD_CoreFindIF>
 800c000:	4603      	mov	r3, r0
 800c002:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c004:	7bbb      	ldrb	r3, [r7, #14]
 800c006:	2bff      	cmp	r3, #255	@ 0xff
 800c008:	d01d      	beq.n	800c046 <USBD_StdItfReq+0x92>
 800c00a:	7bbb      	ldrb	r3, [r7, #14]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d11a      	bne.n	800c046 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c010:	7bba      	ldrb	r2, [r7, #14]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	32ae      	adds	r2, #174	@ 0xae
 800c016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00f      	beq.n	800c040 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c020:	7bba      	ldrb	r2, [r7, #14]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c028:	7bba      	ldrb	r2, [r7, #14]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	32ae      	adds	r2, #174	@ 0xae
 800c02e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	4798      	blx	r3
 800c03a:	4603      	mov	r3, r0
 800c03c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c03e:	e004      	b.n	800c04a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c040:	2303      	movs	r3, #3
 800c042:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c044:	e001      	b.n	800c04a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c046:	2303      	movs	r3, #3
 800c048:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	88db      	ldrh	r3, [r3, #6]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d110      	bne.n	800c074 <USBD_StdItfReq+0xc0>
 800c052:	7bfb      	ldrb	r3, [r7, #15]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10d      	bne.n	800c074 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fdd3 	bl	800cc04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c05e:	e009      	b.n	800c074 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c060:	6839      	ldr	r1, [r7, #0]
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fcf7 	bl	800ca56 <USBD_CtlError>
          break;
 800c068:	e004      	b.n	800c074 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fcf2 	bl	800ca56 <USBD_CtlError>
          break;
 800c072:	e000      	b.n	800c076 <USBD_StdItfReq+0xc2>
          break;
 800c074:	bf00      	nop
      }
      break;
 800c076:	e004      	b.n	800c082 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c078:	6839      	ldr	r1, [r7, #0]
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 fceb 	bl	800ca56 <USBD_CtlError>
      break;
 800c080:	bf00      	nop
  }

  return ret;
 800c082:	7bfb      	ldrb	r3, [r7, #15]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c096:	2300      	movs	r3, #0
 800c098:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	889b      	ldrh	r3, [r3, #4]
 800c09e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c0a8:	2b40      	cmp	r3, #64	@ 0x40
 800c0aa:	d007      	beq.n	800c0bc <USBD_StdEPReq+0x30>
 800c0ac:	2b40      	cmp	r3, #64	@ 0x40
 800c0ae:	f200 817f 	bhi.w	800c3b0 <USBD_StdEPReq+0x324>
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d02a      	beq.n	800c10c <USBD_StdEPReq+0x80>
 800c0b6:	2b20      	cmp	r3, #32
 800c0b8:	f040 817a 	bne.w	800c3b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	4619      	mov	r1, r3
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff fe85 	bl	800bdd0 <USBD_CoreFindEP>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0ca:	7b7b      	ldrb	r3, [r7, #13]
 800c0cc:	2bff      	cmp	r3, #255	@ 0xff
 800c0ce:	f000 8174 	beq.w	800c3ba <USBD_StdEPReq+0x32e>
 800c0d2:	7b7b      	ldrb	r3, [r7, #13]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f040 8170 	bne.w	800c3ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c0da:	7b7a      	ldrb	r2, [r7, #13]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c0e2:	7b7a      	ldrb	r2, [r7, #13]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	32ae      	adds	r2, #174	@ 0xae
 800c0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f000 8163 	beq.w	800c3ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c0f4:	7b7a      	ldrb	r2, [r7, #13]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	32ae      	adds	r2, #174	@ 0xae
 800c0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	6839      	ldr	r1, [r7, #0]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	4798      	blx	r3
 800c106:	4603      	mov	r3, r0
 800c108:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c10a:	e156      	b.n	800c3ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	785b      	ldrb	r3, [r3, #1]
 800c110:	2b03      	cmp	r3, #3
 800c112:	d008      	beq.n	800c126 <USBD_StdEPReq+0x9a>
 800c114:	2b03      	cmp	r3, #3
 800c116:	f300 8145 	bgt.w	800c3a4 <USBD_StdEPReq+0x318>
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f000 809b 	beq.w	800c256 <USBD_StdEPReq+0x1ca>
 800c120:	2b01      	cmp	r3, #1
 800c122:	d03c      	beq.n	800c19e <USBD_StdEPReq+0x112>
 800c124:	e13e      	b.n	800c3a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	2b02      	cmp	r3, #2
 800c130:	d002      	beq.n	800c138 <USBD_StdEPReq+0xac>
 800c132:	2b03      	cmp	r3, #3
 800c134:	d016      	beq.n	800c164 <USBD_StdEPReq+0xd8>
 800c136:	e02c      	b.n	800c192 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c138:	7bbb      	ldrb	r3, [r7, #14]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00d      	beq.n	800c15a <USBD_StdEPReq+0xce>
 800c13e:	7bbb      	ldrb	r3, [r7, #14]
 800c140:	2b80      	cmp	r3, #128	@ 0x80
 800c142:	d00a      	beq.n	800c15a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c144:	7bbb      	ldrb	r3, [r7, #14]
 800c146:	4619      	mov	r1, r3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f001 f94f 	bl	800d3ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c14e:	2180      	movs	r1, #128	@ 0x80
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f001 f94b 	bl	800d3ec <USBD_LL_StallEP>
 800c156:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c158:	e020      	b.n	800c19c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c15a:	6839      	ldr	r1, [r7, #0]
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 fc7a 	bl	800ca56 <USBD_CtlError>
              break;
 800c162:	e01b      	b.n	800c19c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	885b      	ldrh	r3, [r3, #2]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d10e      	bne.n	800c18a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c16c:	7bbb      	ldrb	r3, [r7, #14]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d00b      	beq.n	800c18a <USBD_StdEPReq+0xfe>
 800c172:	7bbb      	ldrb	r3, [r7, #14]
 800c174:	2b80      	cmp	r3, #128	@ 0x80
 800c176:	d008      	beq.n	800c18a <USBD_StdEPReq+0xfe>
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	88db      	ldrh	r3, [r3, #6]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d104      	bne.n	800c18a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c180:	7bbb      	ldrb	r3, [r7, #14]
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f001 f931 	bl	800d3ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 fd3a 	bl	800cc04 <USBD_CtlSendStatus>

              break;
 800c190:	e004      	b.n	800c19c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fc5e 	bl	800ca56 <USBD_CtlError>
              break;
 800c19a:	bf00      	nop
          }
          break;
 800c19c:	e107      	b.n	800c3ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	2b02      	cmp	r3, #2
 800c1a8:	d002      	beq.n	800c1b0 <USBD_StdEPReq+0x124>
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	d016      	beq.n	800c1dc <USBD_StdEPReq+0x150>
 800c1ae:	e04b      	b.n	800c248 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1b0:	7bbb      	ldrb	r3, [r7, #14]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d00d      	beq.n	800c1d2 <USBD_StdEPReq+0x146>
 800c1b6:	7bbb      	ldrb	r3, [r7, #14]
 800c1b8:	2b80      	cmp	r3, #128	@ 0x80
 800c1ba:	d00a      	beq.n	800c1d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1bc:	7bbb      	ldrb	r3, [r7, #14]
 800c1be:	4619      	mov	r1, r3
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f001 f913 	bl	800d3ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1c6:	2180      	movs	r1, #128	@ 0x80
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f001 f90f 	bl	800d3ec <USBD_LL_StallEP>
 800c1ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1d0:	e040      	b.n	800c254 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fc3e 	bl	800ca56 <USBD_CtlError>
              break;
 800c1da:	e03b      	b.n	800c254 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	885b      	ldrh	r3, [r3, #2]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d136      	bne.n	800c252 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
 800c1e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d004      	beq.n	800c1f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c1ee:	7bbb      	ldrb	r3, [r7, #14]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f001 f919 	bl	800d42a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 fd03 	bl	800cc04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c1fe:	7bbb      	ldrb	r3, [r7, #14]
 800c200:	4619      	mov	r1, r3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7ff fde4 	bl	800bdd0 <USBD_CoreFindEP>
 800c208:	4603      	mov	r3, r0
 800c20a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c20c:	7b7b      	ldrb	r3, [r7, #13]
 800c20e:	2bff      	cmp	r3, #255	@ 0xff
 800c210:	d01f      	beq.n	800c252 <USBD_StdEPReq+0x1c6>
 800c212:	7b7b      	ldrb	r3, [r7, #13]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d11c      	bne.n	800c252 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c218:	7b7a      	ldrb	r2, [r7, #13]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c220:	7b7a      	ldrb	r2, [r7, #13]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	32ae      	adds	r2, #174	@ 0xae
 800c226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d010      	beq.n	800c252 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c230:	7b7a      	ldrb	r2, [r7, #13]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	32ae      	adds	r2, #174	@ 0xae
 800c236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	4798      	blx	r3
 800c242:	4603      	mov	r3, r0
 800c244:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c246:	e004      	b.n	800c252 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c248:	6839      	ldr	r1, [r7, #0]
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 fc03 	bl	800ca56 <USBD_CtlError>
              break;
 800c250:	e000      	b.n	800c254 <USBD_StdEPReq+0x1c8>
              break;
 800c252:	bf00      	nop
          }
          break;
 800c254:	e0ab      	b.n	800c3ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b02      	cmp	r3, #2
 800c260:	d002      	beq.n	800c268 <USBD_StdEPReq+0x1dc>
 800c262:	2b03      	cmp	r3, #3
 800c264:	d032      	beq.n	800c2cc <USBD_StdEPReq+0x240>
 800c266:	e097      	b.n	800c398 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c268:	7bbb      	ldrb	r3, [r7, #14]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d007      	beq.n	800c27e <USBD_StdEPReq+0x1f2>
 800c26e:	7bbb      	ldrb	r3, [r7, #14]
 800c270:	2b80      	cmp	r3, #128	@ 0x80
 800c272:	d004      	beq.n	800c27e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c274:	6839      	ldr	r1, [r7, #0]
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 fbed 	bl	800ca56 <USBD_CtlError>
                break;
 800c27c:	e091      	b.n	800c3a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c27e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c282:	2b00      	cmp	r3, #0
 800c284:	da0b      	bge.n	800c29e <USBD_StdEPReq+0x212>
 800c286:	7bbb      	ldrb	r3, [r7, #14]
 800c288:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c28c:	4613      	mov	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	4413      	add	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	3310      	adds	r3, #16
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	4413      	add	r3, r2
 800c29a:	3304      	adds	r3, #4
 800c29c:	e00b      	b.n	800c2b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c29e:	7bbb      	ldrb	r3, [r7, #14]
 800c2a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	4413      	add	r3, r2
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2202      	movs	r2, #2
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fc43 	bl	800cb50 <USBD_CtlSendData>
              break;
 800c2ca:	e06a      	b.n	800c3a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c2cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	da11      	bge.n	800c2f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c2d4:	7bbb      	ldrb	r3, [r7, #14]
 800c2d6:	f003 020f 	and.w	r2, r3, #15
 800c2da:	6879      	ldr	r1, [r7, #4]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	4413      	add	r3, r2
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	440b      	add	r3, r1
 800c2e6:	3324      	adds	r3, #36	@ 0x24
 800c2e8:	881b      	ldrh	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d117      	bne.n	800c31e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fbb0 	bl	800ca56 <USBD_CtlError>
                  break;
 800c2f6:	e054      	b.n	800c3a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c2f8:	7bbb      	ldrb	r3, [r7, #14]
 800c2fa:	f003 020f 	and.w	r2, r3, #15
 800c2fe:	6879      	ldr	r1, [r7, #4]
 800c300:	4613      	mov	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	4413      	add	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	440b      	add	r3, r1
 800c30a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c30e:	881b      	ldrh	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d104      	bne.n	800c31e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fb9d 	bl	800ca56 <USBD_CtlError>
                  break;
 800c31c:	e041      	b.n	800c3a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c31e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c322:	2b00      	cmp	r3, #0
 800c324:	da0b      	bge.n	800c33e <USBD_StdEPReq+0x2b2>
 800c326:	7bbb      	ldrb	r3, [r7, #14]
 800c328:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c32c:	4613      	mov	r3, r2
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	4413      	add	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	3310      	adds	r3, #16
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	4413      	add	r3, r2
 800c33a:	3304      	adds	r3, #4
 800c33c:	e00b      	b.n	800c356 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c33e:	7bbb      	ldrb	r3, [r7, #14]
 800c340:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c344:	4613      	mov	r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4413      	add	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	4413      	add	r3, r2
 800c354:	3304      	adds	r3, #4
 800c356:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c358:	7bbb      	ldrb	r3, [r7, #14]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d002      	beq.n	800c364 <USBD_StdEPReq+0x2d8>
 800c35e:	7bbb      	ldrb	r3, [r7, #14]
 800c360:	2b80      	cmp	r3, #128	@ 0x80
 800c362:	d103      	bne.n	800c36c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	2200      	movs	r2, #0
 800c368:	601a      	str	r2, [r3, #0]
 800c36a:	e00e      	b.n	800c38a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c36c:	7bbb      	ldrb	r3, [r7, #14]
 800c36e:	4619      	mov	r1, r3
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f001 f879 	bl	800d468 <USBD_LL_IsStallEP>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d003      	beq.n	800c384 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	2201      	movs	r2, #1
 800c380:	601a      	str	r2, [r3, #0]
 800c382:	e002      	b.n	800c38a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	2200      	movs	r2, #0
 800c388:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	2202      	movs	r2, #2
 800c38e:	4619      	mov	r1, r3
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fbdd 	bl	800cb50 <USBD_CtlSendData>
              break;
 800c396:	e004      	b.n	800c3a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c398:	6839      	ldr	r1, [r7, #0]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 fb5b 	bl	800ca56 <USBD_CtlError>
              break;
 800c3a0:	bf00      	nop
          }
          break;
 800c3a2:	e004      	b.n	800c3ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 fb55 	bl	800ca56 <USBD_CtlError>
          break;
 800c3ac:	bf00      	nop
      }
      break;
 800c3ae:	e005      	b.n	800c3bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fb4f 	bl	800ca56 <USBD_CtlError>
      break;
 800c3b8:	e000      	b.n	800c3bc <USBD_StdEPReq+0x330>
      break;
 800c3ba:	bf00      	nop
  }

  return ret;
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
	...

0800c3c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	885b      	ldrh	r3, [r3, #2]
 800c3e2:	0a1b      	lsrs	r3, r3, #8
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	2b06      	cmp	r3, #6
 800c3ea:	f200 8128 	bhi.w	800c63e <USBD_GetDescriptor+0x276>
 800c3ee:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f4 <USBD_GetDescriptor+0x2c>)
 800c3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f4:	0800c411 	.word	0x0800c411
 800c3f8:	0800c429 	.word	0x0800c429
 800c3fc:	0800c469 	.word	0x0800c469
 800c400:	0800c63f 	.word	0x0800c63f
 800c404:	0800c63f 	.word	0x0800c63f
 800c408:	0800c5df 	.word	0x0800c5df
 800c40c:	0800c60b 	.word	0x0800c60b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	7c12      	ldrb	r2, [r2, #16]
 800c41c:	f107 0108 	add.w	r1, r7, #8
 800c420:	4610      	mov	r0, r2
 800c422:	4798      	blx	r3
 800c424:	60f8      	str	r0, [r7, #12]
      break;
 800c426:	e112      	b.n	800c64e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	7c1b      	ldrb	r3, [r3, #16]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10d      	bne.n	800c44c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c438:	f107 0208 	add.w	r2, r7, #8
 800c43c:	4610      	mov	r0, r2
 800c43e:	4798      	blx	r3
 800c440:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	3301      	adds	r3, #1
 800c446:	2202      	movs	r2, #2
 800c448:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c44a:	e100      	b.n	800c64e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c454:	f107 0208 	add.w	r2, r7, #8
 800c458:	4610      	mov	r0, r2
 800c45a:	4798      	blx	r3
 800c45c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	3301      	adds	r3, #1
 800c462:	2202      	movs	r2, #2
 800c464:	701a      	strb	r2, [r3, #0]
      break;
 800c466:	e0f2      	b.n	800c64e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	885b      	ldrh	r3, [r3, #2]
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	2b05      	cmp	r3, #5
 800c470:	f200 80ac 	bhi.w	800c5cc <USBD_GetDescriptor+0x204>
 800c474:	a201      	add	r2, pc, #4	@ (adr r2, 800c47c <USBD_GetDescriptor+0xb4>)
 800c476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c47a:	bf00      	nop
 800c47c:	0800c495 	.word	0x0800c495
 800c480:	0800c4c9 	.word	0x0800c4c9
 800c484:	0800c4fd 	.word	0x0800c4fd
 800c488:	0800c531 	.word	0x0800c531
 800c48c:	0800c565 	.word	0x0800c565
 800c490:	0800c599 	.word	0x0800c599
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00b      	beq.n	800c4b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	7c12      	ldrb	r2, [r2, #16]
 800c4ac:	f107 0108 	add.w	r1, r7, #8
 800c4b0:	4610      	mov	r0, r2
 800c4b2:	4798      	blx	r3
 800c4b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4b6:	e091      	b.n	800c5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4b8:	6839      	ldr	r1, [r7, #0]
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 facb 	bl	800ca56 <USBD_CtlError>
            err++;
 800c4c0:	7afb      	ldrb	r3, [r7, #11]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4c6:	e089      	b.n	800c5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00b      	beq.n	800c4ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	7c12      	ldrb	r2, [r2, #16]
 800c4e0:	f107 0108 	add.w	r1, r7, #8
 800c4e4:	4610      	mov	r0, r2
 800c4e6:	4798      	blx	r3
 800c4e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ea:	e077      	b.n	800c5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4ec:	6839      	ldr	r1, [r7, #0]
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 fab1 	bl	800ca56 <USBD_CtlError>
            err++;
 800c4f4:	7afb      	ldrb	r3, [r7, #11]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4fa:	e06f      	b.n	800c5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d00b      	beq.n	800c520 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	7c12      	ldrb	r2, [r2, #16]
 800c514:	f107 0108 	add.w	r1, r7, #8
 800c518:	4610      	mov	r0, r2
 800c51a:	4798      	blx	r3
 800c51c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c51e:	e05d      	b.n	800c5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c520:	6839      	ldr	r1, [r7, #0]
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fa97 	bl	800ca56 <USBD_CtlError>
            err++;
 800c528:	7afb      	ldrb	r3, [r7, #11]
 800c52a:	3301      	adds	r3, #1
 800c52c:	72fb      	strb	r3, [r7, #11]
          break;
 800c52e:	e055      	b.n	800c5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c536:	691b      	ldr	r3, [r3, #16]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00b      	beq.n	800c554 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c542:	691b      	ldr	r3, [r3, #16]
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	7c12      	ldrb	r2, [r2, #16]
 800c548:	f107 0108 	add.w	r1, r7, #8
 800c54c:	4610      	mov	r0, r2
 800c54e:	4798      	blx	r3
 800c550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c552:	e043      	b.n	800c5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c554:	6839      	ldr	r1, [r7, #0]
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 fa7d 	bl	800ca56 <USBD_CtlError>
            err++;
 800c55c:	7afb      	ldrb	r3, [r7, #11]
 800c55e:	3301      	adds	r3, #1
 800c560:	72fb      	strb	r3, [r7, #11]
          break;
 800c562:	e03b      	b.n	800c5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c56a:	695b      	ldr	r3, [r3, #20]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00b      	beq.n	800c588 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c576:	695b      	ldr	r3, [r3, #20]
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	7c12      	ldrb	r2, [r2, #16]
 800c57c:	f107 0108 	add.w	r1, r7, #8
 800c580:	4610      	mov	r0, r2
 800c582:	4798      	blx	r3
 800c584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c586:	e029      	b.n	800c5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c588:	6839      	ldr	r1, [r7, #0]
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 fa63 	bl	800ca56 <USBD_CtlError>
            err++;
 800c590:	7afb      	ldrb	r3, [r7, #11]
 800c592:	3301      	adds	r3, #1
 800c594:	72fb      	strb	r3, [r7, #11]
          break;
 800c596:	e021      	b.n	800c5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c59e:	699b      	ldr	r3, [r3, #24]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00b      	beq.n	800c5bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5aa:	699b      	ldr	r3, [r3, #24]
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	7c12      	ldrb	r2, [r2, #16]
 800c5b0:	f107 0108 	add.w	r1, r7, #8
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	4798      	blx	r3
 800c5b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5ba:	e00f      	b.n	800c5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5bc:	6839      	ldr	r1, [r7, #0]
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fa49 	bl	800ca56 <USBD_CtlError>
            err++;
 800c5c4:	7afb      	ldrb	r3, [r7, #11]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ca:	e007      	b.n	800c5dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fa41 	bl	800ca56 <USBD_CtlError>
          err++;
 800c5d4:	7afb      	ldrb	r3, [r7, #11]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c5da:	bf00      	nop
      }
      break;
 800c5dc:	e037      	b.n	800c64e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	7c1b      	ldrb	r3, [r3, #16]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d109      	bne.n	800c5fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5ee:	f107 0208 	add.w	r2, r7, #8
 800c5f2:	4610      	mov	r0, r2
 800c5f4:	4798      	blx	r3
 800c5f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5f8:	e029      	b.n	800c64e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c5fa:	6839      	ldr	r1, [r7, #0]
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 fa2a 	bl	800ca56 <USBD_CtlError>
        err++;
 800c602:	7afb      	ldrb	r3, [r7, #11]
 800c604:	3301      	adds	r3, #1
 800c606:	72fb      	strb	r3, [r7, #11]
      break;
 800c608:	e021      	b.n	800c64e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	7c1b      	ldrb	r3, [r3, #16]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10d      	bne.n	800c62e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c61a:	f107 0208 	add.w	r2, r7, #8
 800c61e:	4610      	mov	r0, r2
 800c620:	4798      	blx	r3
 800c622:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	3301      	adds	r3, #1
 800c628:	2207      	movs	r2, #7
 800c62a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c62c:	e00f      	b.n	800c64e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c62e:	6839      	ldr	r1, [r7, #0]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 fa10 	bl	800ca56 <USBD_CtlError>
        err++;
 800c636:	7afb      	ldrb	r3, [r7, #11]
 800c638:	3301      	adds	r3, #1
 800c63a:	72fb      	strb	r3, [r7, #11]
      break;
 800c63c:	e007      	b.n	800c64e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fa08 	bl	800ca56 <USBD_CtlError>
      err++;
 800c646:	7afb      	ldrb	r3, [r7, #11]
 800c648:	3301      	adds	r3, #1
 800c64a:	72fb      	strb	r3, [r7, #11]
      break;
 800c64c:	bf00      	nop
  }

  if (err != 0U)
 800c64e:	7afb      	ldrb	r3, [r7, #11]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d11e      	bne.n	800c692 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	88db      	ldrh	r3, [r3, #6]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d016      	beq.n	800c68a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c65c:	893b      	ldrh	r3, [r7, #8]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00e      	beq.n	800c680 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	88da      	ldrh	r2, [r3, #6]
 800c666:	893b      	ldrh	r3, [r7, #8]
 800c668:	4293      	cmp	r3, r2
 800c66a:	bf28      	it	cs
 800c66c:	4613      	movcs	r3, r2
 800c66e:	b29b      	uxth	r3, r3
 800c670:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c672:	893b      	ldrh	r3, [r7, #8]
 800c674:	461a      	mov	r2, r3
 800c676:	68f9      	ldr	r1, [r7, #12]
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 fa69 	bl	800cb50 <USBD_CtlSendData>
 800c67e:	e009      	b.n	800c694 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c680:	6839      	ldr	r1, [r7, #0]
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f9e7 	bl	800ca56 <USBD_CtlError>
 800c688:	e004      	b.n	800c694 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 faba 	bl	800cc04 <USBD_CtlSendStatus>
 800c690:	e000      	b.n	800c694 <USBD_GetDescriptor+0x2cc>
    return;
 800c692:	bf00      	nop
  }
}
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop

0800c69c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	889b      	ldrh	r3, [r3, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d131      	bne.n	800c712 <USBD_SetAddress+0x76>
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	88db      	ldrh	r3, [r3, #6]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d12d      	bne.n	800c712 <USBD_SetAddress+0x76>
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	885b      	ldrh	r3, [r3, #2]
 800c6ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6bc:	d829      	bhi.n	800c712 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	885b      	ldrh	r3, [r3, #2]
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	2b03      	cmp	r3, #3
 800c6d4:	d104      	bne.n	800c6e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c6d6:	6839      	ldr	r1, [r7, #0]
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 f9bc 	bl	800ca56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6de:	e01d      	b.n	800c71c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	7bfa      	ldrb	r2, [r7, #15]
 800c6e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c6e8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 fee7 	bl	800d4c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 fa86 	bl	800cc04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d004      	beq.n	800c708 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2202      	movs	r2, #2
 800c702:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c706:	e009      	b.n	800c71c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c710:	e004      	b.n	800c71c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c712:	6839      	ldr	r1, [r7, #0]
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 f99e 	bl	800ca56 <USBD_CtlError>
  }
}
 800c71a:	bf00      	nop
 800c71c:	bf00      	nop
 800c71e:	3710      	adds	r7, #16
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c72e:	2300      	movs	r3, #0
 800c730:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	885b      	ldrh	r3, [r3, #2]
 800c736:	b2da      	uxtb	r2, r3
 800c738:	4b4e      	ldr	r3, [pc, #312]	@ (800c874 <USBD_SetConfig+0x150>)
 800c73a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c73c:	4b4d      	ldr	r3, [pc, #308]	@ (800c874 <USBD_SetConfig+0x150>)
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	2b01      	cmp	r3, #1
 800c742:	d905      	bls.n	800c750 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f985 	bl	800ca56 <USBD_CtlError>
    return USBD_FAIL;
 800c74c:	2303      	movs	r3, #3
 800c74e:	e08c      	b.n	800c86a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c756:	b2db      	uxtb	r3, r3
 800c758:	2b02      	cmp	r3, #2
 800c75a:	d002      	beq.n	800c762 <USBD_SetConfig+0x3e>
 800c75c:	2b03      	cmp	r3, #3
 800c75e:	d029      	beq.n	800c7b4 <USBD_SetConfig+0x90>
 800c760:	e075      	b.n	800c84e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c762:	4b44      	ldr	r3, [pc, #272]	@ (800c874 <USBD_SetConfig+0x150>)
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d020      	beq.n	800c7ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c76a:	4b42      	ldr	r3, [pc, #264]	@ (800c874 <USBD_SetConfig+0x150>)
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	461a      	mov	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c774:	4b3f      	ldr	r3, [pc, #252]	@ (800c874 <USBD_SetConfig+0x150>)
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7fe ffe3 	bl	800b746 <USBD_SetClassConfig>
 800c780:	4603      	mov	r3, r0
 800c782:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d008      	beq.n	800c79c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c78a:	6839      	ldr	r1, [r7, #0]
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 f962 	bl	800ca56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2202      	movs	r2, #2
 800c796:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c79a:	e065      	b.n	800c868 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 fa31 	bl	800cc04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2203      	movs	r2, #3
 800c7a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c7aa:	e05d      	b.n	800c868 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fa29 	bl	800cc04 <USBD_CtlSendStatus>
      break;
 800c7b2:	e059      	b.n	800c868 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c7b4:	4b2f      	ldr	r3, [pc, #188]	@ (800c874 <USBD_SetConfig+0x150>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d112      	bne.n	800c7e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2202      	movs	r2, #2
 800c7c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c7c4:	4b2b      	ldr	r3, [pc, #172]	@ (800c874 <USBD_SetConfig+0x150>)
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7ce:	4b29      	ldr	r3, [pc, #164]	@ (800c874 <USBD_SetConfig+0x150>)
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7fe ffd2 	bl	800b77e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 fa12 	bl	800cc04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c7e0:	e042      	b.n	800c868 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c7e2:	4b24      	ldr	r3, [pc, #144]	@ (800c874 <USBD_SetConfig+0x150>)
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d02a      	beq.n	800c846 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f7fe ffc0 	bl	800b77e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c7fe:	4b1d      	ldr	r3, [pc, #116]	@ (800c874 <USBD_SetConfig+0x150>)
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	461a      	mov	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c808:	4b1a      	ldr	r3, [pc, #104]	@ (800c874 <USBD_SetConfig+0x150>)
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	4619      	mov	r1, r3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7fe ff99 	bl	800b746 <USBD_SetClassConfig>
 800c814:	4603      	mov	r3, r0
 800c816:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c818:	7bfb      	ldrb	r3, [r7, #15]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00f      	beq.n	800c83e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c81e:	6839      	ldr	r1, [r7, #0]
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f918 	bl	800ca56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7fe ffa5 	bl	800b77e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2202      	movs	r2, #2
 800c838:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c83c:	e014      	b.n	800c868 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f9e0 	bl	800cc04 <USBD_CtlSendStatus>
      break;
 800c844:	e010      	b.n	800c868 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 f9dc 	bl	800cc04 <USBD_CtlSendStatus>
      break;
 800c84c:	e00c      	b.n	800c868 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c84e:	6839      	ldr	r1, [r7, #0]
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 f900 	bl	800ca56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c856:	4b07      	ldr	r3, [pc, #28]	@ (800c874 <USBD_SetConfig+0x150>)
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	4619      	mov	r1, r3
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f7fe ff8e 	bl	800b77e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c862:	2303      	movs	r3, #3
 800c864:	73fb      	strb	r3, [r7, #15]
      break;
 800c866:	bf00      	nop
  }

  return ret;
 800c868:	7bfb      	ldrb	r3, [r7, #15]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	20004cfc 	.word	0x20004cfc

0800c878 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	88db      	ldrh	r3, [r3, #6]
 800c886:	2b01      	cmp	r3, #1
 800c888:	d004      	beq.n	800c894 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c88a:	6839      	ldr	r1, [r7, #0]
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 f8e2 	bl	800ca56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c892:	e023      	b.n	800c8dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b02      	cmp	r3, #2
 800c89e:	dc02      	bgt.n	800c8a6 <USBD_GetConfig+0x2e>
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	dc03      	bgt.n	800c8ac <USBD_GetConfig+0x34>
 800c8a4:	e015      	b.n	800c8d2 <USBD_GetConfig+0x5a>
 800c8a6:	2b03      	cmp	r3, #3
 800c8a8:	d00b      	beq.n	800c8c2 <USBD_GetConfig+0x4a>
 800c8aa:	e012      	b.n	800c8d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 f948 	bl	800cb50 <USBD_CtlSendData>
        break;
 800c8c0:	e00c      	b.n	800c8dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	3304      	adds	r3, #4
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 f940 	bl	800cb50 <USBD_CtlSendData>
        break;
 800c8d0:	e004      	b.n	800c8dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c8d2:	6839      	ldr	r1, [r7, #0]
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 f8be 	bl	800ca56 <USBD_CtlError>
        break;
 800c8da:	bf00      	nop
}
 800c8dc:	bf00      	nop
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d81e      	bhi.n	800c93a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	88db      	ldrh	r3, [r3, #6]
 800c900:	2b02      	cmp	r3, #2
 800c902:	d004      	beq.n	800c90e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c904:	6839      	ldr	r1, [r7, #0]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 f8a5 	bl	800ca56 <USBD_CtlError>
        break;
 800c90c:	e01a      	b.n	800c944 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2201      	movs	r2, #1
 800c912:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d005      	beq.n	800c92a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	f043 0202 	orr.w	r2, r3, #2
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	330c      	adds	r3, #12
 800c92e:	2202      	movs	r2, #2
 800c930:	4619      	mov	r1, r3
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f90c 	bl	800cb50 <USBD_CtlSendData>
      break;
 800c938:	e004      	b.n	800c944 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f88a 	bl	800ca56 <USBD_CtlError>
      break;
 800c942:	bf00      	nop
  }
}
 800c944:	bf00      	nop
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	885b      	ldrh	r3, [r3, #2]
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d107      	bne.n	800c96e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2201      	movs	r2, #1
 800c962:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 f94c 	bl	800cc04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c96c:	e013      	b.n	800c996 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	885b      	ldrh	r3, [r3, #2]
 800c972:	2b02      	cmp	r3, #2
 800c974:	d10b      	bne.n	800c98e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	889b      	ldrh	r3, [r3, #4]
 800c97a:	0a1b      	lsrs	r3, r3, #8
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	b2da      	uxtb	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f93c 	bl	800cc04 <USBD_CtlSendStatus>
}
 800c98c:	e003      	b.n	800c996 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c98e:	6839      	ldr	r1, [r7, #0]
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 f860 	bl	800ca56 <USBD_CtlError>
}
 800c996:	bf00      	nop
 800c998:	3708      	adds	r7, #8
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b082      	sub	sp, #8
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	3b01      	subs	r3, #1
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d80b      	bhi.n	800c9ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	885b      	ldrh	r3, [r3, #2]
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d10c      	bne.n	800c9d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 f91c 	bl	800cc04 <USBD_CtlSendStatus>
      }
      break;
 800c9cc:	e004      	b.n	800c9d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c9ce:	6839      	ldr	r1, [r7, #0]
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 f840 	bl	800ca56 <USBD_CtlError>
      break;
 800c9d6:	e000      	b.n	800c9da <USBD_ClrFeature+0x3c>
      break;
 800c9d8:	bf00      	nop
  }
}
 800c9da:	bf00      	nop
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b084      	sub	sp, #16
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	781a      	ldrb	r2, [r3, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	781a      	ldrb	r2, [r3, #0]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f7ff fa40 	bl	800be92 <SWAPBYTE>
 800ca12:	4603      	mov	r3, r0
 800ca14:	461a      	mov	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	3301      	adds	r3, #1
 800ca24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	f7ff fa33 	bl	800be92 <SWAPBYTE>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	461a      	mov	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	3301      	adds	r3, #1
 800ca38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f7ff fa26 	bl	800be92 <SWAPBYTE>
 800ca46:	4603      	mov	r3, r0
 800ca48:	461a      	mov	r2, r3
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	80da      	strh	r2, [r3, #6]
}
 800ca4e:	bf00      	nop
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b082      	sub	sp, #8
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca60:	2180      	movs	r1, #128	@ 0x80
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fcc2 	bl	800d3ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ca68:	2100      	movs	r1, #0
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fcbe 	bl	800d3ec <USBD_LL_StallEP>
}
 800ca70:	bf00      	nop
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b086      	sub	sp, #24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca84:	2300      	movs	r3, #0
 800ca86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d042      	beq.n	800cb14 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ca92:	6938      	ldr	r0, [r7, #16]
 800ca94:	f000 f842 	bl	800cb1c <USBD_GetLen>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	005b      	lsls	r3, r3, #1
 800ca9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800caa2:	d808      	bhi.n	800cab6 <USBD_GetString+0x3e>
 800caa4:	6938      	ldr	r0, [r7, #16]
 800caa6:	f000 f839 	bl	800cb1c <USBD_GetLen>
 800caaa:	4603      	mov	r3, r0
 800caac:	3301      	adds	r3, #1
 800caae:	b29b      	uxth	r3, r3
 800cab0:	005b      	lsls	r3, r3, #1
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	e001      	b.n	800caba <USBD_GetString+0x42>
 800cab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cabe:	7dfb      	ldrb	r3, [r7, #23]
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	4413      	add	r3, r2
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	7812      	ldrb	r2, [r2, #0]
 800cac8:	701a      	strb	r2, [r3, #0]
  idx++;
 800caca:	7dfb      	ldrb	r3, [r7, #23]
 800cacc:	3301      	adds	r3, #1
 800cace:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cad0:	7dfb      	ldrb	r3, [r7, #23]
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	4413      	add	r3, r2
 800cad6:	2203      	movs	r2, #3
 800cad8:	701a      	strb	r2, [r3, #0]
  idx++;
 800cada:	7dfb      	ldrb	r3, [r7, #23]
 800cadc:	3301      	adds	r3, #1
 800cade:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cae0:	e013      	b.n	800cb0a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cae2:	7dfb      	ldrb	r3, [r7, #23]
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	4413      	add	r3, r2
 800cae8:	693a      	ldr	r2, [r7, #16]
 800caea:	7812      	ldrb	r2, [r2, #0]
 800caec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	3301      	adds	r3, #1
 800caf2:	613b      	str	r3, [r7, #16]
    idx++;
 800caf4:	7dfb      	ldrb	r3, [r7, #23]
 800caf6:	3301      	adds	r3, #1
 800caf8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cafa:	7dfb      	ldrb	r3, [r7, #23]
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	4413      	add	r3, r2
 800cb00:	2200      	movs	r2, #0
 800cb02:	701a      	strb	r2, [r3, #0]
    idx++;
 800cb04:	7dfb      	ldrb	r3, [r7, #23]
 800cb06:	3301      	adds	r3, #1
 800cb08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d1e7      	bne.n	800cae2 <USBD_GetString+0x6a>
 800cb12:	e000      	b.n	800cb16 <USBD_GetString+0x9e>
    return;
 800cb14:	bf00      	nop
  }
}
 800cb16:	3718      	adds	r7, #24
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b085      	sub	sp, #20
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cb24:	2300      	movs	r3, #0
 800cb26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cb2c:	e005      	b.n	800cb3a <USBD_GetLen+0x1e>
  {
    len++;
 800cb2e:	7bfb      	ldrb	r3, [r7, #15]
 800cb30:	3301      	adds	r3, #1
 800cb32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	3301      	adds	r3, #1
 800cb38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1f5      	bne.n	800cb2e <USBD_GetLen+0x12>
  }

  return len;
 800cb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2202      	movs	r2, #2
 800cb60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	2100      	movs	r1, #0
 800cb76:	68f8      	ldr	r0, [r7, #12]
 800cb78:	f000 fcc1 	bl	800d4fe <USBD_LL_Transmit>

  return USBD_OK;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b084      	sub	sp, #16
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	60f8      	str	r0, [r7, #12]
 800cb8e:	60b9      	str	r1, [r7, #8]
 800cb90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	68ba      	ldr	r2, [r7, #8]
 800cb96:	2100      	movs	r1, #0
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f000 fcb0 	bl	800d4fe <USBD_LL_Transmit>

  return USBD_OK;
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2203      	movs	r2, #3
 800cbb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	68ba      	ldr	r2, [r7, #8]
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f000 fcb4 	bl	800d540 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b084      	sub	sp, #16
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	60f8      	str	r0, [r7, #12]
 800cbea:	60b9      	str	r1, [r7, #8]
 800cbec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	68ba      	ldr	r2, [r7, #8]
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	f000 fca3 	bl	800d540 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2204      	movs	r2, #4
 800cc10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cc14:	2300      	movs	r3, #0
 800cc16:	2200      	movs	r2, #0
 800cc18:	2100      	movs	r1, #0
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 fc6f 	bl	800d4fe <USBD_LL_Transmit>

  return USBD_OK;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b082      	sub	sp, #8
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2205      	movs	r2, #5
 800cc36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	2100      	movs	r1, #0
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 fc7d 	bl	800d540 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc46:	2300      	movs	r3, #0
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cc54:	2200      	movs	r2, #0
 800cc56:	4912      	ldr	r1, [pc, #72]	@ (800cca0 <MX_USB_DEVICE_Init+0x50>)
 800cc58:	4812      	ldr	r0, [pc, #72]	@ (800cca4 <MX_USB_DEVICE_Init+0x54>)
 800cc5a:	f7fe fcf7 	bl	800b64c <USBD_Init>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d001      	beq.n	800cc68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cc64:	f7f3 fea1 	bl	80009aa <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cc68:	490f      	ldr	r1, [pc, #60]	@ (800cca8 <MX_USB_DEVICE_Init+0x58>)
 800cc6a:	480e      	ldr	r0, [pc, #56]	@ (800cca4 <MX_USB_DEVICE_Init+0x54>)
 800cc6c:	f7fe fd1e 	bl	800b6ac <USBD_RegisterClass>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d001      	beq.n	800cc7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cc76:	f7f3 fe98 	bl	80009aa <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cc7a:	490c      	ldr	r1, [pc, #48]	@ (800ccac <MX_USB_DEVICE_Init+0x5c>)
 800cc7c:	4809      	ldr	r0, [pc, #36]	@ (800cca4 <MX_USB_DEVICE_Init+0x54>)
 800cc7e:	f7fe fc55 	bl	800b52c <USBD_CDC_RegisterInterface>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d001      	beq.n	800cc8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cc88:	f7f3 fe8f 	bl	80009aa <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc8c:	4805      	ldr	r0, [pc, #20]	@ (800cca4 <MX_USB_DEVICE_Init+0x54>)
 800cc8e:	f7fe fd43 	bl	800b718 <USBD_Start>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d001      	beq.n	800cc9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cc98:	f7f3 fe87 	bl	80009aa <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc9c:	bf00      	nop
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	200000b0 	.word	0x200000b0
 800cca4:	20004d00 	.word	0x20004d00
 800cca8:	2000001c 	.word	0x2000001c
 800ccac:	2000009c 	.word	0x2000009c

0800ccb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	4905      	ldr	r1, [pc, #20]	@ (800cccc <CDC_Init_FS+0x1c>)
 800ccb8:	4805      	ldr	r0, [pc, #20]	@ (800ccd0 <CDC_Init_FS+0x20>)
 800ccba:	f7fe fc51 	bl	800b560 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ccbe:	4905      	ldr	r1, [pc, #20]	@ (800ccd4 <CDC_Init_FS+0x24>)
 800ccc0:	4803      	ldr	r0, [pc, #12]	@ (800ccd0 <CDC_Init_FS+0x20>)
 800ccc2:	f7fe fc6f 	bl	800b5a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ccc6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	200053dc 	.word	0x200053dc
 800ccd0:	20004d00 	.word	0x20004d00
 800ccd4:	20004fdc 	.word	0x20004fdc

0800ccd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ccdc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	4603      	mov	r3, r0
 800ccf0:	6039      	str	r1, [r7, #0]
 800ccf2:	71fb      	strb	r3, [r7, #7]
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ccf8:	79fb      	ldrb	r3, [r7, #7]
 800ccfa:	2b23      	cmp	r3, #35	@ 0x23
 800ccfc:	d84a      	bhi.n	800cd94 <CDC_Control_FS+0xac>
 800ccfe:	a201      	add	r2, pc, #4	@ (adr r2, 800cd04 <CDC_Control_FS+0x1c>)
 800cd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd04:	0800cd95 	.word	0x0800cd95
 800cd08:	0800cd95 	.word	0x0800cd95
 800cd0c:	0800cd95 	.word	0x0800cd95
 800cd10:	0800cd95 	.word	0x0800cd95
 800cd14:	0800cd95 	.word	0x0800cd95
 800cd18:	0800cd95 	.word	0x0800cd95
 800cd1c:	0800cd95 	.word	0x0800cd95
 800cd20:	0800cd95 	.word	0x0800cd95
 800cd24:	0800cd95 	.word	0x0800cd95
 800cd28:	0800cd95 	.word	0x0800cd95
 800cd2c:	0800cd95 	.word	0x0800cd95
 800cd30:	0800cd95 	.word	0x0800cd95
 800cd34:	0800cd95 	.word	0x0800cd95
 800cd38:	0800cd95 	.word	0x0800cd95
 800cd3c:	0800cd95 	.word	0x0800cd95
 800cd40:	0800cd95 	.word	0x0800cd95
 800cd44:	0800cd95 	.word	0x0800cd95
 800cd48:	0800cd95 	.word	0x0800cd95
 800cd4c:	0800cd95 	.word	0x0800cd95
 800cd50:	0800cd95 	.word	0x0800cd95
 800cd54:	0800cd95 	.word	0x0800cd95
 800cd58:	0800cd95 	.word	0x0800cd95
 800cd5c:	0800cd95 	.word	0x0800cd95
 800cd60:	0800cd95 	.word	0x0800cd95
 800cd64:	0800cd95 	.word	0x0800cd95
 800cd68:	0800cd95 	.word	0x0800cd95
 800cd6c:	0800cd95 	.word	0x0800cd95
 800cd70:	0800cd95 	.word	0x0800cd95
 800cd74:	0800cd95 	.word	0x0800cd95
 800cd78:	0800cd95 	.word	0x0800cd95
 800cd7c:	0800cd95 	.word	0x0800cd95
 800cd80:	0800cd95 	.word	0x0800cd95
 800cd84:	0800cd95 	.word	0x0800cd95
 800cd88:	0800cd95 	.word	0x0800cd95
 800cd8c:	0800cd95 	.word	0x0800cd95
 800cd90:	0800cd95 	.word	0x0800cd95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd94:	bf00      	nop
  }

  return (USBD_OK);
 800cd96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USB_data = Buf[0];
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	781a      	ldrb	r2, [r3, #0]
 800cdb2:	4b07      	ldr	r3, [pc, #28]	@ (800cdd0 <CDC_Receive_FS+0x2c>)
 800cdb4:	701a      	strb	r2, [r3, #0]
	  // Ready to receive again
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cdb6:	6879      	ldr	r1, [r7, #4]
 800cdb8:	4806      	ldr	r0, [pc, #24]	@ (800cdd4 <CDC_Receive_FS+0x30>)
 800cdba:	f7fe fbf3 	bl	800b5a4 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cdbe:	4805      	ldr	r0, [pc, #20]	@ (800cdd4 <CDC_Receive_FS+0x30>)
 800cdc0:	f7fe fc0e 	bl	800b5e0 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 800cdc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	20000196 	.word	0x20000196
 800cdd4:	20004d00 	.word	0x20004d00

0800cdd8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b087      	sub	sp, #28
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	4613      	mov	r3, r2
 800cde4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cde6:	2300      	movs	r3, #0
 800cde8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cdea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	371c      	adds	r7, #28
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
	...

0800cdfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	4603      	mov	r3, r0
 800ce04:	6039      	str	r1, [r7, #0]
 800ce06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	2212      	movs	r2, #18
 800ce0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ce0e:	4b03      	ldr	r3, [pc, #12]	@ (800ce1c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	370c      	adds	r7, #12
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr
 800ce1c:	200000cc 	.word	0x200000cc

0800ce20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	4603      	mov	r3, r0
 800ce28:	6039      	str	r1, [r7, #0]
 800ce2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	2204      	movs	r2, #4
 800ce30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce32:	4b03      	ldr	r3, [pc, #12]	@ (800ce40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	370c      	adds	r7, #12
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr
 800ce40:	200000e0 	.word	0x200000e0

0800ce44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	6039      	str	r1, [r7, #0]
 800ce4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce50:	79fb      	ldrb	r3, [r7, #7]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d105      	bne.n	800ce62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	4907      	ldr	r1, [pc, #28]	@ (800ce78 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce5a:	4808      	ldr	r0, [pc, #32]	@ (800ce7c <USBD_FS_ProductStrDescriptor+0x38>)
 800ce5c:	f7ff fe0c 	bl	800ca78 <USBD_GetString>
 800ce60:	e004      	b.n	800ce6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	4904      	ldr	r1, [pc, #16]	@ (800ce78 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce66:	4805      	ldr	r0, [pc, #20]	@ (800ce7c <USBD_FS_ProductStrDescriptor+0x38>)
 800ce68:	f7ff fe06 	bl	800ca78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce6c:	4b02      	ldr	r3, [pc, #8]	@ (800ce78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	200057dc 	.word	0x200057dc
 800ce7c:	0800d898 	.word	0x0800d898

0800ce80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	6039      	str	r1, [r7, #0]
 800ce8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce8c:	683a      	ldr	r2, [r7, #0]
 800ce8e:	4904      	ldr	r1, [pc, #16]	@ (800cea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce90:	4804      	ldr	r0, [pc, #16]	@ (800cea4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce92:	f7ff fdf1 	bl	800ca78 <USBD_GetString>
  return USBD_StrDesc;
 800ce96:	4b02      	ldr	r3, [pc, #8]	@ (800cea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3708      	adds	r7, #8
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	200057dc 	.word	0x200057dc
 800cea4:	0800d8b0 	.word	0x0800d8b0

0800cea8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	4603      	mov	r3, r0
 800ceb0:	6039      	str	r1, [r7, #0]
 800ceb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	221a      	movs	r2, #26
 800ceb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ceba:	f000 f843 	bl	800cf44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cebe:	4b02      	ldr	r3, [pc, #8]	@ (800cec8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	200000e4 	.word	0x200000e4

0800cecc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	4603      	mov	r3, r0
 800ced4:	6039      	str	r1, [r7, #0]
 800ced6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ced8:	79fb      	ldrb	r3, [r7, #7]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d105      	bne.n	800ceea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cede:	683a      	ldr	r2, [r7, #0]
 800cee0:	4907      	ldr	r1, [pc, #28]	@ (800cf00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cee2:	4808      	ldr	r0, [pc, #32]	@ (800cf04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cee4:	f7ff fdc8 	bl	800ca78 <USBD_GetString>
 800cee8:	e004      	b.n	800cef4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ceea:	683a      	ldr	r2, [r7, #0]
 800ceec:	4904      	ldr	r1, [pc, #16]	@ (800cf00 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ceee:	4805      	ldr	r0, [pc, #20]	@ (800cf04 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cef0:	f7ff fdc2 	bl	800ca78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cef4:	4b02      	ldr	r3, [pc, #8]	@ (800cf00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	200057dc 	.word	0x200057dc
 800cf04:	0800d8c4 	.word	0x0800d8c4

0800cf08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	4603      	mov	r3, r0
 800cf10:	6039      	str	r1, [r7, #0]
 800cf12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf14:	79fb      	ldrb	r3, [r7, #7]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d105      	bne.n	800cf26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf1a:	683a      	ldr	r2, [r7, #0]
 800cf1c:	4907      	ldr	r1, [pc, #28]	@ (800cf3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf1e:	4808      	ldr	r0, [pc, #32]	@ (800cf40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf20:	f7ff fdaa 	bl	800ca78 <USBD_GetString>
 800cf24:	e004      	b.n	800cf30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf26:	683a      	ldr	r2, [r7, #0]
 800cf28:	4904      	ldr	r1, [pc, #16]	@ (800cf3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf2a:	4805      	ldr	r0, [pc, #20]	@ (800cf40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf2c:	f7ff fda4 	bl	800ca78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf30:	4b02      	ldr	r3, [pc, #8]	@ (800cf3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3708      	adds	r7, #8
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	200057dc 	.word	0x200057dc
 800cf40:	0800d8d0 	.word	0x0800d8d0

0800cf44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf4a:	4b0f      	ldr	r3, [pc, #60]	@ (800cf88 <Get_SerialNum+0x44>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf50:	4b0e      	ldr	r3, [pc, #56]	@ (800cf8c <Get_SerialNum+0x48>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf56:	4b0e      	ldr	r3, [pc, #56]	@ (800cf90 <Get_SerialNum+0x4c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4413      	add	r3, r2
 800cf62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d009      	beq.n	800cf7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf6a:	2208      	movs	r2, #8
 800cf6c:	4909      	ldr	r1, [pc, #36]	@ (800cf94 <Get_SerialNum+0x50>)
 800cf6e:	68f8      	ldr	r0, [r7, #12]
 800cf70:	f000 f814 	bl	800cf9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf74:	2204      	movs	r2, #4
 800cf76:	4908      	ldr	r1, [pc, #32]	@ (800cf98 <Get_SerialNum+0x54>)
 800cf78:	68b8      	ldr	r0, [r7, #8]
 800cf7a:	f000 f80f 	bl	800cf9c <IntToUnicode>
  }
}
 800cf7e:	bf00      	nop
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	1fff7a10 	.word	0x1fff7a10
 800cf8c:	1fff7a14 	.word	0x1fff7a14
 800cf90:	1fff7a18 	.word	0x1fff7a18
 800cf94:	200000e6 	.word	0x200000e6
 800cf98:	200000f6 	.word	0x200000f6

0800cf9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b087      	sub	sp, #28
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cfae:	2300      	movs	r3, #0
 800cfb0:	75fb      	strb	r3, [r7, #23]
 800cfb2:	e027      	b.n	800d004 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	0f1b      	lsrs	r3, r3, #28
 800cfb8:	2b09      	cmp	r3, #9
 800cfba:	d80b      	bhi.n	800cfd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	0f1b      	lsrs	r3, r3, #28
 800cfc0:	b2da      	uxtb	r2, r3
 800cfc2:	7dfb      	ldrb	r3, [r7, #23]
 800cfc4:	005b      	lsls	r3, r3, #1
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	440b      	add	r3, r1
 800cfcc:	3230      	adds	r2, #48	@ 0x30
 800cfce:	b2d2      	uxtb	r2, r2
 800cfd0:	701a      	strb	r2, [r3, #0]
 800cfd2:	e00a      	b.n	800cfea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	0f1b      	lsrs	r3, r3, #28
 800cfd8:	b2da      	uxtb	r2, r3
 800cfda:	7dfb      	ldrb	r3, [r7, #23]
 800cfdc:	005b      	lsls	r3, r3, #1
 800cfde:	4619      	mov	r1, r3
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	440b      	add	r3, r1
 800cfe4:	3237      	adds	r2, #55	@ 0x37
 800cfe6:	b2d2      	uxtb	r2, r2
 800cfe8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	011b      	lsls	r3, r3, #4
 800cfee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cff0:	7dfb      	ldrb	r3, [r7, #23]
 800cff2:	005b      	lsls	r3, r3, #1
 800cff4:	3301      	adds	r3, #1
 800cff6:	68ba      	ldr	r2, [r7, #8]
 800cff8:	4413      	add	r3, r2
 800cffa:	2200      	movs	r2, #0
 800cffc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cffe:	7dfb      	ldrb	r3, [r7, #23]
 800d000:	3301      	adds	r3, #1
 800d002:	75fb      	strb	r3, [r7, #23]
 800d004:	7dfa      	ldrb	r2, [r7, #23]
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d3d3      	bcc.n	800cfb4 <IntToUnicode+0x18>
  }
}
 800d00c:	bf00      	nop
 800d00e:	bf00      	nop
 800d010:	371c      	adds	r7, #28
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr
	...

0800d01c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b08a      	sub	sp, #40	@ 0x28
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d024:	f107 0314 	add.w	r3, r7, #20
 800d028:	2200      	movs	r2, #0
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	605a      	str	r2, [r3, #4]
 800d02e:	609a      	str	r2, [r3, #8]
 800d030:	60da      	str	r2, [r3, #12]
 800d032:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d03c:	d13a      	bne.n	800d0b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d03e:	2300      	movs	r3, #0
 800d040:	613b      	str	r3, [r7, #16]
 800d042:	4b1e      	ldr	r3, [pc, #120]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d046:	4a1d      	ldr	r2, [pc, #116]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d048:	f043 0301 	orr.w	r3, r3, #1
 800d04c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d04e:	4b1b      	ldr	r3, [pc, #108]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d052:	f003 0301 	and.w	r3, r3, #1
 800d056:	613b      	str	r3, [r7, #16]
 800d058:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d05a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d05e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d060:	2302      	movs	r3, #2
 800d062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d064:	2300      	movs	r3, #0
 800d066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d068:	2303      	movs	r3, #3
 800d06a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d06c:	230a      	movs	r3, #10
 800d06e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d070:	f107 0314 	add.w	r3, r7, #20
 800d074:	4619      	mov	r1, r3
 800d076:	4812      	ldr	r0, [pc, #72]	@ (800d0c0 <HAL_PCD_MspInit+0xa4>)
 800d078:	f7f4 fa18 	bl	80014ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d07c:	4b0f      	ldr	r3, [pc, #60]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d07e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d080:	4a0e      	ldr	r2, [pc, #56]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d086:	6353      	str	r3, [r2, #52]	@ 0x34
 800d088:	2300      	movs	r3, #0
 800d08a:	60fb      	str	r3, [r7, #12]
 800d08c:	4b0b      	ldr	r3, [pc, #44]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d08e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d090:	4a0a      	ldr	r2, [pc, #40]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d096:	6453      	str	r3, [r2, #68]	@ 0x44
 800d098:	4b08      	ldr	r3, [pc, #32]	@ (800d0bc <HAL_PCD_MspInit+0xa0>)
 800d09a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d09c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d0a0:	60fb      	str	r3, [r7, #12]
 800d0a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	2105      	movs	r1, #5
 800d0a8:	2043      	movs	r0, #67	@ 0x43
 800d0aa:	f7f4 f93e 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d0ae:	2043      	movs	r0, #67	@ 0x43
 800d0b0:	f7f4 f957 	bl	8001362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d0b4:	bf00      	nop
 800d0b6:	3728      	adds	r7, #40	@ 0x28
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	40023800 	.word	0x40023800
 800d0c0:	40020000 	.word	0x40020000

0800d0c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d0d8:	4619      	mov	r1, r3
 800d0da:	4610      	mov	r0, r2
 800d0dc:	f7fe fb69 	bl	800b7b2 <USBD_LL_SetupStage>
}
 800d0e0:	bf00      	nop
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d0fa:	78fa      	ldrb	r2, [r7, #3]
 800d0fc:	6879      	ldr	r1, [r7, #4]
 800d0fe:	4613      	mov	r3, r2
 800d100:	00db      	lsls	r3, r3, #3
 800d102:	4413      	add	r3, r2
 800d104:	009b      	lsls	r3, r3, #2
 800d106:	440b      	add	r3, r1
 800d108:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	78fb      	ldrb	r3, [r7, #3]
 800d110:	4619      	mov	r1, r3
 800d112:	f7fe fba3 	bl	800b85c <USBD_LL_DataOutStage>
}
 800d116:	bf00      	nop
 800d118:	3708      	adds	r7, #8
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b082      	sub	sp, #8
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
 800d126:	460b      	mov	r3, r1
 800d128:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d130:	78fa      	ldrb	r2, [r7, #3]
 800d132:	6879      	ldr	r1, [r7, #4]
 800d134:	4613      	mov	r3, r2
 800d136:	00db      	lsls	r3, r3, #3
 800d138:	4413      	add	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	440b      	add	r3, r1
 800d13e:	3320      	adds	r3, #32
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	78fb      	ldrb	r3, [r7, #3]
 800d144:	4619      	mov	r1, r3
 800d146:	f7fe fc3c 	bl	800b9c2 <USBD_LL_DataInStage>
}
 800d14a:	bf00      	nop
 800d14c:	3708      	adds	r7, #8
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d152:	b580      	push	{r7, lr}
 800d154:	b082      	sub	sp, #8
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d160:	4618      	mov	r0, r3
 800d162:	f7fe fd76 	bl	800bc52 <USBD_LL_SOF>
}
 800d166:	bf00      	nop
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b084      	sub	sp, #16
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d176:	2301      	movs	r3, #1
 800d178:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	79db      	ldrb	r3, [r3, #7]
 800d17e:	2b02      	cmp	r3, #2
 800d180:	d001      	beq.n	800d186 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d182:	f7f3 fc12 	bl	80009aa <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d18c:	7bfa      	ldrb	r2, [r7, #15]
 800d18e:	4611      	mov	r1, r2
 800d190:	4618      	mov	r0, r3
 800d192:	f7fe fd1a 	bl	800bbca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fe fcc2 	bl	800bb26 <USBD_LL_Reset>
}
 800d1a2:	bf00      	nop
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
	...

0800d1ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fe fd15 	bl	800bbea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	6812      	ldr	r2, [r2, #0]
 800d1ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d1d2:	f043 0301 	orr.w	r3, r3, #1
 800d1d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	7adb      	ldrb	r3, [r3, #11]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d005      	beq.n	800d1ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1e0:	4b04      	ldr	r3, [pc, #16]	@ (800d1f4 <HAL_PCD_SuspendCallback+0x48>)
 800d1e2:	691b      	ldr	r3, [r3, #16]
 800d1e4:	4a03      	ldr	r2, [pc, #12]	@ (800d1f4 <HAL_PCD_SuspendCallback+0x48>)
 800d1e6:	f043 0306 	orr.w	r3, r3, #6
 800d1ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1ec:	bf00      	nop
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	e000ed00 	.word	0xe000ed00

0800d1f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d206:	4618      	mov	r0, r3
 800d208:	f7fe fd0b 	bl	800bc22 <USBD_LL_Resume>
}
 800d20c:	bf00      	nop
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	460b      	mov	r3, r1
 800d21e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d226:	78fa      	ldrb	r2, [r7, #3]
 800d228:	4611      	mov	r1, r2
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fe fd63 	bl	800bcf6 <USBD_LL_IsoOUTIncomplete>
}
 800d230:	bf00      	nop
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	460b      	mov	r3, r1
 800d242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d24a:	78fa      	ldrb	r2, [r7, #3]
 800d24c:	4611      	mov	r1, r2
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fe fd1f 	bl	800bc92 <USBD_LL_IsoINIncomplete>
}
 800d254:	bf00      	nop
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7fe fd75 	bl	800bd5a <USBD_LL_DevConnected>
}
 800d270:	bf00      	nop
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d286:	4618      	mov	r0, r3
 800d288:	f7fe fd72 	bl	800bd70 <USBD_LL_DevDisconnected>
}
 800d28c:	bf00      	nop
 800d28e:	3708      	adds	r7, #8
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d13c      	bne.n	800d31e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d2a4:	4a20      	ldr	r2, [pc, #128]	@ (800d328 <USBD_LL_Init+0x94>)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a1e      	ldr	r2, [pc, #120]	@ (800d328 <USBD_LL_Init+0x94>)
 800d2b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2b4:	4b1c      	ldr	r3, [pc, #112]	@ (800d328 <USBD_LL_Init+0x94>)
 800d2b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d2ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d2bc:	4b1a      	ldr	r3, [pc, #104]	@ (800d328 <USBD_LL_Init+0x94>)
 800d2be:	2204      	movs	r2, #4
 800d2c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d2c2:	4b19      	ldr	r3, [pc, #100]	@ (800d328 <USBD_LL_Init+0x94>)
 800d2c4:	2202      	movs	r2, #2
 800d2c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d2c8:	4b17      	ldr	r3, [pc, #92]	@ (800d328 <USBD_LL_Init+0x94>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2ce:	4b16      	ldr	r3, [pc, #88]	@ (800d328 <USBD_LL_Init+0x94>)
 800d2d0:	2202      	movs	r2, #2
 800d2d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d2d4:	4b14      	ldr	r3, [pc, #80]	@ (800d328 <USBD_LL_Init+0x94>)
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d2da:	4b13      	ldr	r3, [pc, #76]	@ (800d328 <USBD_LL_Init+0x94>)
 800d2dc:	2200      	movs	r2, #0
 800d2de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d2e0:	4b11      	ldr	r3, [pc, #68]	@ (800d328 <USBD_LL_Init+0x94>)
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d2e6:	4b10      	ldr	r3, [pc, #64]	@ (800d328 <USBD_LL_Init+0x94>)
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d2ec:	4b0e      	ldr	r3, [pc, #56]	@ (800d328 <USBD_LL_Init+0x94>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d2f2:	480d      	ldr	r0, [pc, #52]	@ (800d328 <USBD_LL_Init+0x94>)
 800d2f4:	f7f4 fa8f 	bl	8001816 <HAL_PCD_Init>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d001      	beq.n	800d302 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d2fe:	f7f3 fb54 	bl	80009aa <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d302:	2180      	movs	r1, #128	@ 0x80
 800d304:	4808      	ldr	r0, [pc, #32]	@ (800d328 <USBD_LL_Init+0x94>)
 800d306:	f7f5 fcbc 	bl	8002c82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d30a:	2240      	movs	r2, #64	@ 0x40
 800d30c:	2100      	movs	r1, #0
 800d30e:	4806      	ldr	r0, [pc, #24]	@ (800d328 <USBD_LL_Init+0x94>)
 800d310:	f7f5 fc70 	bl	8002bf4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d314:	2280      	movs	r2, #128	@ 0x80
 800d316:	2101      	movs	r1, #1
 800d318:	4803      	ldr	r0, [pc, #12]	@ (800d328 <USBD_LL_Init+0x94>)
 800d31a:	f7f5 fc6b 	bl	8002bf4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	200059dc 	.word	0x200059dc

0800d32c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d334:	2300      	movs	r3, #0
 800d336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d338:	2300      	movs	r3, #0
 800d33a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d342:	4618      	mov	r0, r3
 800d344:	f7f4 fb76 	bl	8001a34 <HAL_PCD_Start>
 800d348:	4603      	mov	r3, r0
 800d34a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d34c:	7bfb      	ldrb	r3, [r7, #15]
 800d34e:	4618      	mov	r0, r3
 800d350:	f000 f942 	bl	800d5d8 <USBD_Get_USB_Status>
 800d354:	4603      	mov	r3, r0
 800d356:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d358:	7bbb      	ldrb	r3, [r7, #14]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d362:	b580      	push	{r7, lr}
 800d364:	b084      	sub	sp, #16
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
 800d36a:	4608      	mov	r0, r1
 800d36c:	4611      	mov	r1, r2
 800d36e:	461a      	mov	r2, r3
 800d370:	4603      	mov	r3, r0
 800d372:	70fb      	strb	r3, [r7, #3]
 800d374:	460b      	mov	r3, r1
 800d376:	70bb      	strb	r3, [r7, #2]
 800d378:	4613      	mov	r3, r2
 800d37a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d37c:	2300      	movs	r3, #0
 800d37e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d380:	2300      	movs	r3, #0
 800d382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d38a:	78bb      	ldrb	r3, [r7, #2]
 800d38c:	883a      	ldrh	r2, [r7, #0]
 800d38e:	78f9      	ldrb	r1, [r7, #3]
 800d390:	f7f5 f84a 	bl	8002428 <HAL_PCD_EP_Open>
 800d394:	4603      	mov	r3, r0
 800d396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d398:	7bfb      	ldrb	r3, [r7, #15]
 800d39a:	4618      	mov	r0, r3
 800d39c:	f000 f91c 	bl	800d5d8 <USBD_Get_USB_Status>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3710      	adds	r7, #16
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b084      	sub	sp, #16
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3c8:	78fa      	ldrb	r2, [r7, #3]
 800d3ca:	4611      	mov	r1, r2
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7f5 f895 	bl	80024fc <HAL_PCD_EP_Close>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3d6:	7bfb      	ldrb	r3, [r7, #15]
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f000 f8fd 	bl	800d5d8 <USBD_Get_USB_Status>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3710      	adds	r7, #16
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d406:	78fa      	ldrb	r2, [r7, #3]
 800d408:	4611      	mov	r1, r2
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7f5 f94d 	bl	80026aa <HAL_PCD_EP_SetStall>
 800d410:	4603      	mov	r3, r0
 800d412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d414:	7bfb      	ldrb	r3, [r7, #15]
 800d416:	4618      	mov	r0, r3
 800d418:	f000 f8de 	bl	800d5d8 <USBD_Get_USB_Status>
 800d41c:	4603      	mov	r3, r0
 800d41e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d420:	7bbb      	ldrb	r3, [r7, #14]
}
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b084      	sub	sp, #16
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	460b      	mov	r3, r1
 800d434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d436:	2300      	movs	r3, #0
 800d438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d43a:	2300      	movs	r3, #0
 800d43c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d444:	78fa      	ldrb	r2, [r7, #3]
 800d446:	4611      	mov	r1, r2
 800d448:	4618      	mov	r0, r3
 800d44a:	f7f5 f991 	bl	8002770 <HAL_PCD_EP_ClrStall>
 800d44e:	4603      	mov	r3, r0
 800d450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d452:	7bfb      	ldrb	r3, [r7, #15]
 800d454:	4618      	mov	r0, r3
 800d456:	f000 f8bf 	bl	800d5d8 <USBD_Get_USB_Status>
 800d45a:	4603      	mov	r3, r0
 800d45c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d45e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3710      	adds	r7, #16
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	460b      	mov	r3, r1
 800d472:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d47a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d47c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d480:	2b00      	cmp	r3, #0
 800d482:	da0b      	bge.n	800d49c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d484:	78fb      	ldrb	r3, [r7, #3]
 800d486:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d48a:	68f9      	ldr	r1, [r7, #12]
 800d48c:	4613      	mov	r3, r2
 800d48e:	00db      	lsls	r3, r3, #3
 800d490:	4413      	add	r3, r2
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	440b      	add	r3, r1
 800d496:	3316      	adds	r3, #22
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	e00b      	b.n	800d4b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d49c:	78fb      	ldrb	r3, [r7, #3]
 800d49e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d4a2:	68f9      	ldr	r1, [r7, #12]
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	00db      	lsls	r3, r3, #3
 800d4a8:	4413      	add	r3, r2
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	440b      	add	r3, r1
 800d4ae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d4b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3714      	adds	r7, #20
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d4da:	78fa      	ldrb	r2, [r7, #3]
 800d4dc:	4611      	mov	r1, r2
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7f4 ff7e 	bl	80023e0 <HAL_PCD_SetAddress>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4e8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f000 f874 	bl	800d5d8 <USBD_Get_USB_Status>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3710      	adds	r7, #16
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4fe:	b580      	push	{r7, lr}
 800d500:	b086      	sub	sp, #24
 800d502:	af00      	add	r7, sp, #0
 800d504:	60f8      	str	r0, [r7, #12]
 800d506:	607a      	str	r2, [r7, #4]
 800d508:	603b      	str	r3, [r7, #0]
 800d50a:	460b      	mov	r3, r1
 800d50c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d50e:	2300      	movs	r3, #0
 800d510:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d512:	2300      	movs	r3, #0
 800d514:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d51c:	7af9      	ldrb	r1, [r7, #11]
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	687a      	ldr	r2, [r7, #4]
 800d522:	f7f5 f888 	bl	8002636 <HAL_PCD_EP_Transmit>
 800d526:	4603      	mov	r3, r0
 800d528:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d52a:	7dfb      	ldrb	r3, [r7, #23]
 800d52c:	4618      	mov	r0, r3
 800d52e:	f000 f853 	bl	800d5d8 <USBD_Get_USB_Status>
 800d532:	4603      	mov	r3, r0
 800d534:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d536:	7dbb      	ldrb	r3, [r7, #22]
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3718      	adds	r7, #24
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b086      	sub	sp, #24
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	607a      	str	r2, [r7, #4]
 800d54a:	603b      	str	r3, [r7, #0]
 800d54c:	460b      	mov	r3, r1
 800d54e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d550:	2300      	movs	r3, #0
 800d552:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d554:	2300      	movs	r3, #0
 800d556:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d55e:	7af9      	ldrb	r1, [r7, #11]
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	f7f5 f814 	bl	8002590 <HAL_PCD_EP_Receive>
 800d568:	4603      	mov	r3, r0
 800d56a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d56c:	7dfb      	ldrb	r3, [r7, #23]
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 f832 	bl	800d5d8 <USBD_Get_USB_Status>
 800d574:	4603      	mov	r3, r0
 800d576:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d578:	7dbb      	ldrb	r3, [r7, #22]
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3718      	adds	r7, #24
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b082      	sub	sp, #8
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	460b      	mov	r3, r1
 800d58c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d594:	78fa      	ldrb	r2, [r7, #3]
 800d596:	4611      	mov	r1, r2
 800d598:	4618      	mov	r0, r3
 800d59a:	f7f5 f834 	bl	8002606 <HAL_PCD_EP_GetRxCount>
 800d59e:	4603      	mov	r3, r0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d5b0:	4b03      	ldr	r3, [pc, #12]	@ (800d5c0 <USBD_static_malloc+0x18>)
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	370c      	adds	r7, #12
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	20005ec0 	.word	0x20005ec0

0800d5c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]

}
 800d5cc:	bf00      	nop
 800d5ce:	370c      	adds	r7, #12
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr

0800d5d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	4603      	mov	r3, r0
 800d5e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d5e6:	79fb      	ldrb	r3, [r7, #7]
 800d5e8:	2b03      	cmp	r3, #3
 800d5ea:	d817      	bhi.n	800d61c <USBD_Get_USB_Status+0x44>
 800d5ec:	a201      	add	r2, pc, #4	@ (adr r2, 800d5f4 <USBD_Get_USB_Status+0x1c>)
 800d5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f2:	bf00      	nop
 800d5f4:	0800d605 	.word	0x0800d605
 800d5f8:	0800d60b 	.word	0x0800d60b
 800d5fc:	0800d611 	.word	0x0800d611
 800d600:	0800d617 	.word	0x0800d617
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d604:	2300      	movs	r3, #0
 800d606:	73fb      	strb	r3, [r7, #15]
    break;
 800d608:	e00b      	b.n	800d622 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d60a:	2303      	movs	r3, #3
 800d60c:	73fb      	strb	r3, [r7, #15]
    break;
 800d60e:	e008      	b.n	800d622 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d610:	2301      	movs	r3, #1
 800d612:	73fb      	strb	r3, [r7, #15]
    break;
 800d614:	e005      	b.n	800d622 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d616:	2303      	movs	r3, #3
 800d618:	73fb      	strb	r3, [r7, #15]
    break;
 800d61a:	e002      	b.n	800d622 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d61c:	2303      	movs	r3, #3
 800d61e:	73fb      	strb	r3, [r7, #15]
    break;
 800d620:	bf00      	nop
  }
  return usb_status;
 800d622:	7bfb      	ldrb	r3, [r7, #15]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3714      	adds	r7, #20
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <memset>:
 800d630:	4402      	add	r2, r0
 800d632:	4603      	mov	r3, r0
 800d634:	4293      	cmp	r3, r2
 800d636:	d100      	bne.n	800d63a <memset+0xa>
 800d638:	4770      	bx	lr
 800d63a:	f803 1b01 	strb.w	r1, [r3], #1
 800d63e:	e7f9      	b.n	800d634 <memset+0x4>

0800d640 <_reclaim_reent>:
 800d640:	4b29      	ldr	r3, [pc, #164]	@ (800d6e8 <_reclaim_reent+0xa8>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4283      	cmp	r3, r0
 800d646:	b570      	push	{r4, r5, r6, lr}
 800d648:	4604      	mov	r4, r0
 800d64a:	d04b      	beq.n	800d6e4 <_reclaim_reent+0xa4>
 800d64c:	69c3      	ldr	r3, [r0, #28]
 800d64e:	b1ab      	cbz	r3, 800d67c <_reclaim_reent+0x3c>
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	b16b      	cbz	r3, 800d670 <_reclaim_reent+0x30>
 800d654:	2500      	movs	r5, #0
 800d656:	69e3      	ldr	r3, [r4, #28]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	5959      	ldr	r1, [r3, r5]
 800d65c:	2900      	cmp	r1, #0
 800d65e:	d13b      	bne.n	800d6d8 <_reclaim_reent+0x98>
 800d660:	3504      	adds	r5, #4
 800d662:	2d80      	cmp	r5, #128	@ 0x80
 800d664:	d1f7      	bne.n	800d656 <_reclaim_reent+0x16>
 800d666:	69e3      	ldr	r3, [r4, #28]
 800d668:	4620      	mov	r0, r4
 800d66a:	68d9      	ldr	r1, [r3, #12]
 800d66c:	f000 f872 	bl	800d754 <_free_r>
 800d670:	69e3      	ldr	r3, [r4, #28]
 800d672:	6819      	ldr	r1, [r3, #0]
 800d674:	b111      	cbz	r1, 800d67c <_reclaim_reent+0x3c>
 800d676:	4620      	mov	r0, r4
 800d678:	f000 f86c 	bl	800d754 <_free_r>
 800d67c:	6961      	ldr	r1, [r4, #20]
 800d67e:	b111      	cbz	r1, 800d686 <_reclaim_reent+0x46>
 800d680:	4620      	mov	r0, r4
 800d682:	f000 f867 	bl	800d754 <_free_r>
 800d686:	69e1      	ldr	r1, [r4, #28]
 800d688:	b111      	cbz	r1, 800d690 <_reclaim_reent+0x50>
 800d68a:	4620      	mov	r0, r4
 800d68c:	f000 f862 	bl	800d754 <_free_r>
 800d690:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d692:	b111      	cbz	r1, 800d69a <_reclaim_reent+0x5a>
 800d694:	4620      	mov	r0, r4
 800d696:	f000 f85d 	bl	800d754 <_free_r>
 800d69a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d69c:	b111      	cbz	r1, 800d6a4 <_reclaim_reent+0x64>
 800d69e:	4620      	mov	r0, r4
 800d6a0:	f000 f858 	bl	800d754 <_free_r>
 800d6a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d6a6:	b111      	cbz	r1, 800d6ae <_reclaim_reent+0x6e>
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f000 f853 	bl	800d754 <_free_r>
 800d6ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d6b0:	b111      	cbz	r1, 800d6b8 <_reclaim_reent+0x78>
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	f000 f84e 	bl	800d754 <_free_r>
 800d6b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d6ba:	b111      	cbz	r1, 800d6c2 <_reclaim_reent+0x82>
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f000 f849 	bl	800d754 <_free_r>
 800d6c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d6c4:	b111      	cbz	r1, 800d6cc <_reclaim_reent+0x8c>
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	f000 f844 	bl	800d754 <_free_r>
 800d6cc:	6a23      	ldr	r3, [r4, #32]
 800d6ce:	b14b      	cbz	r3, 800d6e4 <_reclaim_reent+0xa4>
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d6d6:	4718      	bx	r3
 800d6d8:	680e      	ldr	r6, [r1, #0]
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f000 f83a 	bl	800d754 <_free_r>
 800d6e0:	4631      	mov	r1, r6
 800d6e2:	e7bb      	b.n	800d65c <_reclaim_reent+0x1c>
 800d6e4:	bd70      	pop	{r4, r5, r6, pc}
 800d6e6:	bf00      	nop
 800d6e8:	20000100 	.word	0x20000100

0800d6ec <__libc_init_array>:
 800d6ec:	b570      	push	{r4, r5, r6, lr}
 800d6ee:	4d0d      	ldr	r5, [pc, #52]	@ (800d724 <__libc_init_array+0x38>)
 800d6f0:	4c0d      	ldr	r4, [pc, #52]	@ (800d728 <__libc_init_array+0x3c>)
 800d6f2:	1b64      	subs	r4, r4, r5
 800d6f4:	10a4      	asrs	r4, r4, #2
 800d6f6:	2600      	movs	r6, #0
 800d6f8:	42a6      	cmp	r6, r4
 800d6fa:	d109      	bne.n	800d710 <__libc_init_array+0x24>
 800d6fc:	4d0b      	ldr	r5, [pc, #44]	@ (800d72c <__libc_init_array+0x40>)
 800d6fe:	4c0c      	ldr	r4, [pc, #48]	@ (800d730 <__libc_init_array+0x44>)
 800d700:	f000 f87e 	bl	800d800 <_init>
 800d704:	1b64      	subs	r4, r4, r5
 800d706:	10a4      	asrs	r4, r4, #2
 800d708:	2600      	movs	r6, #0
 800d70a:	42a6      	cmp	r6, r4
 800d70c:	d105      	bne.n	800d71a <__libc_init_array+0x2e>
 800d70e:	bd70      	pop	{r4, r5, r6, pc}
 800d710:	f855 3b04 	ldr.w	r3, [r5], #4
 800d714:	4798      	blx	r3
 800d716:	3601      	adds	r6, #1
 800d718:	e7ee      	b.n	800d6f8 <__libc_init_array+0xc>
 800d71a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d71e:	4798      	blx	r3
 800d720:	3601      	adds	r6, #1
 800d722:	e7f2      	b.n	800d70a <__libc_init_array+0x1e>
 800d724:	0800d9d8 	.word	0x0800d9d8
 800d728:	0800d9d8 	.word	0x0800d9d8
 800d72c:	0800d9d8 	.word	0x0800d9d8
 800d730:	0800d9dc 	.word	0x0800d9dc

0800d734 <__retarget_lock_acquire_recursive>:
 800d734:	4770      	bx	lr

0800d736 <__retarget_lock_release_recursive>:
 800d736:	4770      	bx	lr

0800d738 <memcpy>:
 800d738:	440a      	add	r2, r1
 800d73a:	4291      	cmp	r1, r2
 800d73c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d740:	d100      	bne.n	800d744 <memcpy+0xc>
 800d742:	4770      	bx	lr
 800d744:	b510      	push	{r4, lr}
 800d746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d74a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d74e:	4291      	cmp	r1, r2
 800d750:	d1f9      	bne.n	800d746 <memcpy+0xe>
 800d752:	bd10      	pop	{r4, pc}

0800d754 <_free_r>:
 800d754:	b538      	push	{r3, r4, r5, lr}
 800d756:	4605      	mov	r5, r0
 800d758:	2900      	cmp	r1, #0
 800d75a:	d041      	beq.n	800d7e0 <_free_r+0x8c>
 800d75c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d760:	1f0c      	subs	r4, r1, #4
 800d762:	2b00      	cmp	r3, #0
 800d764:	bfb8      	it	lt
 800d766:	18e4      	addlt	r4, r4, r3
 800d768:	f000 f83e 	bl	800d7e8 <__malloc_lock>
 800d76c:	4a1d      	ldr	r2, [pc, #116]	@ (800d7e4 <_free_r+0x90>)
 800d76e:	6813      	ldr	r3, [r2, #0]
 800d770:	b933      	cbnz	r3, 800d780 <_free_r+0x2c>
 800d772:	6063      	str	r3, [r4, #4]
 800d774:	6014      	str	r4, [r2, #0]
 800d776:	4628      	mov	r0, r5
 800d778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d77c:	f000 b83a 	b.w	800d7f4 <__malloc_unlock>
 800d780:	42a3      	cmp	r3, r4
 800d782:	d908      	bls.n	800d796 <_free_r+0x42>
 800d784:	6820      	ldr	r0, [r4, #0]
 800d786:	1821      	adds	r1, r4, r0
 800d788:	428b      	cmp	r3, r1
 800d78a:	bf01      	itttt	eq
 800d78c:	6819      	ldreq	r1, [r3, #0]
 800d78e:	685b      	ldreq	r3, [r3, #4]
 800d790:	1809      	addeq	r1, r1, r0
 800d792:	6021      	streq	r1, [r4, #0]
 800d794:	e7ed      	b.n	800d772 <_free_r+0x1e>
 800d796:	461a      	mov	r2, r3
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	b10b      	cbz	r3, 800d7a0 <_free_r+0x4c>
 800d79c:	42a3      	cmp	r3, r4
 800d79e:	d9fa      	bls.n	800d796 <_free_r+0x42>
 800d7a0:	6811      	ldr	r1, [r2, #0]
 800d7a2:	1850      	adds	r0, r2, r1
 800d7a4:	42a0      	cmp	r0, r4
 800d7a6:	d10b      	bne.n	800d7c0 <_free_r+0x6c>
 800d7a8:	6820      	ldr	r0, [r4, #0]
 800d7aa:	4401      	add	r1, r0
 800d7ac:	1850      	adds	r0, r2, r1
 800d7ae:	4283      	cmp	r3, r0
 800d7b0:	6011      	str	r1, [r2, #0]
 800d7b2:	d1e0      	bne.n	800d776 <_free_r+0x22>
 800d7b4:	6818      	ldr	r0, [r3, #0]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	6053      	str	r3, [r2, #4]
 800d7ba:	4408      	add	r0, r1
 800d7bc:	6010      	str	r0, [r2, #0]
 800d7be:	e7da      	b.n	800d776 <_free_r+0x22>
 800d7c0:	d902      	bls.n	800d7c8 <_free_r+0x74>
 800d7c2:	230c      	movs	r3, #12
 800d7c4:	602b      	str	r3, [r5, #0]
 800d7c6:	e7d6      	b.n	800d776 <_free_r+0x22>
 800d7c8:	6820      	ldr	r0, [r4, #0]
 800d7ca:	1821      	adds	r1, r4, r0
 800d7cc:	428b      	cmp	r3, r1
 800d7ce:	bf04      	itt	eq
 800d7d0:	6819      	ldreq	r1, [r3, #0]
 800d7d2:	685b      	ldreq	r3, [r3, #4]
 800d7d4:	6063      	str	r3, [r4, #4]
 800d7d6:	bf04      	itt	eq
 800d7d8:	1809      	addeq	r1, r1, r0
 800d7da:	6021      	streq	r1, [r4, #0]
 800d7dc:	6054      	str	r4, [r2, #4]
 800d7de:	e7ca      	b.n	800d776 <_free_r+0x22>
 800d7e0:	bd38      	pop	{r3, r4, r5, pc}
 800d7e2:	bf00      	nop
 800d7e4:	2000621c 	.word	0x2000621c

0800d7e8 <__malloc_lock>:
 800d7e8:	4801      	ldr	r0, [pc, #4]	@ (800d7f0 <__malloc_lock+0x8>)
 800d7ea:	f7ff bfa3 	b.w	800d734 <__retarget_lock_acquire_recursive>
 800d7ee:	bf00      	nop
 800d7f0:	20006218 	.word	0x20006218

0800d7f4 <__malloc_unlock>:
 800d7f4:	4801      	ldr	r0, [pc, #4]	@ (800d7fc <__malloc_unlock+0x8>)
 800d7f6:	f7ff bf9e 	b.w	800d736 <__retarget_lock_release_recursive>
 800d7fa:	bf00      	nop
 800d7fc:	20006218 	.word	0x20006218

0800d800 <_init>:
 800d800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d802:	bf00      	nop
 800d804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d806:	bc08      	pop	{r3}
 800d808:	469e      	mov	lr, r3
 800d80a:	4770      	bx	lr

0800d80c <_fini>:
 800d80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d80e:	bf00      	nop
 800d810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d812:	bc08      	pop	{r3}
 800d814:	469e      	mov	lr, r3
 800d816:	4770      	bx	lr
